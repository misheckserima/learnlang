{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\n\"Learn a Language\" is a comprehensive language learning platform built as a full-stack web application. The platform combines interactive learning exercises, AI-powered pronunciation feedback, cultural immersion through stories, and real-time community features to create an engaging multilingual educational experience. The application supports vocabulary building, grammar practice, pronunciation training, and cultural learning through gamified interactions and social learning features.\n\nThe platform features a custom logo with a globe icon inside speech bubbles, representing global communication and language learning. The branding emphasizes the universal nature of the platform with the simple, memorable name \"Learn a Language\".\n\n## Recent Updates (August 2025)\n- **Migration Complete**: Successfully migrated from Replit Agent to Replit environment with PostgreSQL database\n- **Authentication Fixed**: Resolved session persistence issues with enhanced cookie configuration and rolling sessions\n- **Database Setup**: Created session table, added 6 supported languages, and fixed user authentication credentials\n- **Enhanced Profile System**: Added comprehensive profile setup with image upload (1MB limit), location, interests, field of learning\n- **Personalized Learning Features**: Implemented AI-powered adaptive learning paths with CEFR level tracking (A1-C2)\n- **Progress Tracking**: Added study sessions tracking, progress benchmarks, and intelligent goal setting\n- **Database Schema Enhanced**: Added learning_paths, study_sessions, progress_benchmarks tables with full relations\n- **Profile Completion Flow**: New users are redirected to profile setup on first login\n- **Language Support**: Platform supports 6 languages (English, Russian, Mandarin, French, German, Spanish) with sample data seeded\n- **AI Content Generation**: Implemented Gemini AI integration for personalized learning content generation\n- **Interactive Learning Interface**: Built comprehensive learning pathway with vocabulary cards, grammar topics, and cultural notes\n- **Progress Tracking**: Added word mastery system and stage completion with database persistence\n\n## New Requirements (January 2025)\nUser provided comprehensive specification for enhanced platform features:\n- **Advanced Profile Setup**: Extended form with native/target language selection, proficiency levels (Beginner, Intermediate, C1, CA), area of interest with nested subcategories\n- **PDF Syllabus Upload**: AI integration to scan and incorporate syllabus content into learning paths\n- **Adaptive Learning System**: Progressive unlocking based on 80% assessment scores, retake functionality\n- **Spaced Repetition System**: Automated testing of previous content with performance tracking\n- **Gamification System**: Badge system with Level 1 Badge requiring Premium Membership criteria\n- **Video Call Matching**: Community tab with native-target language matching for 30-minute sessions\n- **Teaching Mode System**: 15-minute alternating teacher/student roles with AI question generation\n- **Performance Analytics**: Comprehensive AI analysis of user data for personalized recommendations\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Component Structure**: Modular component architecture with reusable UI components\n\n## Backend Architecture\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js for REST API endpoints\n- **API Structure**: RESTful endpoints for language learning core functionality\n- **Database ORM**: Drizzle ORM with type-safe schema definitions\n- **Session Management**: Express sessions with PostgreSQL session store\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless configuration\n- **Database Schema**: Streamlined schema supporting users, languages, vocabulary, grammar exercises, and achievements\n- **Migration System**: Drizzle Kit for database migrations and schema management\n- **Connection Pooling**: Neon serverless connection pooling for optimal performance\n\n## Authentication and Authorization\n- **Session-based Authentication**: Using connect-pg-simple for PostgreSQL session storage\n- **User Management**: User profiles with progress tracking and achievement systems\n- **Authorization**: Role-based access patterns for different user types and content access levels\n\n## External Dependencies\n- **Database**: Neon PostgreSQL serverless database\n- **Audio Processing**: Web Speech API for text-to-speech and speech recognition\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Development Tools**: Replit-specific plugins for development environment integration\n- **Build Tools**: Vite for frontend bundling, esbuild for backend compilation\n- **Fonts**: Google Fonts (Inter) for typography\n- **Image Hosting**: Unsplash for demo images and placeholder content\n\n## Key Features Architecture\n- **Interactive Learning**: Modular exercise components (flashcards, grammar quizzes, pronunciation practice, sentence building)\n- **Gamification**: Achievement system, progress tracking, streaks, and point systems\n- **Community Features**: Real-time chat, language exchange matching, study groups\n- **Cultural Immersion**: Story-based learning with cultural context and traditions\n- **Pronunciation Training**: Browser-based speech recognition and text-to-speech feedback\n- **Progress Analytics**: Comprehensive tracking of user learning metrics and performance","size_bytes":5869},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\n\n// CORS and middleware setup\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use(express.json({ limit: \"2mb\" }));\napp.use(express.urlencoded({ extended: false, limit: \"2mb\" }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed database with initial data\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    console.error(\"Server error:\", err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2737},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema,\n  insertLanguageSchema,\n  insertVocabularyWordSchema,\n  insertGrammarExerciseSchema,\n  insertLearningPathSchema,\n  insertStudySessionSchema,\n  insertProgressBenchmarkSchema,\n  insertLearningStageSchema,\n  insertUserConnectionSchema,\n  insertVideoCallSessionSchema,\n  updateUserProfileSchema,\n} from \"@shared/schema\";\nimport { generateLearningPathway, generateVocabularySet } from \"./gemini\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Session configuration\n  const PgSession = connectPgSimple(session);\n  app.use(session({\n    store: new PgSession({\n      pool: pool,\n      tableName: 'session',\n      createTableIfMissing: true\n    }),\n    secret: process.env.SESSION_SECRET || 'learn-a-language-secret-key-2025',\n    resave: false,\n    saveUninitialized: false,\n    rolling: true, // Reset expiry on activity\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true, // Keep secure from XSS\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      sameSite: 'lax', // Standard setting for same-origin\n      path: '/'\n    }\n  }));\n\n  // Middleware to extend session on each request\n  app.use((req, res, next) => {\n    if (req.session && req.session.userId) {\n      req.session.touch();\n    }\n    next();\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUserByEmail = await storage.getUserByEmail(userData.email);\n      const existingUserByUsername = await storage.getUserByUsername(userData.username);\n      \n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n      \n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      const user = await storage.createUser(userData);\n      req.session.userId = user.id;\n      \n      // Remove sensitive data before sending response\n      const { passwordHash, ...userResponse } = user;\n      res.status(201).json({ user: userResponse, message: \"Account created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n      \n      const user = await storage.validatePassword(email, password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      req.session.userId = user.id;\n      \n      // Remove sensitive data before sending response\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse, message: \"Login successful\" });\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Error destroying session:\", err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Remove sensitive data before sending response\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      console.error(\"Error fetching current user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user data\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  // Language routes\n  app.get(\"/api/languages\", async (req, res) => {\n    try {\n      const languages = await storage.getLanguages();\n      res.json(languages);\n    } catch (error) {\n      console.error(\"Error fetching languages:\", error);\n      res.status(500).json({ message: \"Failed to fetch languages\" });\n    }\n  });\n\n  app.post(\"/api/languages\", async (req, res) => {\n    try {\n      const languageData = insertLanguageSchema.parse(req.body);\n      const language = await storage.createLanguage(languageData);\n      res.status(201).json(language);\n    } catch (error) {\n      console.error(\"Error creating language:\", error);\n      res.status(400).json({ message: \"Invalid language data\" });\n    }\n  });\n\n  // Vocabulary routes\n  app.get(\"/api/languages/:languageId/vocabulary\", async (req, res) => {\n    try {\n      const { difficulty } = req.query;\n      const words = await storage.getVocabularyWords(\n        req.params.languageId,\n        difficulty as string\n      );\n      res.json(words);\n    } catch (error) {\n      console.error(\"Error fetching vocabulary:\", error);\n      res.status(500).json({ message: \"Failed to fetch vocabulary\" });\n    }\n  });\n\n  app.get(\"/api/languages/:languageId/vocabulary/random\", async (req, res) => {\n    try {\n      const count = parseInt(req.query.count as string) || 10;\n      const words = await storage.getRandomVocabularyWords(req.params.languageId, count);\n      res.json(words);\n    } catch (error) {\n      console.error(\"Error fetching random vocabulary:\", error);\n      res.status(500).json({ message: \"Failed to fetch random vocabulary\" });\n    }\n  });\n\n  app.post(\"/api/vocabulary\", async (req, res) => {\n    try {\n      const wordData = insertVocabularyWordSchema.parse(req.body);\n      const word = await storage.createVocabularyWord(wordData);\n      res.status(201).json(word);\n    } catch (error) {\n      console.error(\"Error creating vocabulary word:\", error);\n      res.status(400).json({ message: \"Invalid vocabulary data\" });\n    }\n  });\n\n  // Grammar exercise routes\n  app.get(\"/api/languages/:languageId/grammar\", async (req, res) => {\n    try {\n      const { difficulty } = req.query;\n      const exercises = await storage.getGrammarExercises(\n        req.params.languageId,\n        difficulty as string\n      );\n      res.json(exercises);\n    } catch (error) {\n      console.error(\"Error fetching grammar exercises:\", error);\n      res.status(500).json({ message: \"Failed to fetch grammar exercises\" });\n    }\n  });\n\n  app.get(\"/api/languages/:languageId/grammar/random\", async (req, res) => {\n    try {\n      const count = parseInt(req.query.count as string) || 5;\n      const exercises = await storage.getRandomGrammarExercises(req.params.languageId, count);\n      res.json(exercises);\n    } catch (error) {\n      console.error(\"Error fetching random grammar exercises:\", error);\n      res.status(500).json({ message: \"Failed to fetch random grammar exercises\" });\n    }\n  });\n\n  app.post(\"/api/grammar\", async (req, res) => {\n    try {\n      const exerciseData = insertGrammarExerciseSchema.parse(req.body);\n      const exercise = await storage.createGrammarExercise(exerciseData);\n      res.status(201).json(exercise);\n    } catch (error) {\n      console.error(\"Error creating grammar exercise:\", error);\n      res.status(400).json({ message: \"Invalid grammar exercise data\" });\n    }\n  });\n\n  // Profile routes\n  app.put(\"/api/profile\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const profileData = updateUserProfileSchema.parse(req.body);\n      const user = await storage.updateUserProfile(req.session.userId, profileData);\n      \n      // Remove sensitive data before sending response\n      const { passwordHash, ...userResponse } = user;\n      res.json({ user: userResponse, message: \"Profile updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(400).json({ message: \"Invalid profile data\" });\n    }\n  });\n\n  // Learning Path routes\n  app.get(\"/api/learning-paths/:languageId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const path = await storage.getUserLearningPath(req.session.userId, req.params.languageId);\n      if (!path) {\n        return res.json(null);\n      }\n      \n      // Calculate progress statistics\n      const stages = await storage.getLearningStages(path.id);\n      const completedStages = stages.filter(stage => stage.isCompleted).length;\n      const progressPercentage = stages.length > 0 ? (completedStages / stages.length) * 100 : 0;\n      \n      res.json({\n        ...path,\n        completedStages,\n        totalStages: stages.length,\n        progressPercentage\n      });\n    } catch (error) {\n      console.error(\"Error fetching learning path:\", error);\n      res.status(500).json({ message: \"Failed to fetch learning path\" });\n    }\n  });\n\n  app.post(\"/api/learning-paths\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const pathData = insertLearningPathSchema.parse({\n        ...req.body,\n        userId: req.session.userId,\n      });\n      const path = await storage.createLearningPath(pathData);\n      res.status(201).json(path);\n    } catch (error) {\n      console.error(\"Error creating learning path:\", error);\n      res.status(400).json({ message: \"Invalid learning path data\" });\n    }\n  });\n\n  app.put(\"/api/learning-paths/:pathId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const updateData = req.body;\n      const path = await storage.updateLearningPath(req.params.pathId, updateData);\n      res.json(path);\n    } catch (error) {\n      console.error(\"Error updating learning path:\", error);\n      res.status(400).json({ message: \"Invalid learning path data\" });\n    }\n  });\n\n  // Study Session routes\n  app.post(\"/api/study-sessions\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const sessionData = insertStudySessionSchema.parse({\n        ...req.body,\n        userId: req.session.userId,\n      });\n      const session = await storage.createStudySession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      console.error(\"Error creating study session:\", error);\n      res.status(400).json({ message: \"Invalid study session data\" });\n    }\n  });\n\n  app.get(\"/api/study-sessions\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 10;\n      const sessions = await storage.getUserStudySessions(req.session.userId, limit);\n      res.json(sessions || []);\n    } catch (error) {\n      console.error(\"Error fetching study sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch study sessions\" });\n    }\n  });\n\n  // Progress Benchmark routes\n  app.get(\"/api/progress-benchmarks\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const languageId = req.query.languageId as string;\n      const benchmarks = await storage.getUserProgressBenchmarks(req.session.userId, languageId);\n      res.json(benchmarks);\n    } catch (error) {\n      console.error(\"Error fetching progress benchmarks:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress benchmarks\" });\n    }\n  });\n\n  app.post(\"/api/progress-benchmarks\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const benchmarkData = insertProgressBenchmarkSchema.parse({\n        ...req.body,\n        userId: req.session.userId,\n      });\n      const benchmark = await storage.createProgressBenchmark(benchmarkData);\n      res.status(201).json(benchmark);\n    } catch (error) {\n      console.error(\"Error creating progress benchmark:\", error);\n      res.status(400).json({ message: \"Invalid progress benchmark data\" });\n    }\n  });\n\n  // Learning Stage routes\n  app.get(\"/api/learning-paths/:pathId/stages\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const stages = await storage.getLearningStages(req.params.pathId);\n      res.json(stages || []);\n    } catch (error) {\n      console.error(\"Error fetching learning stages:\", error);\n      res.status(500).json({ message: \"Failed to fetch learning stages\" });\n    }\n  });\n\n  app.post(\"/api/learning-paths/:pathId/generate\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const learningPath = await storage.getUserLearningPath(req.session.userId, req.body.languageId);\n      if (!learningPath) {\n        return res.status(404).json({ message: \"Learning path not found\" });\n      }\n\n      // Get language information\n      const language = await storage.getLanguages();\n      const targetLanguage = language.find(l => l.id === req.body.languageId);\n      if (!targetLanguage) {\n        return res.status(404).json({ message: \"Language not found\" });\n      }\n\n      // Generate AI learning pathway\n      const aiStages = await generateLearningPathway(\n        targetLanguage.name,\n        \"English\", // Default native language\n        user.cefr_level || \"A1\",\n        user.interests || [],\n        user.fieldOfLearning\n      );\n\n      // Save stages to database\n      const savedStages = [];\n      for (let i = 0; i < aiStages.length; i++) {\n        const stage = aiStages[i];\n        const stageData = {\n          learningPathId: learningPath.id,\n          stageNumber: i + 1,\n          title: stage.title,\n          description: stage.description,\n          difficulty: stage.difficulty,\n          vocabularyData: stage.vocabularyWords,\n          grammarTopics: stage.grammarTopics,\n          culturalNotes: stage.culturalNotes,\n          completionCriteria: stage.completionCriteria,\n          isUnlocked: i === 0, // First stage is unlocked\n          isCompleted: false\n        };\n        \n        const savedStage = await storage.createLearningStage(stageData);\n        savedStages.push(savedStage);\n      }\n\n      res.json({ stages: savedStages, message: \"Learning pathway generated successfully\" });\n    } catch (error) {\n      console.error(\"Error generating learning pathway:\", error);\n      res.status(500).json({ message: \"Failed to generate learning pathway\" });\n    }\n  });\n\n  app.put(\"/api/learning-stages/:stageId/complete\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const stage = await storage.updateLearningStage(req.params.stageId, {\n        isCompleted: true,\n        completedAt: new Date()\n      });\n\n      // Unlock next stage\n      await storage.unlockNextStage(stage.learningPathId, stage.stageNumber);\n\n      res.json({ stage, message: \"Stage completed successfully\" });\n    } catch (error) {\n      console.error(\"Error completing stage:\", error);\n      res.status(500).json({ message: \"Failed to complete stage\" });\n    }\n  });\n\n  // Friends/Connections routes\n  app.get(\"/api/friends\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const connections = await storage.getUserConnections(req.session.userId);\n      res.json(connections);\n    } catch (error) {\n      console.error(\"Error fetching friends:\", error);\n      res.status(500).json({ message: \"Failed to fetch friends\" });\n    }\n  });\n\n  app.get(\"/api/friends/online\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const onlineFriends = await storage.getOnlineFriends(req.session.userId);\n      res.json(onlineFriends);\n    } catch (error) {\n      console.error(\"Error fetching online friends:\", error);\n      res.status(500).json({ message: \"Failed to fetch online friends\" });\n    }\n  });\n\n  app.post(\"/api/friends/connect\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const connectionData = insertUserConnectionSchema.parse({\n        userId: req.session.userId,\n        friendId: req.body.friendId,\n        status: \"pending\"\n      });\n\n      const connection = await storage.createConnection(connectionData);\n      res.status(201).json(connection);\n    } catch (error) {\n      console.error(\"Error creating connection:\", error);\n      res.status(400).json({ message: \"Invalid connection data\" });\n    }\n  });\n\n  app.put(\"/api/friends/:connectionId/status\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const connection = await storage.updateConnectionStatus(\n        req.params.connectionId,\n        req.body.status\n      );\n      res.json(connection);\n    } catch (error) {\n      console.error(\"Error updating connection status:\", error);\n      res.status(400).json({ message: \"Failed to update connection status\" });\n    }\n  });\n\n  // Video Call routes\n  app.post(\"/api/video-calls\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const callData = insertVideoCallSessionSchema.parse({\n        initiatorId: req.session.userId,\n        receiverId: req.body.receiverId,\n        sessionId: req.body.sessionId || `call_${Date.now()}`,\n        status: \"pending\"\n      });\n\n      const call = await storage.createVideoCallSession(callData);\n      res.status(201).json(call);\n    } catch (error) {\n      console.error(\"Error creating video call:\", error);\n      res.status(400).json({ message: \"Invalid video call data\" });\n    }\n  });\n\n  app.put(\"/api/video-calls/:callId/status\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const call = await storage.updateVideoCallStatus(\n        req.params.callId,\n        req.body.status\n      );\n      res.json(call);\n    } catch (error) {\n      console.error(\"Error updating video call status:\", error);\n      res.status(400).json({ message: \"Failed to update video call status\" });\n    }\n  });\n\n  app.get(\"/api/video-calls/active\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const activeCalls = await storage.getActiveCallsForUser(req.session.userId);\n      res.json(activeCalls);\n    } catch (error) {\n      console.error(\"Error fetching active calls:\", error);\n      res.status(500).json({ message: \"Failed to fetch active calls\" });\n    }\n  });\n\n  // AI Content Generation routes\n  app.post(\"/api/ai/vocabulary\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { language, topic, difficulty, count } = req.body;\n      const vocabulary = await generateVocabularySet(language, topic, difficulty, count);\n      res.json(vocabulary);\n    } catch (error) {\n      console.error(\"Error generating vocabulary:\", error);\n      res.status(500).json({ message: \"Failed to generate vocabulary\" });\n    }\n  });\n\n  // Update user online status\n  app.put(\"/api/users/online-status\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.updateUserOnlineStatus(req.session.userId, req.body.isOnline);\n      res.json({ message: \"Online status updated\" });\n    } catch (error) {\n      console.error(\"Error updating online status:\", error);\n      res.status(500).json({ message: \"Failed to update online status\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Error destroying session:\", err);\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  return httpServer;\n}","size_bytes":22282},"server/storage.ts":{"content":"import { \n  users, \n  languages,\n  vocabularyWords,\n  grammarExercises,\n  achievements,\n  userAchievements,\n  userVocabularyProgress,\n  learningPaths,\n  studySessions,\n  progressBenchmarks,\n  learningStages,\n  userConnections,\n  videoCallSessions,\n  userLearningContent,\n  flashcards,\n  type User, \n  type InsertUser,\n  type Language,\n  type InsertLanguage,\n  type VocabularyWord,\n  type InsertVocabularyWord,\n  type GrammarExercise,\n  type InsertGrammarExercise,\n  type LearningPath,\n  type InsertLearningPath,\n  type StudySession,\n  type InsertStudySession,\n  type ProgressBenchmark,\n  type InsertProgressBenchmark,\n  type LearningStage,\n  type InsertLearningStage,\n  type UserConnection,\n  type InsertUserConnection,\n  type VideoCallSession,\n  type InsertVideoCallSession,\n  type UserLearningContent,\n  type InsertUserLearningContent,\n  type Flashcard,\n  type InsertFlashcard,\n  updateUserProfileSchema,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  validatePassword(email: string, password: string): Promise<User | null>;\n  updateUserProfile(userId: string, profileData: any): Promise<User>;\n\n  // Language methods\n  getLanguages(): Promise<Language[]>;\n  createLanguage(insertLanguage: InsertLanguage): Promise<Language>;\n\n  // Vocabulary methods\n  getVocabularyWords(languageId: string, difficulty?: string): Promise<VocabularyWord[]>;\n  getRandomVocabularyWords(languageId: string, count: number): Promise<VocabularyWord[]>;\n  createVocabularyWord(insertWord: InsertVocabularyWord): Promise<VocabularyWord>;\n\n  // Grammar methods\n  getGrammarExercises(languageId: string, difficulty?: string): Promise<GrammarExercise[]>;\n  getRandomGrammarExercises(languageId: string, count: number): Promise<GrammarExercise[]>;\n  createGrammarExercise(insertExercise: InsertGrammarExercise): Promise<GrammarExercise>;\n\n  // Learning Path methods\n  getUserLearningPath(userId: string, languageId: string): Promise<LearningPath | undefined>;\n  createLearningPath(insertPath: InsertLearningPath): Promise<LearningPath>;\n  updateLearningPath(pathId: string, updateData: Partial<InsertLearningPath>): Promise<LearningPath>;\n\n  // Study Session methods\n  createStudySession(insertSession: InsertStudySession): Promise<StudySession>;\n  getUserStudySessions(userId: string, limit?: number): Promise<StudySession[]>;\n\n  // Progress Benchmark methods\n  getUserProgressBenchmarks(userId: string, languageId?: string): Promise<ProgressBenchmark[]>;\n  createProgressBenchmark(insertBenchmark: InsertProgressBenchmark): Promise<ProgressBenchmark>;\n  updateProgressBenchmark(benchmarkId: string, updateData: Partial<InsertProgressBenchmark>): Promise<ProgressBenchmark>;\n\n  // Learning Stage methods\n  getLearningStages(learningPathId: string): Promise<LearningStage[]>;\n  createLearningStage(insertStage: InsertLearningStage): Promise<LearningStage>;\n  updateLearningStage(stageId: string, updateData: Partial<InsertLearningStage>): Promise<LearningStage>;\n  unlockNextStage(learningPathId: string, currentStageNumber: number): Promise<void>;\n\n  // User Connection methods\n  getUserConnections(userId: string): Promise<UserConnection[]>;\n  getOnlineFriends(userId: string): Promise<UserConnection[]>;\n  createConnection(insertConnection: InsertUserConnection): Promise<UserConnection>;\n  updateConnectionStatus(connectionId: string, status: string): Promise<UserConnection>;\n  updateUserOnlineStatus(userId: string, isOnline: boolean): Promise<void>;\n\n  // Video Call methods\n  createVideoCallSession(insertCall: InsertVideoCallSession): Promise<VideoCallSession>;\n  updateVideoCallStatus(callId: string, status: string): Promise<VideoCallSession>;\n  getActiveCallsForUser(userId: string): Promise<VideoCallSession[]>;\n\n  // User Learning Content methods\n  getUserLearningContent(userId: string, languageId: string): Promise<UserLearningContent[]>;\n  createUserLearningContent(insertContent: InsertUserLearningContent): Promise<UserLearningContent>;\n  updateLearningContentProgress(contentId: string, masteryLevel: number): Promise<UserLearningContent>;\n\n  // Flashcard methods\n  getUserFlashcards(userId: string, dueOnly?: boolean): Promise<Flashcard[]>;\n  createFlashcard(insertFlashcard: InsertFlashcard): Promise<Flashcard>;\n  updateFlashcardReview(flashcardId: string, grade: number): Promise<Flashcard>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const { password, ...userData } = insertUser;\n    \n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    \n    const passwordHash = await bcrypt.hash(password, 10);\n    \n    const [user] = await db\n      .insert(users)\n      .values({ ...userData, passwordHash })\n      .returning();\n    return user;\n  }\n\n  async validatePassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.passwordHash);\n    return isValid ? user : null;\n  }\n\n  // Language methods\n  async getLanguages(): Promise<Language[]> {\n    return await db\n      .select()\n      .from(languages)\n      .where(eq(languages.isActive, true))\n      .orderBy(asc(languages.name));\n  }\n\n  async createLanguage(insertLanguage: InsertLanguage): Promise<Language> {\n    const [language] = await db\n      .insert(languages)\n      .values(insertLanguage)\n      .returning();\n    return language;\n  }\n\n  // Vocabulary methods\n  async getVocabularyWords(languageId: string, difficulty?: string): Promise<VocabularyWord[]> {\n    const conditions = [eq(vocabularyWords.languageId, languageId)];\n    \n    if (difficulty) {\n      conditions.push(eq(vocabularyWords.difficulty, difficulty));\n    }\n\n    return await db\n      .select()\n      .from(vocabularyWords)\n      .where(and(...conditions))\n      .orderBy(asc(vocabularyWords.word));\n  }\n\n  async getRandomVocabularyWords(languageId: string, count: number): Promise<VocabularyWord[]> {\n    return await db\n      .select()\n      .from(vocabularyWords)\n      .where(eq(vocabularyWords.languageId, languageId))\n      .orderBy(sql`RANDOM()`)\n      .limit(count);\n  }\n\n  async createVocabularyWord(insertWord: InsertVocabularyWord): Promise<VocabularyWord> {\n    const [word] = await db\n      .insert(vocabularyWords)\n      .values(insertWord)\n      .returning();\n    return word;\n  }\n\n  // Grammar methods\n  async getGrammarExercises(languageId: string, difficulty?: string): Promise<GrammarExercise[]> {\n    const conditions = [eq(grammarExercises.languageId, languageId)];\n    \n    if (difficulty) {\n      conditions.push(eq(grammarExercises.difficulty, difficulty));\n    }\n\n    return await db\n      .select()\n      .from(grammarExercises)\n      .where(and(...conditions))\n      .orderBy(asc(grammarExercises.grammarTopic));\n  }\n\n  async getRandomGrammarExercises(languageId: string, count: number): Promise<GrammarExercise[]> {\n    return await db\n      .select()\n      .from(grammarExercises)\n      .where(eq(grammarExercises.languageId, languageId))\n      .orderBy(sql`RANDOM()`)\n      .limit(count);\n  }\n\n  async createGrammarExercise(insertExercise: InsertGrammarExercise): Promise<GrammarExercise> {\n    const [exercise] = await db\n      .insert(grammarExercises)\n      .values(insertExercise)\n      .returning();\n    return exercise;\n  }\n\n  // Profile methods\n  async updateUserProfile(userId: string, profileData: any): Promise<User> {\n    const validatedData = updateUserProfileSchema.parse(profileData);\n    const [user] = await db\n      .update(users)\n      .set({\n        ...validatedData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Learning Path methods\n  async getUserLearningPath(userId: string, languageId: string): Promise<LearningPath | undefined> {\n    const [path] = await db\n      .select()\n      .from(learningPaths)\n      .where(and(\n        eq(learningPaths.userId, userId),\n        eq(learningPaths.languageId, languageId)\n      ));\n    return path || undefined;\n  }\n\n  async createLearningPath(insertPath: InsertLearningPath): Promise<LearningPath> {\n    const [path] = await db\n      .insert(learningPaths)\n      .values(insertPath)\n      .returning();\n    return path;\n  }\n\n  async updateLearningPath(pathId: string, updateData: Partial<InsertLearningPath>): Promise<LearningPath> {\n    const [path] = await db\n      .update(learningPaths)\n      .set({\n        ...updateData,\n        updatedAt: new Date(),\n      })\n      .where(eq(learningPaths.id, pathId))\n      .returning();\n    return path;\n  }\n\n  // Study Session methods\n  async createStudySession(insertSession: InsertStudySession): Promise<StudySession> {\n    const [session] = await db\n      .insert(studySessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async getUserStudySessions(userId: string, limit = 10): Promise<StudySession[]> {\n    return await db\n      .select()\n      .from(studySessions)\n      .where(eq(studySessions.userId, userId))\n      .orderBy(desc(studySessions.startedAt))\n      .limit(limit);\n  }\n\n  // Progress Benchmark methods\n  async getUserProgressBenchmarks(userId: string, languageId?: string): Promise<ProgressBenchmark[]> {\n    const conditions = [eq(progressBenchmarks.userId, userId)];\n    \n    if (languageId) {\n      conditions.push(eq(progressBenchmarks.languageId, languageId));\n    }\n\n    return await db\n      .select()\n      .from(progressBenchmarks)\n      .where(and(...conditions))\n      .orderBy(desc(progressBenchmarks.lastAssessment));\n  }\n\n  async createProgressBenchmark(insertBenchmark: InsertProgressBenchmark): Promise<ProgressBenchmark> {\n    const [benchmark] = await db\n      .insert(progressBenchmarks)\n      .values(insertBenchmark)\n      .returning();\n    return benchmark;\n  }\n\n  async updateProgressBenchmark(benchmarkId: string, updateData: Partial<InsertProgressBenchmark>): Promise<ProgressBenchmark> {\n    const [benchmark] = await db\n      .update(progressBenchmarks)\n      .set({\n        ...updateData,\n        updatedAt: new Date(),\n      })\n      .where(eq(progressBenchmarks.id, benchmarkId))\n      .returning();\n    return benchmark;\n  }\n\n  // Learning Stage methods\n  async getLearningStages(learningPathId: string): Promise<LearningStage[]> {\n    return await db\n      .select()\n      .from(learningStages)\n      .where(eq(learningStages.learningPathId, learningPathId))\n      .orderBy(asc(learningStages.stageNumber));\n  }\n\n  async createLearningStage(insertStage: InsertLearningStage): Promise<LearningStage> {\n    const [stage] = await db\n      .insert(learningStages)\n      .values(insertStage)\n      .returning();\n    return stage;\n  }\n\n  async updateLearningStage(stageId: string, updateData: Partial<InsertLearningStage>): Promise<LearningStage> {\n    const [stage] = await db\n      .update(learningStages)\n      .set(updateData)\n      .where(eq(learningStages.id, stageId))\n      .returning();\n    return stage;\n  }\n\n  async unlockNextStage(learningPathId: string, currentStageNumber: number): Promise<void> {\n    await db\n      .update(learningStages)\n      .set({ isUnlocked: true })\n      .where(\n        and(\n          eq(learningStages.learningPathId, learningPathId),\n          eq(learningStages.stageNumber, currentStageNumber + 1)\n        )\n      );\n  }\n\n  // User Connection methods\n  async getUserConnections(userId: string): Promise<UserConnection[]> {\n    return await db\n      .select()\n      .from(userConnections)\n      .where(\n        and(\n          eq(userConnections.userId, userId),\n          eq(userConnections.status, \"accepted\")\n        )\n      )\n      .orderBy(desc(userConnections.lastSeen));\n  }\n\n  async getOnlineFriends(userId: string): Promise<UserConnection[]> {\n    return await db\n      .select()\n      .from(userConnections)\n      .where(\n        and(\n          eq(userConnections.userId, userId),\n          eq(userConnections.status, \"accepted\"),\n          eq(userConnections.isOnline, true)\n        )\n      )\n      .orderBy(desc(userConnections.lastSeen));\n  }\n\n  async createConnection(insertConnection: InsertUserConnection): Promise<UserConnection> {\n    const [connection] = await db\n      .insert(userConnections)\n      .values(insertConnection)\n      .returning();\n    return connection;\n  }\n\n  async updateConnectionStatus(connectionId: string, status: string): Promise<UserConnection> {\n    const [connection] = await db\n      .update(userConnections)\n      .set({ status })\n      .where(eq(userConnections.id, connectionId))\n      .returning();\n    return connection;\n  }\n\n  async updateUserOnlineStatus(userId: string, isOnline: boolean): Promise<void> {\n    await db\n      .update(userConnections)\n      .set({ \n        isOnline,\n        lastSeen: new Date()\n      })\n      .where(\n        eq(userConnections.friendId, userId)\n      );\n  }\n\n  // Video Call methods\n  async createVideoCallSession(insertCall: InsertVideoCallSession): Promise<VideoCallSession> {\n    const [call] = await db\n      .insert(videoCallSessions)\n      .values(insertCall)\n      .returning();\n    return call;\n  }\n\n  async updateVideoCallStatus(callId: string, status: string): Promise<VideoCallSession> {\n    const [call] = await db\n      .update(videoCallSessions)\n      .set({ \n        status,\n        ...(status === \"active\" && { startedAt: new Date() }),\n        ...(status === \"ended\" && { endedAt: new Date() })\n      })\n      .where(eq(videoCallSessions.id, callId))\n      .returning();\n    return call;\n  }\n\n  async getActiveCallsForUser(userId: string): Promise<VideoCallSession[]> {\n    return await db\n      .select()\n      .from(videoCallSessions)\n      .where(\n        and(\n          sql`(${videoCallSessions.initiatorId} = ${userId} OR ${videoCallSessions.receiverId} = ${userId})`,\n          sql`${videoCallSessions.status} IN ('pending', 'active')`\n        )\n      )\n      .orderBy(desc(videoCallSessions.createdAt));\n  }\n\n  // User Learning Content methods\n  async getUserLearningContent(userId: string, languageId: string): Promise<UserLearningContent[]> {\n    return await db\n      .select()\n      .from(userLearningContent)\n      .where(\n        and(\n          eq(userLearningContent.userId, userId),\n          eq(userLearningContent.languageId, languageId)\n        )\n      )\n      .orderBy(desc(userLearningContent.createdAt));\n  }\n\n  async createUserLearningContent(insertContent: InsertUserLearningContent): Promise<UserLearningContent> {\n    const [content] = await db\n      .insert(userLearningContent)\n      .values(insertContent)\n      .returning();\n    return content;\n  }\n\n  async updateLearningContentProgress(contentId: string, masteryLevel: number): Promise<UserLearningContent> {\n    const [content] = await db\n      .update(userLearningContent)\n      .set({\n        masteryLevel,\n        lastReviewed: new Date(),\n        nextReview: new Date(Date.now() + 24 * 60 * 60 * 1000), // Next day\n        reviewCount: sql`${userLearningContent.reviewCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(userLearningContent.id, contentId))\n      .returning();\n    return content;\n  }\n\n  // Flashcard methods\n  async getUserFlashcards(userId: string, dueOnly: boolean = false): Promise<Flashcard[]> {\n    const conditions = [eq(flashcards.userId, userId), eq(flashcards.isArchived, false)];\n    \n    if (dueOnly) {\n      conditions.push(sql`${flashcards.nextReview} <= NOW()`);\n    }\n\n    return await db\n      .select()\n      .from(flashcards)\n      .where(and(...conditions))\n      .orderBy(asc(flashcards.nextReview));\n  }\n\n  async createFlashcard(insertFlashcard: InsertFlashcard): Promise<Flashcard> {\n    const [flashcard] = await db\n      .insert(flashcards)\n      .values(insertFlashcard)\n      .returning();\n    return flashcard;\n  }\n\n  async updateFlashcardReview(flashcardId: string, grade: number): Promise<Flashcard> {\n    // SM-2 spaced repetition algorithm\n    const [currentCard] = await db\n      .select()\n      .from(flashcards)\n      .where(eq(flashcards.id, flashcardId));\n\n    if (!currentCard) throw new Error(\"Flashcard not found\");\n\n    let easinessFactor = currentCard.easinessFactor || 2.5;\n    let interval = currentCard.interval || 1;\n    let repetitions = currentCard.repetitions || 0;\n\n    if (grade >= 3) {\n      if (repetitions === 0) {\n        interval = 1;\n      } else if (repetitions === 1) {\n        interval = 6;\n      } else {\n        interval = Math.round(interval * easinessFactor);\n      }\n      repetitions++;\n    } else {\n      repetitions = 0;\n      interval = 1;\n    }\n\n    easinessFactor = easinessFactor + (0.1 - (5 - grade) * (0.08 + (5 - grade) * 0.02));\n    if (easinessFactor < 1.3) easinessFactor = 1.3;\n\n    const nextReview = new Date(Date.now() + interval * 24 * 60 * 60 * 1000);\n\n    const [flashcard] = await db\n      .update(flashcards)\n      .set({\n        easinessFactor,\n        interval,\n        repetitions,\n        lastReviewed: new Date(),\n        nextReview,\n      })\n      .where(eq(flashcards.id, flashcardId))\n      .returning();\n\n    return flashcard;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":18027},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  integer,\n  timestamp,\n  boolean,\n  jsonb,\n  uuid,\n  decimal\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  profileImageUrl: text(\"profile_image_url\"),\n  location: varchar(\"location\", { length: 100 }),\n  country: varchar(\"country\", { length: 100 }),\n  interests: text(\"interests\").array(),\n  fieldOfLearning: varchar(\"field_of_learning\", { length: 100 }),\n  learningCategories: text(\"learning_categories\").array(),\n  contentTypes: text(\"content_types\").array(),\n  preferredLearningStyle: varchar(\"preferred_learning_style\", { length: 50 }),\n  currentStreak: integer(\"current_streak\").default(0),\n  totalPoints: integer(\"total_points\").default(0),\n  dailyGoalMinutes: integer(\"daily_goal_minutes\").default(20),\n  cefr_level: varchar(\"cefr_level\", { length: 5 }).default(\"A1\"), // A1, A2, B1, B2, C1, C2\n  profileCompleted: boolean(\"profile_completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Languages table - Only supporting 6 languages\nexport const languages = pgTable(\"languages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 10 }).notNull().unique(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  nativeName: varchar(\"native_name\", { length: 100 }).notNull(),\n  flagEmoji: varchar(\"flag_emoji\", { length: 10 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Vocabulary words\nexport const vocabularyWords = pgTable(\"vocabulary_words\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  languageId: uuid(\"language_id\").notNull().references(() => languages.id, { onDelete: \"cascade\" }),\n  word: varchar(\"word\", { length: 200 }).notNull(),\n  translation: varchar(\"translation\", { length: 200 }).notNull(),\n  pronunciation: text(\"pronunciation\"),\n  audioUrl: text(\"audio_url\"),\n  difficulty: varchar(\"difficulty\", { length: 20 }).default(\"beginner\"),\n  category: varchar(\"category\", { length: 50 }),\n  exampleSentence: text(\"example_sentence\"),\n  exampleTranslation: text(\"example_translation\"),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User vocabulary progress\nexport const userVocabularyProgress = pgTable(\"user_vocabulary_progress\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  wordId: uuid(\"word_id\").notNull().references(() => vocabularyWords.id, { onDelete: \"cascade\" }),\n  mastery: integer(\"mastery\").default(0), // 0-100\n  correctAnswers: integer(\"correct_answers\").default(0),\n  totalAttempts: integer(\"total_attempts\").default(0),\n  lastReviewed: timestamp(\"last_reviewed\"),\n  nextReview: timestamp(\"next_review\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Grammar exercises\nexport const grammarExercises = pgTable(\"grammar_exercises\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  languageId: uuid(\"language_id\").notNull().references(() => languages.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\", { length: 50 }).notNull(), // multiple_choice, fill_blank, sentence_building\n  question: text(\"question\").notNull(),\n  questionTranslation: text(\"question_translation\"),\n  correctAnswer: text(\"correct_answer\").notNull(),\n  options: jsonb(\"options\"), // for multiple choice\n  explanation: text(\"explanation\"),\n  difficulty: varchar(\"difficulty\", { length: 20 }).default(\"beginner\"),\n  grammarTopic: varchar(\"grammar_topic\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements\nexport const achievements = pgTable(\"achievements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  iconName: varchar(\"icon_name\", { length: 50 }),\n  category: varchar(\"category\", { length: 50 }),\n  criteria: jsonb(\"criteria\").notNull(),\n  points: integer(\"points\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  achievementId: uuid(\"achievement_id\").notNull().references(() => achievements.id, { onDelete: \"cascade\" }),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n});\n\n// Learning paths for personalized learning\nexport const learningPaths = pgTable(\"learning_paths\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  languageId: uuid(\"language_id\").notNull().references(() => languages.id, { onDelete: \"cascade\" }),\n  currentLevel: varchar(\"current_level\", { length: 5 }).default(\"A1\"),\n  targetLevel: varchar(\"target_level\", { length: 5 }).default(\"B2\"),\n  adaptiveDifficulty: decimal(\"adaptive_difficulty\", { precision: 3, scale: 2 }).default(\"0.5\"),\n  weeklyGoalHours: integer(\"weekly_goal_hours\").default(5),\n  studyDays: integer(\"study_days\").array().default(sql`ARRAY[1,2,3,4,5]`), // 1=Monday, 7=Sunday\n  reminderTime: varchar(\"reminder_time\", { length: 8 }).default(\"19:00:00\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Study sessions tracking\nexport const studySessions = pgTable(\"study_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  languageId: uuid(\"language_id\").notNull().references(() => languages.id, { onDelete: \"cascade\" }),\n  sessionType: varchar(\"session_type\", { length: 50 }).notNull(), // vocabulary, grammar, pronunciation, etc\n  durationMinutes: integer(\"duration_minutes\").notNull(),\n  correctAnswers: integer(\"correct_answers\").default(0),\n  totalQuestions: integer(\"total_questions\").default(0),\n  difficultyLevel: varchar(\"difficulty_level\", { length: 20 }),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Progress benchmarks\nexport const progressBenchmarks = pgTable(\"progress_benchmarks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  languageId: uuid(\"language_id\").notNull().references(() => languages.id, { onDelete: \"cascade\" }),\n  cefrLevel: varchar(\"cefr_level\", { length: 5 }).notNull(),\n  skillType: varchar(\"skill_type\", { length: 20 }).notNull(), // listening, reading, writing, speaking\n  currentScore: decimal(\"current_score\", { precision: 5, scale: 2 }).default(\"0\"),\n  maxScore: decimal(\"max_score\", { precision: 5, scale: 2 }).default(\"100\"),\n  lastAssessment: timestamp(\"last_assessment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Learning pathway stages\nexport const learningStages = pgTable(\"learning_stages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  learningPathId: uuid(\"learning_path_id\").notNull().references(() => learningPaths.id, { onDelete: \"cascade\" }),\n  stageNumber: integer(\"stage_number\").notNull(),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  difficulty: varchar(\"difficulty\", { length: 20 }).default(\"beginner\"),\n  vocabularyData: jsonb(\"vocabulary_data\"), // Array of vocabulary objects\n  grammarTopics: jsonb(\"grammar_topics\"), // Array of grammar topic objects\n  culturalNotes: text(\"cultural_notes\").array(),\n  completionCriteria: jsonb(\"completion_criteria\"), // Object with mastery requirements\n  isUnlocked: boolean(\"is_unlocked\").default(false),\n  isCompleted: boolean(\"is_completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User friends/connections\nexport const userConnections = pgTable(\"user_connections\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  friendId: uuid(\"friend_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, accepted, blocked\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Video call sessions\nexport const videoCallSessions = pgTable(\"video_call_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  initiatorId: uuid(\"initiator_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  receiverId: uuid(\"receiver_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  sessionId: varchar(\"session_id\", { length: 100 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, active, ended, declined\n  startedAt: timestamp(\"started_at\"),\n  endedAt: timestamp(\"ended_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User learning content generated by AI\nexport const userLearningContent = pgTable(\"user_learning_content\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  languageId: uuid(\"language_id\").notNull().references(() => languages.id, { onDelete: \"cascade\" }),\n  category: varchar(\"category\", { length: 50 }).notNull(), // Tech, Business, Education\n  subcategory: varchar(\"subcategory\", { length: 100 }), // robotics, marketing, etc\n  contentType: varchar(\"content_type\", { length: 30 }).notNull(), // terms, vocabulary, sentences, conversation\n  contentData: jsonb(\"content_data\").notNull(), // AI-generated content\n  difficulty: varchar(\"difficulty\", { length: 20 }).default(\"beginner\"),\n  cefrLevel: varchar(\"cefr_level\", { length: 5 }).notNull(),\n  isCompleted: boolean(\"is_completed\").default(false),\n  masteryLevel: integer(\"mastery_level\").default(0), // 0-100\n  lastReviewed: timestamp(\"last_reviewed\"),\n  nextReview: timestamp(\"next_review\"),\n  reviewCount: integer(\"review_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI-generated flashcards for spaced repetition\nexport const flashcards = pgTable(\"flashcards\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  learningContentId: uuid(\"learning_content_id\").references(() => userLearningContent.id, { onDelete: \"cascade\" }),\n  front: text(\"front\").notNull(), // Question/term\n  back: text(\"back\").notNull(), // Answer/definition\n  cardType: varchar(\"card_type\", { length: 30 }).notNull(), // vocabulary, grammar, sentence, etc\n  difficulty: varchar(\"difficulty\", { length: 20 }).default(\"normal\"),\n  easinessFactor: decimal(\"easiness_factor\", { precision: 3, scale: 2 }).default(\"2.5\"), // SM-2 algorithm\n  interval: integer(\"interval\").default(1), // Days until next review\n  repetitions: integer(\"repetitions\").default(0),\n  lastReviewed: timestamp(\"last_reviewed\"),\n  nextReview: timestamp(\"next_review\").defaultNow(),\n  isArchived: boolean(\"is_archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  userVocabularyProgress: many(userVocabularyProgress),\n  userAchievements: many(userAchievements),\n  learningPaths: many(learningPaths),\n  studySessions: many(studySessions),\n  progressBenchmarks: many(progressBenchmarks),\n  connections: many(userConnections, { relationName: \"user_connections\" }),\n  friendConnections: many(userConnections, { relationName: \"friend_connections\" }),\n  initiatedCalls: many(videoCallSessions, { relationName: \"initiated_calls\" }),\n  receivedCalls: many(videoCallSessions, { relationName: \"received_calls\" }),\n  learningContent: many(userLearningContent),\n  flashcards: many(flashcards),\n}));\n\nexport const languagesRelations = relations(languages, ({ many }) => ({\n  vocabularyWords: many(vocabularyWords),\n  grammarExercises: many(grammarExercises),\n  learningPaths: many(learningPaths),\n  studySessions: many(studySessions),\n  progressBenchmarks: many(progressBenchmarks),\n  userLearningContent: many(userLearningContent),\n}));\n\nexport const vocabularyWordsRelations = relations(vocabularyWords, ({ one, many }) => ({\n  language: one(languages, { fields: [vocabularyWords.languageId], references: [languages.id] }),\n  userVocabularyProgress: many(userVocabularyProgress),\n}));\n\nexport const userVocabularyProgressRelations = relations(userVocabularyProgress, ({ one }) => ({\n  user: one(users, { fields: [userVocabularyProgress.userId], references: [users.id] }),\n  word: one(vocabularyWords, { fields: [userVocabularyProgress.wordId], references: [vocabularyWords.id] }),\n}));\n\nexport const grammarExercisesRelations = relations(grammarExercises, ({ one }) => ({\n  language: one(languages, { fields: [grammarExercises.languageId], references: [languages.id] }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, { fields: [userAchievements.userId], references: [users.id] }),\n  achievement: one(achievements, { fields: [userAchievements.achievementId], references: [achievements.id] }),\n}));\n\nexport const learningPathsRelations = relations(learningPaths, ({ one, many }) => ({\n  user: one(users, { fields: [learningPaths.userId], references: [users.id] }),\n  language: one(languages, { fields: [learningPaths.languageId], references: [languages.id] }),\n  stages: many(learningStages),\n}));\n\nexport const studySessionsRelations = relations(studySessions, ({ one }) => ({\n  user: one(users, { fields: [studySessions.userId], references: [users.id] }),\n  language: one(languages, { fields: [studySessions.languageId], references: [languages.id] }),\n}));\n\nexport const progressBenchmarksRelations = relations(progressBenchmarks, ({ one }) => ({\n  user: one(users, { fields: [progressBenchmarks.userId], references: [users.id] }),\n  language: one(languages, { fields: [progressBenchmarks.languageId], references: [languages.id] }),\n}));\n\nexport const learningStagesRelations = relations(learningStages, ({ one }) => ({\n  learningPath: one(learningPaths, { fields: [learningStages.learningPathId], references: [learningPaths.id] }),\n}));\n\nexport const userConnectionsRelations = relations(userConnections, ({ one }) => ({\n  user: one(users, { fields: [userConnections.userId], references: [users.id] }),\n  friend: one(users, { fields: [userConnections.friendId], references: [users.id] }),\n}));\n\nexport const videoCallSessionsRelations = relations(videoCallSessions, ({ one }) => ({\n  initiator: one(users, { fields: [videoCallSessions.initiatorId], references: [users.id] }),\n  receiver: one(users, { fields: [videoCallSessions.receiverId], references: [users.id] }),\n}));\n\nexport const userLearningContentRelations = relations(userLearningContent, ({ one, many }) => ({\n  user: one(users, { fields: [userLearningContent.userId], references: [users.id] }),\n  language: one(languages, { fields: [userLearningContent.languageId], references: [languages.id] }),\n  flashcards: many(flashcards),\n}));\n\nexport const flashcardsRelations = relations(flashcards, ({ one }) => ({\n  user: one(users, { fields: [flashcards.userId], references: [users.id] }),\n  learningContent: one(userLearningContent, { fields: [flashcards.learningContentId], references: [userLearningContent.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  passwordHash: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const insertLanguageSchema = createInsertSchema(languages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVocabularyWordSchema = createInsertSchema(vocabularyWords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGrammarExerciseSchema = createInsertSchema(grammarExercises).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLearningPathSchema = createInsertSchema(learningPaths).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudySessionSchema = createInsertSchema(studySessions).omit({\n  id: true,\n  startedAt: true,\n});\n\nexport const insertProgressBenchmarkSchema = createInsertSchema(progressBenchmarks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateUserProfileSchema = createInsertSchema(users).omit({\n  id: true,\n  passwordHash: true,\n  createdAt: true,\n  email: true,\n  username: true,\n}).extend({\n  interests: z.array(z.string()).optional(),\n  studyDays: z.array(z.number()).optional(),\n});\n\nexport const insertLearningStageSchema = createInsertSchema(learningStages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserConnectionSchema = createInsertSchema(userConnections).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVideoCallSessionSchema = createInsertSchema(videoCallSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Language = typeof languages.$inferSelect;\nexport type InsertLanguage = z.infer<typeof insertLanguageSchema>;\n\nexport type VocabularyWord = typeof vocabularyWords.$inferSelect;\nexport type InsertVocabularyWord = z.infer<typeof insertVocabularyWordSchema>;\n\nexport type GrammarExercise = typeof grammarExercises.$inferSelect;\nexport type InsertGrammarExercise = z.infer<typeof insertGrammarExerciseSchema>;\n\nexport type LearningPath = typeof learningPaths.$inferSelect;\nexport type InsertLearningPath = z.infer<typeof insertLearningPathSchema>;\n\nexport type StudySession = typeof studySessions.$inferSelect;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\n\nexport type ProgressBenchmark = typeof progressBenchmarks.$inferSelect;\nexport type InsertProgressBenchmark = z.infer<typeof insertProgressBenchmarkSchema>;\n\nexport type UserVocabularyProgress = typeof userVocabularyProgress.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n\nexport type LearningStage = typeof learningStages.$inferSelect;\nexport type InsertLearningStage = z.infer<typeof insertLearningStageSchema>;\n\nexport type UserConnection = typeof userConnections.$inferSelect;\nexport type InsertUserConnection = z.infer<typeof insertUserConnectionSchema>;\n\nexport type VideoCallSession = typeof videoCallSessions.$inferSelect;\nexport type InsertVideoCallSession = z.infer<typeof insertVideoCallSessionSchema>;","size_bytes":19805},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/auth-context\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport HowItWorks from \"@/pages/how-it-works\";\nimport Contact from \"@/pages/contact\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profile from \"@/pages/profile\";\nimport ProfileSetup from \"@/pages/profile-setup\";\nimport NotFound from \"@/pages/not-found\";\nimport LearningPathway from \"@/pages/LearningPathway\";\nimport OnlineFriends from \"@/pages/OnlineFriends\";\nimport { useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Profile setup redirect component\nfunction ProfileSetupRedirect({ children }: { children: React.ReactNode }) {\n  const [location, setLocation] = useLocation();\n  \n  const { data: userResponse, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => apiRequest(\"/api/auth/me\"),\n    retry: 1,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const user = userResponse?.user;\n\n  useEffect(() => {\n    // Skip redirect logic for auth pages and API routes\n    if (location.startsWith('/login') || location.startsWith('/signup') || location.startsWith('/api')) {\n      return;\n    }\n\n    if (!isLoading && !error && user) {\n      if (!user.profileCompleted && location !== \"/profile-setup\") {\n        setLocation(\"/profile-setup\");\n      } else if (user.profileCompleted && (location === \"/\" || location === \"/home\")) {\n        setLocation(\"/dashboard\");\n      }\n    }\n  }, [user, isLoading, error, location, setLocation]);\n\n  // Don't show loading for unauthenticated users on public pages\n  if (isLoading && !error) {\n    const publicPages = ['/', '/about', '/how-it-works', '/contact', '/login', '/signup'];\n    if (publicPages.includes(location)) {\n      return <>{children}</>;\n    }\n    \n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <ProfileSetupRedirect>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/how-it-works\" component={HowItWorks} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/profile-setup\" component={ProfileSetup} />\n        <Route path=\"/learning-pathway\" component={LearningPathway} />\n        <Route path=\"/online-friends\" component={OnlineFriends} />\n        <Route path=\"/not-found\" component={NotFound} />\n        <Route component={NotFound} />\n      </Switch>\n    </ProfileSetupRedirect>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3558},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom animations for language learning background */\n@keyframes spin-slow {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes spin-reverse {\n  from {\n    transform: rotate(360deg);\n  }\n  to {\n    transform: rotate(0deg);\n  }\n}\n\n@keyframes slide-right {\n  0% {\n    transform: translateX(-100px);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(calc(100vw + 100px));\n    opacity: 0;\n  }\n}\n\n@keyframes slide-left {\n  0% {\n    transform: translateX(100px);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(calc(-100vw - 100px));\n    opacity: 0;\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes pulse-slow {\n  0%, 100% {\n    opacity: 0.3;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.8;\n    transform: scale(1.1);\n  }\n}\n\n@keyframes flag-transform {\n  0%, 80% {\n    transform: rotate(0deg) scale(1);\n  }\n  90% {\n    transform: rotate(180deg) scale(0.8);\n  }\n  100% {\n    transform: rotate(360deg) scale(1);\n  }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 25s linear infinite;\n}\n\n.animate-spin-reverse {\n  animation: spin-reverse 20s linear infinite;\n}\n\n.border-3 {\n  border-width: 3px;\n}\n\n.animate-slide-right {\n  animation: slide-right 12s linear infinite;\n}\n\n.animate-slide-left {\n  animation: slide-left 14s linear infinite;\n}\n\n.animate-slide-right-delayed {\n  animation: slide-right 16s linear infinite;\n  animation-delay: 4s;\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-float-delayed {\n  animation: float 6s ease-in-out infinite;\n  animation-delay: 2s;\n}\n\n.animate-float-slow {\n  animation: float 8s ease-in-out infinite;\n  animation-delay: 1s;\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 4s ease-in-out infinite;\n}\n\n.animate-pulse-slow-delayed {\n  animation: pulse-slow 4s ease-in-out infinite;\n  animation-delay: 2s;\n}\n\n.animate-flag-transform {\n  animation: flag-transform 6s ease-in-out infinite;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":3738},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/auth-header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { LogOut, User, Globe } from \"lucide-react\";\n\nexport function AuthHeader() {\n  const { user, isAuthenticated, logout } = useAuth();\n  const [location] = useLocation();\n\n  // Don't show header on auth pages\n  if (location === \"/login\" || location === \"/signup\") {\n    return null;\n  }\n\n  return (\n    <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between\">\n        <Link href=\"/\">\n          <div className=\"flex items-center space-x-2\">\n            <Globe className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-xl font-bold\">Learn a Language</span>\n          </div>\n        </Link>\n\n        <div className=\"flex items-center space-x-6\">\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/about\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n              About\n            </Link>\n            <Link href=\"/how-it-works\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n              How it Works\n            </Link>\n            <Link href=\"/contact\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n              Contact\n            </Link>\n          </nav>\n          {isAuthenticated && user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={user.profileImageUrl} alt={user.username} />\n                    <AvatarFallback>\n                      {user.firstName?.[0]}{user.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                <div className=\"flex flex-col space-y-1 p-2\">\n                  <p className=\"text-sm font-medium leading-none\">\n                    {user.firstName} {user.lastName}\n                  </p>\n                  <p className=\"text-xs leading-none text-muted-foreground\">\n                    @{user.username}\n                  </p>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Profile\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={logout}>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <div className=\"flex items-center space-x-2\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\">Sign In</Button>\n              </Link>\n              <Link href=\"/signup\">\n                <Button>Sign Up</Button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":3596},"client/src/components/community-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Send, Users } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { ChatMessage, User } from \"@shared/schema\";\n\ninterface ChatMessageWithUser extends ChatMessage {\n  user: User;\n}\n\nexport default function CommunityChat() {\n  const [message, setMessage] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [onlineCount, setOnlineCount] = useState(247);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const queryClient = useQueryClient();\n\n  // Mock current user - in real app would come from auth context\n  const currentUser = {\n    id: \"current-user-id\",\n    username: \"You\",\n    profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b5bc?w=100&h=100&fit=crop&crop=face\"\n  };\n\n  // Fetch chat messages\n  const { data: messages = [], isLoading } = useQuery<ChatMessageWithUser[]>({\n    queryKey: [\"/api/chat/messages\"],\n    refetchInterval: 5000, // Refetch every 5 seconds as fallback\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { content: string; translation?: string }) => {\n      // Send via WebSocket if connected, otherwise use API\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'chat',\n          userId: currentUser.id,\n          languageId: 'spanish-id', // Would be dynamic in real app\n          content: messageData.content,\n          translation: messageData.translation,\n        }));\n        return;\n      }\n      \n      // Fallback to HTTP API\n      const response = await fetch('/api/chat/messages', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: currentUser.id,\n          languageId: 'spanish-id',\n          content: messageData.content,\n          translation: messageData.translation,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\"] });\n    },\n  });\n\n  // WebSocket connection\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws?userId=${currentUser.id}`;\n    \n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        setIsConnected(true);\n        console.log('WebSocket connected');\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'chat') {\n            // Add new message to cache\n            queryClient.setQueryData<ChatMessageWithUser[]>([\"/api/chat/messages\"], (old = []) => {\n              const newMessage: ChatMessageWithUser = {\n                ...data.message,\n                user: data.user,\n              };\n              return [newMessage, ...old].slice(0, 50); // Keep only last 50 messages\n            });\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        setIsConnected(false);\n        console.log('WebSocket disconnected');\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [currentUser.id, queryClient]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    try {\n      await sendMessageMutation.mutateAsync({ \n        content: message.trim(),\n      });\n      setMessage(\"\");\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return formatDistanceToNow(new Date(date), { addSuffix: true });\n  };\n\n  // Mock messages for demonstration if API not available\n  const mockMessages: ChatMessageWithUser[] = [\n    {\n      id: \"1\",\n      userId: \"user1\",\n      languageId: \"spanish\",\n      content: \"¿Alguien me puede ayudar con el pretérito imperfecto? 🤔\",\n      translation: \"Can someone help me with the imperfect tense?\",\n      isModerated: false,\n      createdAt: new Date(Date.now() - 2 * 60 * 1000),\n      user: {\n        id: \"user1\",\n        username: \"Elena_Madrid\",\n        email: \"elena@example.com\",\n        firstName: \"Elena\",\n        lastName: \"García\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\",\n        currentStreak: 5,\n        totalPoints: 1200,\n        dailyGoalMinutes: 20,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    },\n    {\n      id: \"2\",\n      userId: \"user2\", \n      languageId: \"spanish\",\n      content: \"¡Claro! El pretérito imperfecto se usa para acciones habituales en el pasado...\",\n      translation: \"Of course! The imperfect tense is used for habitual actions in the past...\",\n      isModerated: false,\n      createdAt: new Date(Date.now() - 1 * 60 * 1000),\n      user: {\n        id: \"user2\",\n        username: \"David_Teacher\",\n        email: \"david@example.com\",\n        firstName: \"David\",\n        lastName: \"López\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop&crop=face\",\n        currentStreak: 15,\n        totalPoints: 5000,\n        dailyGoalMinutes: 30,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    }\n  ];\n\n  const displayMessages = messages.length > 0 ? messages : mockMessages;\n\n  return (\n    <Card className=\"h-[600px] flex flex-col\">\n      <CardHeader className=\"flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <span>Community Chat</span>\n            {isConnected && (\n              <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n            )}\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Users className=\"w-4 h-4 text-slate-600\" />\n            <span className=\"text-sm text-slate-600\">{onlineCount} online</span>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        {/* Messages */}\n        <ScrollArea className=\"flex-1 px-6\">\n          <div className=\"space-y-4 pb-4\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500\"></div>\n              </div>\n            ) : displayMessages.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-500\">\n                <p>No messages yet. Start the conversation!</p>\n              </div>\n            ) : (\n              displayMessages.map((msg) => (\n                <div key={msg.id} className=\"flex space-x-3\">\n                  <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                    <AvatarImage src={msg.user.profileImageUrl || \"\"} alt={msg.user.username} />\n                    <AvatarFallback>{msg.user.username.charAt(0).toUpperCase()}</AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <span className=\"font-medium text-slate-800 text-sm truncate\">\n                        {msg.user.username}\n                      </span>\n                      {msg.user.username.includes(\"Teacher\") && (\n                        <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-700 text-xs\">\n                          Native\n                        </Badge>\n                      )}\n                      <span className=\"text-xs text-slate-500\">\n                        {formatTime(msg.createdAt || new Date())}\n                      </span>\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm text-slate-700\">{msg.content}</p>\n                      {msg.translation && (\n                        <p className=\"text-xs text-slate-500 italic\">{msg.translation}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Message Input */}\n        <div className=\"border-t p-4\">\n          <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\n            <Input\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Type your message...\"\n              className=\"flex-1\"\n              disabled={sendMessageMutation.isPending}\n            />\n            <Button\n              type=\"submit\"\n              disabled={!message.trim() || sendMessageMutation.isPending}\n              className=\"bg-blue-500 hover:bg-blue-600\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </form>\n          \n          {!isConnected && (\n            <p className=\"text-xs text-amber-600 mt-2\">\n              Connection lost. Messages will be sent when reconnected.\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10398},"client/src/components/flashcard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Volume2, RotateCcw } from \"lucide-react\";\nimport { playTextToSpeech } from \"@/lib/audio-utils\";\nimport type { VocabularyWord } from \"@shared/schema\";\n\nexport default function Flashcard() {\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [showTranslation, setShowTranslation] = useState(false);\n\n  // Mock data for demonstration - in real app would fetch from API\n  const mockWords: VocabularyWord[] = [\n    {\n      id: \"1\",\n      languageId: \"spanish\",\n      word: \"Hola\",\n      translation: \"Hello\",\n      pronunciation: \"/ˈo.la/\",\n      audioUrl: \"\",\n      difficulty: \"beginner\",\n      category: \"greetings\",\n      exampleSentence: \"Hola, ¿cómo estás?\",\n      exampleTranslation: \"Hello, how are you?\",\n      imageUrl: \"\",\n      createdAt: new Date(),\n    },\n    {\n      id: \"2\",\n      languageId: \"spanish\", \n      word: \"Gracias\",\n      translation: \"Thank you\",\n      pronunciation: \"/ˈɡɾa.θjas/\",\n      audioUrl: \"\",\n      difficulty: \"beginner\",\n      category: \"politeness\",\n      exampleSentence: \"Gracias por tu ayuda\",\n      exampleTranslation: \"Thank you for your help\",\n      imageUrl: \"\",\n      createdAt: new Date(),\n    },\n    {\n      id: \"3\",\n      languageId: \"spanish\",\n      word: \"Casa\",\n      translation: \"House\",\n      pronunciation: \"/ˈka.sa/\",\n      audioUrl: \"\",\n      difficulty: \"beginner\", \n      category: \"home\",\n      exampleSentence: \"Mi casa es grande\",\n      exampleTranslation: \"My house is big\",\n      imageUrl: \"\",\n      createdAt: new Date(),\n    },\n  ];\n\n  const { data: words = mockWords, isLoading } = useQuery<VocabularyWord[]>({\n    queryKey: [\"/api/languages/spanish-id/vocabulary/random\", { count: 10 }],\n    enabled: false, // Disabled for demo\n  });\n\n  const currentWord = words[currentCardIndex];\n  const progress = ((currentCardIndex + 1) / words.length) * 100;\n\n  const handleFlip = () => {\n    setIsFlipped(!isFlipped);\n    setShowTranslation(!showTranslation);\n  };\n\n  const handleNext = (known: boolean = false) => {\n    if (currentCardIndex < words.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setIsFlipped(false);\n      setShowTranslation(false);\n    } else {\n      // Reset to beginning\n      setCurrentCardIndex(0);\n      setIsFlipped(false);\n      setShowTranslation(false);\n    }\n  };\n\n  const handlePlayAudio = () => {\n    // In real app, would play actual audio file\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(currentWord.word);\n      utterance.lang = 'es-ES';\n      utterance.rate = 0.8;\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const handleReset = () => {\n    setCurrentCardIndex(0);\n    setIsFlipped(false);\n    setShowTranslation(false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-500\"></div>\n      </div>\n    );\n  }\n\n  if (!currentWord) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-slate-600\">No vocabulary words available.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Vocabulary Practice</h3>\n        <p className=\"text-sm text-slate-600\">Click the card to reveal the translation</p>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between text-sm text-slate-600\">\n          <span>Progress</span>\n          <span>{currentCardIndex + 1} of {words.length}</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      {/* Flashcard */}\n      <div className=\"relative h-64 cursor-pointer\" onClick={handleFlip}>\n        <Card className={`absolute inset-0 transition-transform duration-300 ${\n          isFlipped ? \"rotate-y-180\" : \"\"\n        } hover:scale-105`}>\n          <CardContent className=\"h-full flex items-center justify-center p-8\">\n            {!showTranslation ? (\n              <div className=\"text-center text-white\">\n                <div className=\"bg-gradient-to-br from-emerald-500 to-blue-600 rounded-2xl h-full flex items-center justify-center\">\n                  <div>\n                    <div className=\"text-4xl font-bold mb-2\">{currentWord.word}</div>\n                    <div className=\"text-lg opacity-90 mb-4\">{currentWord.pronunciation}</div>\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handlePlayAudio();\n                      }}\n                      className=\"bg-white/20 hover:bg-white/30\"\n                    >\n                      <Volume2 className=\"w-4 h-4 mr-2\" />\n                      Listen\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <div className=\"bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl h-full flex items-center justify-center text-white\">\n                  <div>\n                    <div className=\"text-4xl font-bold mb-2\">{currentWord.translation}</div>\n                    {currentWord.exampleSentence && (\n                      <div className=\"mt-4 opacity-90\">\n                        <div className=\"text-lg\">{currentWord.exampleSentence}</div>\n                        <div className=\"text-sm mt-1\">{currentWord.exampleTranslation}</div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\" \n          size=\"sm\"\n          onClick={handleReset}\n          className=\"flex items-center space-x-2\"\n        >\n          <RotateCcw className=\"w-4 h-4\" />\n          <span>Reset</span>\n        </Button>\n\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => handleNext(false)}\n          >\n            Skip\n          </Button>\n          <Button\n            onClick={() => handleNext(true)}\n            className=\"bg-emerald-500 hover:bg-emerald-600\"\n          >\n            I Know This\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6864},"client/src/components/grammar-quiz.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, XCircle } from \"lucide-react\";\nimport type { GrammarExercise } from \"@shared/schema\";\n\nexport default function GrammarQuiz() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<string>(\"\");\n  const [showResult, setShowResult] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [score, setScore] = useState(0);\n\n  // Mock data for demonstration\n  const mockExercises: GrammarExercise[] = [\n    {\n      id: \"1\",\n      languageId: \"spanish\",\n      type: \"multiple_choice\",\n      question: \"Yo ______ español todos los días.\",\n      questionTranslation: \"I ______ Spanish every day.\",\n      correctAnswer: \"estudio\",\n      options: [\n        { id: \"a\", text: \"estudio\", translation: \"I study\" },\n        { id: \"b\", text: \"estudié\", translation: \"I studied\" },\n        { id: \"c\", text: \"estudiaré\", translation: \"I will study\" }\n      ],\n      explanation: \"Use 'estudio' (present tense) for habitual actions.\",\n      difficulty: \"beginner\",\n      grammarTopic: \"present_tense\",\n      createdAt: new Date(),\n    },\n    {\n      id: \"2\",\n      languageId: \"spanish\",\n      type: \"multiple_choice\", \n      question: \"¿Dónde ______ tú ayer?\",\n      questionTranslation: \"Where ______ you yesterday?\",\n      correctAnswer: \"estuviste\",\n      options: [\n        { id: \"a\", text: \"estás\", translation: \"you are\" },\n        { id: \"b\", text: \"estuviste\", translation: \"you were\" },\n        { id: \"c\", text: \"estarás\", translation: \"you will be\" }\n      ],\n      explanation: \"Use 'estuviste' (preterite tense) for completed past actions.\",\n      difficulty: \"intermediate\",\n      grammarTopic: \"past_tense\",\n      createdAt: new Date(),\n    },\n  ];\n\n  const { data: exercises = mockExercises, isLoading } = useQuery<GrammarExercise[]>({\n    queryKey: [\"/api/languages/spanish-id/grammar/random\", { count: 5 }],\n    enabled: false, // Disabled for demo\n  });\n\n  const currentExercise = exercises[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / exercises.length) * 100;\n\n  const handleAnswerSelect = (value: string) => {\n    setSelectedAnswer(value);\n  };\n\n  const handleSubmit = () => {\n    if (!selectedAnswer) return;\n\n    const correct = selectedAnswer === currentExercise.correctAnswer;\n    setIsCorrect(correct);\n    setShowResult(true);\n    \n    if (correct) {\n      setScore(score + 1);\n    }\n  };\n\n  const handleNext = () => {\n    if (currentQuestionIndex < exercises.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setSelectedAnswer(\"\");\n      setShowResult(false);\n    } else {\n      // Quiz completed\n      alert(`Quiz completed! Score: ${score}/${exercises.length}`);\n      setCurrentQuestionIndex(0);\n      setSelectedAnswer(\"\");\n      setShowResult(false);\n      setScore(0);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  if (!currentExercise) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-slate-600\">No grammar exercises available.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Grammar Challenge</h3>\n        <p className=\"text-sm text-slate-600\">Choose the correct form of the verb</p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between text-sm text-slate-600\">\n          <span>Question {currentQuestionIndex + 1} of {exercises.length}</span>\n          <span>Score: {score}/{exercises.length}</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      {/* Question */}\n      <Card className=\"bg-slate-50\">\n        <CardContent className=\"p-6\">\n          <div className=\"mb-4\">\n            <p className=\"text-lg text-slate-800 mb-2\">\n              {currentExercise.question.split('______').map((part, index, parts) => (\n                <span key={index}>\n                  {part}\n                  {index < parts.length - 1 && (\n                    <span className=\"font-bold text-blue-600 bg-blue-100 px-2 py-1 rounded\">\n                      ______\n                    </span>\n                  )}\n                </span>\n              ))}\n            </p>\n            <p className=\"text-sm text-slate-600\">{currentExercise.questionTranslation}</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Answer Options */}\n      <div className=\"space-y-3\">\n        <RadioGroup value={selectedAnswer} onValueChange={handleAnswerSelect}>\n          {(currentExercise.options as any[])?.map((option) => (\n            <div key={option.id} className=\"flex items-center space-x-2\">\n              <Card className={`flex-1 p-4 cursor-pointer transition-colors ${\n                selectedAnswer === option.text \n                  ? \"border-blue-500 bg-blue-50\" \n                  : \"hover:border-blue-300 hover:bg-blue-50\"\n              } ${showResult ? (\n                option.text === currentExercise.correctAnswer \n                  ? \"border-emerald-500 bg-emerald-50\" \n                  : selectedAnswer === option.text && !isCorrect\n                    ? \"border-red-500 bg-red-50\"\n                    : \"\"\n              ) : \"\"}`}>\n                <CardContent className=\"p-0\">\n                  <Label htmlFor={option.id} className=\"flex items-center space-x-3 cursor-pointer\">\n                    <RadioGroupItem value={option.text} id={option.id} />\n                    <div className=\"flex-1\">\n                      <span className=\"font-medium text-slate-800\">{option.text}</span>\n                      <span className=\"text-sm text-slate-600 ml-2\">({option.translation})</span>\n                    </div>\n                    {showResult && option.text === currentExercise.correctAnswer && (\n                      <CheckCircle className=\"w-5 h-5 text-emerald-500\" />\n                    )}\n                    {showResult && selectedAnswer === option.text && !isCorrect && (\n                      <XCircle className=\"w-5 h-5 text-red-500\" />\n                    )}\n                  </Label>\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </RadioGroup>\n      </div>\n\n      {/* Result & Explanation */}\n      {showResult && (\n        <Card className={`${isCorrect ? \"border-emerald-500 bg-emerald-50\" : \"border-red-500 bg-red-50\"}`}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              {isCorrect ? (\n                <CheckCircle className=\"w-5 h-5 text-emerald-500\" />\n              ) : (\n                <XCircle className=\"w-5 h-5 text-red-500\" />\n              )}\n              <span className={`font-medium ${isCorrect ? \"text-emerald-700\" : \"text-red-700\"}`}>\n                {isCorrect ? \"Correct!\" : \"Incorrect\"}\n              </span>\n            </div>\n            {currentExercise.explanation && (\n              <p className=\"text-sm text-slate-600\">{currentExercise.explanation}</p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Action Button */}\n      <div className=\"flex justify-end\">\n        {!showResult ? (\n          <Button\n            onClick={handleSubmit}\n            disabled={!selectedAnswer}\n            className=\"bg-blue-500 hover:bg-blue-600\"\n          >\n            Check Answer\n          </Button>\n        ) : (\n          <Button onClick={handleNext} className=\"bg-emerald-500 hover:bg-emerald-600\">\n            {currentQuestionIndex < exercises.length - 1 ? \"Next Question\" : \"Finish Quiz\"}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8256},"client/src/components/language-exchange.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { MessageSquare, Video, Clock, Globe, Users } from \"lucide-react\";\n\ninterface LanguagePartner {\n  id: string;\n  name: string;\n  avatar: string;\n  nativeLanguage: string;\n  learningLanguage: string;\n  location: string;\n  isOnline: boolean;\n  lastActive: string;\n  interests: string[];\n  experience: string;\n}\n\ninterface StudyGroup {\n  id: string;\n  name: string;\n  description: string;\n  language: string;\n  level: string;\n  memberCount: number;\n  isLive: boolean;\n  startTime?: string;\n  participants: { avatar: string }[];\n}\n\nexport default function LanguageExchange() {\n  const [selectedTab, setSelectedTab] = useState(\"partners\");\n\n  // Mock language partners\n  const mockPartners: LanguagePartner[] = [\n    {\n      id: \"1\",\n      name: \"María García\",\n      avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\",\n      nativeLanguage: \"Spanish\",\n      learningLanguage: \"English\",\n      location: \"Madrid, Spain\",\n      isOnline: true,\n      lastActive: \"now\",\n      interests: [\"Travel\", \"Movies\", \"Cooking\"],\n      experience: \"Teaching Spanish for 3 years\"\n    },\n    {\n      id: \"2\",\n      name: \"Carlos López\", \n      avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face\",\n      nativeLanguage: \"Spanish\",\n      learningLanguage: \"French\",\n      location: \"Barcelona, Spain\",\n      isOnline: false,\n      lastActive: \"2 hours ago\",\n      interests: [\"Art\", \"Music\", \"Sports\"],\n      experience: \"Intermediate French learner\"\n    },\n    {\n      id: \"3\",\n      name: \"Ana Rodriguez\",\n      avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\", \n      nativeLanguage: \"Spanish\",\n      learningLanguage: \"German\",\n      location: \"Valencia, Spain\",\n      isOnline: true,\n      lastActive: \"now\",\n      interests: [\"Books\", \"Technology\", \"Languages\"],\n      experience: \"Native Spanish speaker, B2 German\"\n    }\n  ];\n\n  // Mock study groups\n  const mockGroups: StudyGroup[] = [\n    {\n      id: \"1\",\n      name: \"Spanish Conversation Circle\",\n      description: \"Practice everyday conversations with intermediate learners\",\n      language: \"Spanish\",\n      level: \"Intermediate\",\n      memberCount: 12,\n      isLive: true,\n      participants: [\n        { avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=50&h=50&fit=crop&crop=face\" },\n        { avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=50&h=50&fit=crop&crop=face\" },\n        { avatar: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=50&h=50&fit=crop&crop=face\" }\n      ]\n    },\n    {\n      id: \"2\", \n      name: \"Grammar Bootcamp\",\n      description: \"Intensive grammar practice session for advanced learners\",\n      language: \"Spanish\",\n      level: \"Advanced\",\n      memberCount: 8,\n      isLive: false,\n      startTime: \"6:00 PM\",\n      participants: [\n        { avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=50&h=50&fit=crop&crop=face\" },\n        { avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b5bc?w=50&h=50&fit=crop&crop=face\" }\n      ]\n    }\n  ];\n\n  const { data: partners = mockPartners, isLoading: partnersLoading } = useQuery<LanguagePartner[]>({\n    queryKey: [\"/api/language-exchange/partners\"],\n    enabled: false, // Disabled for demo\n  });\n\n  const { data: groups = mockGroups, isLoading: groupsLoading } = useQuery<StudyGroup[]>({\n    queryKey: [\"/api/study-groups\"],\n    enabled: false, // Disabled for demo\n  });\n\n  const handleConnect = (partnerId: string) => {\n    console.log(\"Connecting with partner:\", partnerId);\n    // In real app, would initiate connection/conversation\n  };\n\n  const handleJoinGroup = (groupId: string) => {\n    console.log(\"Joining group:\", groupId);\n    // In real app, would join the study group\n  };\n\n  const getLevelColor = (level: string) => {\n    switch (level.toLowerCase()) {\n      case \"beginner\": return \"bg-blue-100 text-blue-600\";\n      case \"intermediate\": return \"bg-amber-100 text-amber-600\";\n      case \"advanced\": return \"bg-emerald-100 text-emerald-600\";\n      default: return \"bg-slate-100 text-slate-600\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"partners\">Language Partners</TabsTrigger>\n          <TabsTrigger value=\"groups\">Study Groups</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"partners\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Language Exchange Partners</CardTitle>\n                <Badge className=\"bg-emerald-100 text-emerald-600 flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n                  <span>Online Now</span>\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {partnersLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {partners.map((partner) => (\n                    <Card key={partner.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"relative\">\n                            <Avatar className=\"w-12 h-12\">\n                              <AvatarImage src={partner.avatar} alt={partner.name} />\n                              <AvatarFallback>{partner.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                            </Avatar>\n                            <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white ${\n                              partner.isOnline ? \"bg-emerald-500\" : \"bg-slate-400\"\n                            }`}></div>\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-medium text-slate-800 truncate\">{partner.name}</h4>\n                            <div className=\"flex items-center space-x-2 text-sm text-slate-600 mb-1\">\n                              <Globe className=\"w-3 h-3\" />\n                              <span>{partner.location}</span>\n                            </div>\n                            <div className=\"text-sm text-slate-600 mb-2\">\n                              <span>Native {partner.nativeLanguage} • Learning {partner.learningLanguage}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1 text-xs text-slate-500\">\n                              <Clock className=\"w-3 h-3\" />\n                              <span>{partner.isOnline ? \"Available now\" : `Last active ${partner.lastActive}`}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex flex-col space-y-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleConnect(partner.id)}\n                              className={`${\n                                partner.isOnline \n                                  ? \"bg-emerald-500 hover:bg-emerald-600\" \n                                  : \"bg-blue-500 hover:bg-blue-600\"\n                              }`}\n                            >\n                              {partner.isOnline ? (\n                                <>\n                                  <Video className=\"w-4 h-4 mr-1\" />\n                                  Connect\n                                </>\n                              ) : (\n                                <>\n                                  <MessageSquare className=\"w-4 h-4 mr-1\" />\n                                  Message\n                                </>\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        {/* Interests */}\n                        <div className=\"mt-3 pt-3 border-t border-slate-200\">\n                          <div className=\"flex items-center space-x-2 text-xs\">\n                            <span className=\"text-slate-600\">Interests:</span>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {partner.interests.map((interest, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                  {interest}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"groups\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Study Groups</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {groupsLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500\"></div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {groups.map((group) => (\n                    <Card key={group.id} className=\"border hover:border-emerald-300 transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-slate-800\">{group.name}</h4>\n                          <Badge className={`${\n                            group.isLive \n                              ? \"bg-emerald-100 text-emerald-600\" \n                              : \"bg-amber-100 text-amber-600\"\n                          }`}>\n                            {group.isLive ? \"Live Now\" : `Starts ${group.startTime}`}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-sm text-slate-600 mb-3\">{group.description}</p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"flex -space-x-2\">\n                                {group.participants.slice(0, 3).map((participant, index) => (\n                                  <Avatar key={index} className=\"w-6 h-6 border-2 border-white\">\n                                    <AvatarImage src={participant.avatar} alt=\"Participant\" />\n                                    <AvatarFallback>U</AvatarFallback>\n                                  </Avatar>\n                                ))}\n                                {group.memberCount > 3 && (\n                                  <div className=\"w-6 h-6 rounded-full bg-slate-200 border-2 border-white flex items-center justify-center\">\n                                    <span className=\"text-xs text-slate-600\">+{group.memberCount - 3}</span>\n                                  </div>\n                                )}\n                              </div>\n                              <span className=\"text-sm text-slate-600\">{group.memberCount} members</span>\n                            </div>\n                            \n                            <Badge className={getLevelColor(group.level)}>\n                              {group.level}\n                            </Badge>\n                          </div>\n                          \n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleJoinGroup(group.id)}\n                            className={`${\n                              group.isLive \n                                ? \"bg-emerald-500 hover:bg-emerald-600\" \n                                : \"bg-blue-500 hover:bg-blue-600\"\n                            }`}\n                          >\n                            <Users className=\"w-4 h-4 mr-1\" />\n                            {group.isLive ? \"Join Now\" : \"Reserve\"}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* AI Conversation Partner */}\n          <Card className=\"bg-gradient-to-br from-blue-50 to-emerald-50\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n                <MessageSquare className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">AI Conversation Partner</h3>\n              <p className=\"text-slate-600 mb-6\">Practice speaking with our AI tutor available 24/7</p>\n              \n              <div className=\"space-y-4 mb-6\">\n                <Card className=\"bg-white\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-emerald-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <MessageSquare className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div className=\"flex-1 text-left\">\n                        <p className=\"text-sm text-slate-700 mb-2\">¡Hola! Soy tu tutor virtual. ¿De qué te gustaría hablar hoy?</p>\n                        <p className=\"text-xs text-slate-500\">Hi! I'm your virtual tutor. What would you like to talk about today?</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-left\">\n                    Daily Activities\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-left\">\n                    Travel Plans\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-left\">\n                    Food & Cooking\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-left\">\n                    Work & Career\n                  </Button>\n                </div>\n              </div>\n              \n              <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                Start Conversation\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":15960},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { User, Settings, LogOut, Home, Brain } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Navigation() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch current user data\n  const { data: userResponse } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => apiRequest(\"/api/auth/me\"),\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const user = userResponse?.user;\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/auth/logout\", { method: \"POST\" }),\n    onSuccess: () => {\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n      setLocation(\"/\");\n    },\n  });\n\n  if (!user) {\n    return null; // Don't show navigation if user is not logged in\n  }\n\n  return (\n    <nav className=\"bg-white dark:bg-gray-800 shadow-sm border-b\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <Link href=\"/dashboard\">\n            <div className=\"flex items-center gap-3 cursor-pointer\">\n              <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg\">\n                <Brain className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                Learn a Language\n              </span>\n            </div>\n          </Link>\n\n          {/* Navigation Links */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/dashboard\">\n              <Button variant=\"ghost\" className=\"flex items-center gap-2\">\n                <Home className=\"w-4 h-4\" />\n                Dashboard\n              </Button>\n            </Link>\n          </div>\n\n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={user.profileImageUrl} alt={user.firstName} />\n                  <AvatarFallback>\n                    {user.firstName?.[0]}{user.lastName?.[0]}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n              <div className=\"flex items-center justify-start gap-2 p-2\">\n                <div className=\"flex flex-col space-y-1 leading-none\">\n                  <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                  <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={() => setLocation(\"/profile\")}>\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Profile</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setLocation(\"/profile\")}>\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Settings</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                onClick={() => logoutMutation.mutate()}\n                disabled={logoutMutation.isPending}\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>{logoutMutation.isPending ? \"Logging out...\" : \"Log out\"}</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":4394},"client/src/components/progress-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Flame, \n  Clock, \n  Trophy, \n  Brain, \n  Book, \n  Mic, \n  Target,\n  TrendingUp,\n  Calendar\n} from \"lucide-react\";\nimport type { UserLanguage, Language, User } from \"@shared/schema\";\n\ninterface UserStats {\n  totalTimeMinutes: number;\n  totalLessons: number;\n  totalWords: number;\n  currentStreak: number;\n}\n\ninterface DashboardData {\n  user: User;\n  currentLanguage: UserLanguage & { language: Language };\n  userLanguages: (UserLanguage & { language: Language })[];\n  stats: UserStats;\n  recentLessons: Array<{\n    id: string;\n    title: string;\n    description: string;\n    progress: number;\n    type: string;\n  }>;\n  achievements: Array<{\n    id: string;\n    name: string;\n    description: string;\n    iconName: string;\n    earnedAt: Date;\n  }>;\n}\n\nexport default function ProgressDashboard() {\n  const [selectedLanguageId, setSelectedLanguageId] = useState<string | null>(null);\n  \n  // Mock current user ID - in real app would come from auth context\n  const currentUserId = \"mock-user-id\";\n\n  // Mock dashboard data for demonstration\n  const mockDashboardData: DashboardData = {\n    user: {\n      id: currentUserId,\n      username: \"sarah_learner\",\n      email: \"sarah@example.com\",\n      firstName: \"Sarah\",\n      lastName: \"Johnson\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b5bc?w=100&h=100&fit=crop&crop=face\",\n      currentStreak: 7,\n      totalPoints: 2450,\n      dailyGoalMinutes: 20,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n    currentLanguage: {\n      id: \"ul1\",\n      userId: currentUserId,\n      languageId: \"spanish\",\n      level: \"B1\",\n      progressPercentage: 68,\n      totalLessonsCompleted: 24,\n      totalWordsLearned: 347,\n      totalTimeSpentMinutes: 45 * 60, // 45 hours\n      isCurrent: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      language: {\n        id: \"spanish\",\n        code: \"es\",\n        name: \"Spanish\",\n        nativeName: \"Español\",\n        flagEmoji: \"🇪🇸\",\n        isActive: true,\n        createdAt: new Date(),\n      }\n    },\n    userLanguages: [\n      {\n        id: \"ul1\",\n        userId: currentUserId,\n        languageId: \"spanish\",\n        level: \"B1\",\n        progressPercentage: 68,\n        totalLessonsCompleted: 24,\n        totalWordsLearned: 347,\n        totalTimeSpentMinutes: 2700,\n        isCurrent: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        language: {\n          id: \"spanish\",\n          code: \"es\", \n          name: \"Spanish\",\n          nativeName: \"Español\",\n          flagEmoji: \"🇪🇸\",\n          isActive: true,\n          createdAt: new Date(),\n        }\n      },\n      {\n        id: \"ul2\",\n        userId: currentUserId,\n        languageId: \"french\",\n        level: \"A2\",\n        progressPercentage: 25,\n        totalLessonsCompleted: 8,\n        totalWordsLearned: 120,\n        totalTimeSpentMinutes: 900,\n        isCurrent: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        language: {\n          id: \"french\",\n          code: \"fr\",\n          name: \"French\", \n          nativeName: \"Français\",\n          flagEmoji: \"🇫🇷\",\n          isActive: true,\n          createdAt: new Date(),\n        }\n      }\n    ],\n    stats: {\n      totalTimeMinutes: 2700, // 45 hours\n      totalLessons: 24,\n      totalWords: 347,\n      currentStreak: 7,\n    },\n    recentLessons: [\n      {\n        id: \"1\",\n        title: \"Restaurant Conversations\",\n        description: \"Learn dining vocabulary and phrases\",\n        progress: 75,\n        type: \"vocabulary\"\n      },\n      {\n        id: \"2\",\n        title: \"Pronunciation Practice\",\n        description: \"Master difficult sounds and accents\", \n        progress: 0,\n        type: \"pronunciation\"\n      }\n    ],\n    achievements: [\n      {\n        id: \"1\",\n        name: \"Week Warrior\",\n        description: \"7 day learning streak\",\n        iconName: \"medal\",\n        earnedAt: new Date()\n      },\n      {\n        id: \"2\",\n        name: \"Vocabulary Master\",\n        description: \"100 new words learned\",\n        iconName: \"star\",\n        earnedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)\n      },\n      {\n        id: \"3\",\n        name: \"Perfect Pronunciation\", \n        description: \"95% accuracy in speaking\",\n        iconName: \"volume-up\",\n        earnedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)\n      }\n    ]\n  };\n\n  // Fetch user dashboard data\n  const { data: dashboardData = mockDashboardData, isLoading } = useQuery<DashboardData>({\n    queryKey: [\"/api/users\", currentUserId, \"dashboard\"],\n    enabled: false, // Disabled for demo\n  });\n\n  const dailyGoalProgress = Math.min((15 / (dashboardData.user.dailyGoalMinutes || 30)) * 100, 100); // 15 minutes completed today\n\n  const handleLanguageSwitch = async (languageId: string) => {\n    try {\n      // In real app, would call API to switch current language\n      console.log(\"Switching to language:\", languageId);\n      setSelectedLanguageId(languageId);\n    } catch (error) {\n      console.error(\"Failed to switch language:\", error);\n    }\n  };\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${mins}m`;\n    }\n    return `${mins}m`;\n  };\n\n  const getIconForAchievement = (iconName: string) => {\n    switch (iconName) {\n      case \"medal\": return <Trophy className=\"w-5 h-5 text-amber-500\" />;\n      case \"star\": return <Brain className=\"w-5 h-5 text-emerald-500\" />;\n      case \"volume-up\": return <Mic className=\"w-5 h-5 text-blue-500\" />;\n      default: return <Trophy className=\"w-5 h-5 text-slate-500\" />;\n    }\n  };\n\n  const getIconForLessonType = (type: string) => {\n    switch (type) {\n      case \"vocabulary\": return <Book className=\"w-6 h-6 text-emerald-500\" />;\n      case \"pronunciation\": return <Mic className=\"w-6 h-6 text-blue-500\" />;\n      case \"grammar\": return <Brain className=\"w-6 h-6 text-purple-500\" />;\n      default: return <Book className=\"w-6 h-6 text-slate-500\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-16 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Your Learning Dashboard</h1>\n          <p className=\"text-lg text-slate-600\">Track your progress and stay motivated with personalized insights</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Progress Section */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Current Language Progress */}\n            <Card className=\"bg-gradient-to-r from-emerald-50 to-blue-50\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"text-2xl\">{dashboardData.currentLanguage.language.flagEmoji}</div>\n                    <div>\n                      <h3 className=\"text-xl font-semibold text-slate-800\">\n                        {dashboardData.currentLanguage.language.name}\n                      </h3>\n                      <p className=\"text-sm text-slate-600\">\n                        {dashboardData.currentLanguage.level} Level\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-emerald-600\">\n                      {dashboardData.currentLanguage.progressPercentage}%\n                    </div>\n                    <div className=\"text-sm text-slate-600\">Complete</div>\n                  </div>\n                </div>\n                \n                <div className=\"w-full bg-white rounded-full h-3 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-emerald-500 to-blue-500 h-3 rounded-full transition-all duration-300\"\n                    style={{ width: `${dashboardData.currentLanguage.progressPercentage}%` }}\n                  ></div>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-slate-600\">Current Focus:</span>\n                  <span className=\"font-medium text-slate-800\">Intermediate Conversations</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Learning Statistics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"w-10 h-10 bg-amber-100 rounded-lg mx-auto mb-2 flex items-center justify-center\">\n                    <Flame className=\"w-5 h-5 text-amber-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-slate-800\">{dashboardData.stats.currentStreak}</div>\n                  <div className=\"text-xs text-slate-600\">Day Streak</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg mx-auto mb-2 flex items-center justify-center\">\n                    <Clock className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-slate-800\">\n                    {Math.floor(dashboardData.stats.totalTimeMinutes / 60)}\n                  </div>\n                  <div className=\"text-xs text-slate-600\">Hours Learned</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"w-10 h-10 bg-purple-100 rounded-lg mx-auto mb-2 flex items-center justify-center\">\n                    <Trophy className=\"w-5 h-5 text-purple-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-slate-800\">{dashboardData.achievements.length}</div>\n                  <div className=\"text-xs text-slate-600\">Achievements</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className=\"w-10 h-10 bg-emerald-100 rounded-lg mx-auto mb-2 flex items-center justify-center\">\n                    <Brain className=\"w-5 h-5 text-emerald-600\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-slate-800\">{dashboardData.stats.totalWords}</div>\n                  <div className=\"text-xs text-slate-600\">Words Learned</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Lessons */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Continue Learning</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {dashboardData.recentLessons.map((lesson) => (\n                    <div \n                      key={lesson.id}\n                      className=\"flex items-center space-x-4 p-3 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors cursor-pointer\"\n                    >\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                        {getIconForLessonType(lesson.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-slate-800\">{lesson.title}</h4>\n                        <p className=\"text-sm text-slate-600\">{lesson.description}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium text-emerald-600\">\n                          {lesson.progress > 0 ? `${lesson.progress}% Complete` : \"New\"}\n                        </div>\n                        <div className=\"w-16 bg-slate-200 rounded-full h-1 mt-1\">\n                          <div \n                            className=\"bg-emerald-500 h-1 rounded-full transition-all\"\n                            style={{ width: `${lesson.progress}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Daily Goal */}\n            <Card className=\"bg-gradient-to-br from-amber-50 to-orange-50\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-4 flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5\" />\n                  <span>Daily Goal</span>\n                </h3>\n                <div className=\"text-center\">\n                  <div className=\"relative w-24 h-24 mx-auto mb-4\">\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <span className=\"text-2xl font-bold text-slate-800\">75%</span>\n                    </div>\n                    <Progress value={dailyGoalProgress} className=\"w-24 h-24 rotate-90\" />\n                  </div>\n                  <p className=\"text-sm text-slate-600 mb-2\">15 minutes completed</p>\n                  <p className=\"text-xs text-slate-500\">5 minutes remaining</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Achievements */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Trophy className=\"w-5 h-5\" />\n                  <span>Recent Achievements</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {dashboardData.achievements.slice(0, 3).map((achievement) => (\n                    <div key={achievement.id} className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-amber-100 rounded-lg flex items-center justify-center\">\n                        {getIconForAchievement(achievement.iconName)}\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-slate-800\">{achievement.name}</h4>\n                        <p className=\"text-xs text-slate-600\">{achievement.description}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Language Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Your Languages</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {dashboardData.userLanguages.map((userLanguage) => (\n                    <div\n                      key={userLanguage.id}\n                      className={`flex items-center justify-between p-2 rounded-lg cursor-pointer transition-colors ${\n                        userLanguage.isCurrent ? \"bg-emerald-50 border border-emerald-200\" : \"hover:bg-slate-50\"\n                      }`}\n                      onClick={() => handleLanguageSwitch(userLanguage.languageId)}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-lg\">{userLanguage.language.flagEmoji}</span>\n                        <div>\n                          <span className=\"text-sm font-medium text-slate-700\">\n                            {userLanguage.language.name}\n                          </span>\n                          <div className=\"text-xs text-slate-500\">{userLanguage.level} • {userLanguage.progressPercentage}%</div>\n                        </div>\n                      </div>\n                      {userLanguage.isCurrent && (\n                        <Badge className=\"bg-emerald-500 text-white\">Current</Badge>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17037},"client/src/components/pronunciation-practice.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Play, Mic, MicOff, Volume2 } from \"lucide-react\";\nimport { startSpeechRecognition, stopSpeechRecognition } from \"@/lib/speech-recognition\";\nimport { playTextToSpeech } from \"@/lib/audio-utils\";\n\ninterface PronunciationWord {\n  id: string;\n  word: string;\n  translation: string;\n  pronunciation: string;\n  difficulty: string;\n}\n\nexport default function PronunciationPractice() {\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [userSpeech, setUserSpeech] = useState<string>(\"\");\n  const [accuracy, setAccuracy] = useState<number | null>(null);\n  const [isListening, setIsListening] = useState(false);\n\n  // Mock pronunciation words - in real app would fetch from API\n  const practiceWords: PronunciationWord[] = [\n    {\n      id: \"1\",\n      word: \"¿Cómo está usted?\",\n      translation: \"How are you? (formal)\",\n      pronunciation: \"/ˈko.mo esˈta usˈteð/\",\n      difficulty: \"intermediate\"\n    },\n    {\n      id: \"2\", \n      word: \"Buenos días\",\n      translation: \"Good morning\",\n      pronunciation: \"/ˈbwe.nos ˈdi.as/\",\n      difficulty: \"beginner\"\n    },\n    {\n      id: \"3\",\n      word: \"Me llamo María\",\n      translation: \"My name is María\",\n      pronunciation: \"/me ˈʎa.mo maˈɾi.a/\",\n      difficulty: \"beginner\"\n    }\n  ];\n\n  const currentWord = practiceWords[currentWordIndex];\n  const progress = ((currentWordIndex + 1) / practiceWords.length) * 100;\n\n  const handlePlayAudio = async () => {\n    try {\n      await playTextToSpeech(currentWord.word, 'es-ES');\n    } catch (error) {\n      console.error('Error playing audio:', error);\n    }\n  };\n\n  const handleStartRecording = async () => {\n    try {\n      setIsRecording(true);\n      setIsListening(true);\n      setUserSpeech(\"\");\n      setAccuracy(null);\n\n      const result = await startSpeechRecognition('es-ES');\n      setUserSpeech(result);\n      \n      // Calculate accuracy (simplified comparison)\n      const similarity = calculateSimilarity(result.toLowerCase(), currentWord.word.toLowerCase());\n      setAccuracy(Math.round(similarity * 100));\n      \n    } catch (error) {\n      console.error('Speech recognition error:', error);\n      setUserSpeech(\"Error: Could not recognize speech\");\n      setAccuracy(0);\n    } finally {\n      setIsRecording(false);\n      setIsListening(false);\n    }\n  };\n\n  const handleStopRecording = () => {\n    stopSpeechRecognition();\n    setIsRecording(false);\n    setIsListening(false);\n  };\n\n  const calculateSimilarity = (str1: string, str2: string): number => {\n    // Simple similarity calculation - in real app would use more sophisticated algorithm\n    const words1 = str1.split(' ');\n    const words2 = str2.split(' ');\n    let matches = 0;\n    \n    words1.forEach(word => {\n      if (words2.some(w => w.includes(word) || word.includes(w))) {\n        matches++;\n      }\n    });\n    \n    return matches / Math.max(words1.length, words2.length);\n  };\n\n  const handleNext = () => {\n    if (currentWordIndex < practiceWords.length - 1) {\n      setCurrentWordIndex(currentWordIndex + 1);\n    } else {\n      setCurrentWordIndex(0);\n    }\n    setUserSpeech(\"\");\n    setAccuracy(null);\n  };\n\n  const getAccuracyColor = (accuracy: number) => {\n    if (accuracy >= 90) return \"text-emerald-600\";\n    if (accuracy >= 70) return \"text-amber-600\";\n    return \"text-red-600\";\n  };\n\n  const getAccuracyBgColor = (accuracy: number) => {\n    if (accuracy >= 90) return \"bg-emerald-100\";\n    if (accuracy >= 70) return \"bg-amber-100\";\n    return \"bg-red-100\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Pronunciation Practice</h3>\n        <p className=\"text-sm text-slate-600\">Listen and repeat to improve your accent</p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between text-sm text-slate-600\">\n          <span>Word {currentWordIndex + 1} of {practiceWords.length}</span>\n          <span className=\"capitalize\">{currentWord.difficulty} level</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      {/* Current Word Display */}\n      <Card className=\"bg-gradient-to-br from-blue-50 to-purple-50\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"mb-4\">\n            <div className=\"text-2xl font-bold text-slate-800 mb-2\">\n              {currentWord.word}\n            </div>\n            <div className=\"text-lg text-slate-600 mb-2\">{currentWord.translation}</div>\n            <div className=\"text-sm text-slate-500 font-mono\">{currentWord.pronunciation}</div>\n          </div>\n          \n          <Button\n            onClick={handlePlayAudio}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white\"\n            size=\"lg\"\n          >\n            <Volume2 className=\"w-5 h-5 mr-2\" />\n            Listen to Native Speaker\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Recording Section */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"relative\">\n          <Button\n            onClick={isRecording ? handleStopRecording : handleStartRecording}\n            disabled={isListening && !isRecording}\n            className={`w-20 h-20 rounded-full shadow-lg transition-all duration-200 ${\n              isRecording \n                ? \"bg-red-500 hover:bg-red-600 animate-pulse\" \n                : \"bg-emerald-500 hover:bg-emerald-600\"\n            }`}\n            size=\"lg\"\n          >\n            {isRecording ? (\n              <MicOff className=\"w-8 h-8 text-white\" />\n            ) : (\n              <Mic className=\"w-8 h-8 text-white\" />\n            )}\n          </Button>\n          \n          {isListening && (\n            <div className=\"absolute inset-0 rounded-full border-4 border-red-400 animate-ping\"></div>\n          )}\n        </div>\n        \n        <p className=\"text-sm text-slate-600\">\n          {isRecording ? \"Listening... Click to stop\" : \"Click and hold to record your pronunciation\"}\n        </p>\n      </div>\n\n      {/* Results */}\n      {userSpeech && (\n        <Card className=\"mt-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-slate-800 mb-2\">What you said:</h4>\n                <p className=\"text-slate-600 italic\">\"{userSpeech}\"</p>\n              </div>\n              \n              {accuracy !== null && (\n                <div className={`rounded-lg p-4 ${getAccuracyBgColor(accuracy)}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"font-medium text-slate-800\">Accuracy Score</span>\n                    <span className={`text-2xl font-bold ${getAccuracyColor(accuracy)}`}>\n                      {accuracy}%\n                    </span>\n                  </div>\n                  \n                  <div className=\"mt-2\">\n                    {accuracy >= 90 && (\n                      <p className=\"text-sm text-emerald-700\">Excellent pronunciation! 🎉</p>\n                    )}\n                    {accuracy >= 70 && accuracy < 90 && (\n                      <p className=\"text-sm text-amber-700\">Good job! Keep practicing to improve further.</p>\n                    )}\n                    {accuracy < 70 && (\n                      <p className=\"text-sm text-red-700\">Keep practicing! Try listening to the native speaker again.</p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Navigation */}\n      <div className=\"flex justify-center\">\n        <Button onClick={handleNext} className=\"bg-blue-500 hover:bg-blue-600\">\n          Next Word\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8120},"client/src/components/sentence-builder.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, XCircle, RotateCcw } from \"lucide-react\";\n\ninterface SentenceExercise {\n  id: string;\n  targetSentence: string;\n  targetTranslation: string;\n  words: string[];\n  difficulty: string;\n}\n\ninterface DroppedWord {\n  word: string;\n  index: number;\n}\n\nexport default function SentenceBuilder() {\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [droppedWords, setDroppedWords] = useState<DroppedWord[]>([]);\n  const [availableWords, setAvailableWords] = useState<string[]>([]);\n  const [showResult, setShowResult] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [draggedWord, setDraggedWord] = useState<string | null>(null);\n  \n  const dropZoneRef = useRef<HTMLDivElement>(null);\n\n  // Mock sentence exercises - in real app would fetch from API\n  const exercises: SentenceExercise[] = [\n    {\n      id: \"1\",\n      targetSentence: \"Los estudiantes estudian en la biblioteca\",\n      targetTranslation: \"The students study in the library\",\n      words: [\"Los\", \"estudiantes\", \"estudian\", \"en\", \"la\", \"biblioteca\"],\n      difficulty: \"beginner\"\n    },\n    {\n      id: \"2\",\n      targetSentence: \"Mi familia come en el restaurante\",\n      targetTranslation: \"My family eats at the restaurant\", \n      words: [\"Mi\", \"familia\", \"come\", \"en\", \"el\", \"restaurante\"],\n      difficulty: \"beginner\"\n    },\n    {\n      id: \"3\",\n      targetSentence: \"El profesor enseña español muy bien\",\n      targetTranslation: \"The teacher teaches Spanish very well\",\n      words: [\"El\", \"profesor\", \"enseña\", \"español\", \"muy\", \"bien\"],\n      difficulty: \"intermediate\"\n    }\n  ];\n\n  const currentExercise = exercises[currentExerciseIndex];\n\n  // Initialize available words when exercise changes\n  useState(() => {\n    setAvailableWords([...currentExercise.words].sort(() => Math.random() - 0.5));\n    setDroppedWords([]);\n    setShowResult(false);\n  });\n\n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, word: string) => {\n    setDraggedWord(word);\n    e.dataTransfer.setData(\"text/plain\", word);\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const word = e.dataTransfer.getData(\"text/plain\");\n    \n    if (word && availableWords.includes(word)) {\n      // Add word to dropped words\n      setDroppedWords(prev => [...prev, { word, index: prev.length }]);\n      // Remove word from available words\n      setAvailableWords(prev => prev.filter(w => w !== word));\n    }\n    setDraggedWord(null);\n  };\n\n  const handleWordClick = (word: string) => {\n    // Alternative to drag and drop - click to add word\n    if (availableWords.includes(word)) {\n      setDroppedWords(prev => [...prev, { word, index: prev.length }]);\n      setAvailableWords(prev => prev.filter(w => w !== word));\n    }\n  };\n\n  const handleRemoveWord = (index: number) => {\n    const wordToRemove = droppedWords[index];\n    if (wordToRemove) {\n      // Remove from dropped words\n      setDroppedWords(prev => prev.filter((_, i) => i !== index));\n      // Add back to available words\n      setAvailableWords(prev => [...prev, wordToRemove.word]);\n    }\n  };\n\n  const handleReset = () => {\n    setAvailableWords([...currentExercise.words].sort(() => Math.random() - 0.5));\n    setDroppedWords([]);\n    setShowResult(false);\n    setIsCorrect(false);\n  };\n\n  const handleCheckSentence = () => {\n    const userSentence = droppedWords.map(w => w.word).join(\" \");\n    const correct = userSentence === currentExercise.targetSentence;\n    setIsCorrect(correct);\n    setShowResult(true);\n  };\n\n  const handleNext = () => {\n    if (currentExerciseIndex < exercises.length - 1) {\n      setCurrentExerciseIndex(currentExerciseIndex + 1);\n    } else {\n      setCurrentExerciseIndex(0);\n    }\n    \n    // Reset for next exercise\n    const nextExercise = exercises[currentExerciseIndex < exercises.length - 1 ? currentExerciseIndex + 1 : 0];\n    setAvailableWords([...nextExercise.words].sort(() => Math.random() - 0.5));\n    setDroppedWords([]);\n    setShowResult(false);\n    setIsCorrect(false);\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"beginner\": return \"bg-blue-100 text-blue-600\";\n      case \"intermediate\": return \"bg-amber-100 text-amber-600\"; \n      case \"advanced\": return \"bg-emerald-100 text-emerald-600\";\n      default: return \"bg-slate-100 text-slate-600\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-xl font-semibold text-slate-800\">Sentence Builder</h3>\n          <Badge className={getDifficultyColor(currentExercise.difficulty)}>\n            {currentExercise.difficulty}\n          </Badge>\n        </div>\n        <p className=\"text-sm text-slate-600\">Arrange the words to form the correct sentence</p>\n      </div>\n\n      {/* Target Sentence */}\n      <Card className=\"bg-slate-50\">\n        <CardContent className=\"p-4\">\n          <p className=\"text-sm text-slate-600 mb-2\">Build this sentence:</p>\n          <p className=\"text-lg font-medium text-slate-800\">{currentExercise.targetTranslation}</p>\n        </CardContent>\n      </Card>\n\n      {/* Drop Zone */}\n      <Card className=\"min-h-[80px] border-2 border-dashed border-slate-300 hover:border-slate-400 transition-colors\">\n        <CardContent\n          ref={dropZoneRef}\n          className=\"p-4 min-h-[60px] flex items-center flex-wrap gap-2\"\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n        >\n          {droppedWords.length === 0 ? (\n            <span className=\"text-slate-400\">Drag words here or click them below...</span>\n          ) : (\n            droppedWords.map((droppedWord, index) => (\n              <div\n                key={`${droppedWord.word}-${index}`}\n                onClick={() => handleRemoveWord(index)}\n                className=\"bg-emerald-500 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-emerald-600 transition-colors select-none\"\n              >\n                {droppedWord.word}\n              </div>\n            ))\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Word Bank */}\n      <div>\n        <p className=\"text-sm font-medium text-slate-700 mb-3\">Available Words:</p>\n        <div className=\"flex flex-wrap gap-2\">\n          {availableWords.map((word, index) => (\n            <div\n              key={`${word}-${index}`}\n              draggable\n              onDragStart={(e) => handleDragStart(e, word)}\n              onClick={() => handleWordClick(word)}\n              className={`bg-blue-500 text-white px-4 py-2 rounded-lg cursor-move select-none hover:bg-blue-600 transition-colors ${\n                draggedWord === word ? \"opacity-50\" : \"\"\n              }`}\n            >\n              {word}\n            </div>\n          ))}\n        </div>\n        \n        {availableWords.length === 0 && !showResult && (\n          <p className=\"text-sm text-slate-500 italic\">All words used. Check your sentence!</p>\n        )}\n      </div>\n\n      {/* Result */}\n      {showResult && (\n        <Card className={`${isCorrect ? \"border-emerald-500 bg-emerald-50\" : \"border-red-500 bg-red-50\"}`}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              {isCorrect ? (\n                <CheckCircle className=\"w-5 h-5 text-emerald-500\" />\n              ) : (\n                <XCircle className=\"w-5 h-5 text-red-500\" />\n              )}\n              <span className={`font-medium ${isCorrect ? \"text-emerald-700\" : \"text-red-700\"}`}>\n                {isCorrect ? \"Perfect! Well done!\" : \"Not quite right. Try again!\"}\n              </span>\n            </div>\n            \n            {!isCorrect && (\n              <div className=\"text-sm text-slate-600\">\n                <p className=\"mb-1\">Your sentence: <span className=\"italic\">{droppedWords.map(w => w.word).join(\" \")}</span></p>\n                <p>Correct sentence: <span className=\"italic font-medium\">{currentExercise.targetSentence}</span></p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={handleReset}\n          className=\"flex items-center space-x-2\"\n        >\n          <RotateCcw className=\"w-4 h-4\" />\n          <span>Reset</span>\n        </Button>\n\n        <div className=\"flex space-x-2\">\n          {!showResult ? (\n            <Button\n              onClick={handleCheckSentence}\n              disabled={droppedWords.length === 0}\n              className=\"bg-amber-500 hover:bg-amber-600\"\n            >\n              Check Sentence\n            </Button>\n          ) : (\n            <Button onClick={handleNext} className=\"bg-emerald-500 hover:bg-emerald-600\">\n              Next Exercise\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9278},"client/src/contexts/auth-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  currentStreak: number;\n  totalPoints: number;\n  dailyGoalMinutes: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isLoading: true,\n  isAuthenticated: false,\n  logout: () => {},\n});\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n\n  const { data, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      try {\n        return await apiRequest(\"/api/auth/me\");\n      } catch (error: any) {\n        if (error.message?.includes(\"401\")) {\n          return null;\n        }\n        throw error;\n      }\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/auth/logout\", { method: \"POST\" }),\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const user = data?.user || null;\n  const isAuthenticated = !!user;\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  const value = {\n    user,\n    isLoading,\n    isAuthenticated,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":1983},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/audio-utils.ts":{"content":"// Audio utility functions for language learning\n\ninterface AudioPlaybackOptions {\n  rate?: number;\n  pitch?: number;\n  volume?: number;\n}\n\n// Text-to-speech functionality\nexport const playTextToSpeech = (\n  text: string,\n  language: string = 'en-US',\n  options: AudioPlaybackOptions = {}\n): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!('speechSynthesis' in window)) {\n      reject(new Error('Text-to-speech is not supported in this browser'));\n      return;\n    }\n\n    // Cancel any ongoing speech\n    speechSynthesis.cancel();\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    // Configure utterance\n    utterance.lang = language;\n    utterance.rate = options.rate || 0.8; // Slightly slower for learning\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 1;\n\n    // Handle events\n    utterance.onend = () => resolve();\n    utterance.onerror = (event) => {\n      reject(new Error(`Speech synthesis error: ${event.error}`));\n    };\n\n    // Start speaking\n    speechSynthesis.speak(utterance);\n  });\n};\n\n// Get available voices for a specific language\nexport const getVoicesForLanguage = (language: string): SpeechSynthesisVoice[] => {\n  if (!('speechSynthesis' in window)) {\n    return [];\n  }\n\n  const voices = speechSynthesis.getVoices();\n  return voices.filter(voice => voice.lang.startsWith(language.split('-')[0]));\n};\n\n// Get native voices (preferred for pronunciation)\nexport const getNativeVoicesForLanguage = (language: string): SpeechSynthesisVoice[] => {\n  const voices = getVoicesForLanguage(language);\n  return voices.filter(voice => voice.localService);\n};\n\n// Play audio with enhanced pronunciation\nexport const playPronunciation = (\n  text: string,\n  language: string = 'en-US',\n  options: AudioPlaybackOptions & { preferNative?: boolean } = {}\n): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!('speechSynthesis' in window)) {\n      reject(new Error('Text-to-speech is not supported in this browser'));\n      return;\n    }\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    // Try to use native voice if preferred\n    if (options.preferNative) {\n      const nativeVoices = getNativeVoicesForLanguage(language);\n      if (nativeVoices.length > 0) {\n        utterance.voice = nativeVoices[0];\n      }\n    }\n\n    utterance.lang = language;\n    utterance.rate = options.rate || 0.7; // Slower for pronunciation practice\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 1;\n\n    utterance.onend = () => resolve();\n    utterance.onerror = (event) => {\n      reject(new Error(`Pronunciation playback error: ${event.error}`));\n    };\n\n    speechSynthesis.speak(utterance);\n  });\n};\n\n// Play audio from URL\nexport const playAudioUrl = (url: string): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const audio = new Audio(url);\n    \n    audio.onended = () => resolve();\n    audio.onerror = () => reject(new Error('Failed to load audio'));\n    audio.oncanplaythrough = () => {\n      audio.play().catch(reject);\n    };\n    \n    audio.load();\n  });\n};\n\n// Record audio from microphone\nexport const recordAudio = (durationMs: number = 5000): Promise<Blob> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      const chunks: Blob[] = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(chunks, { type: 'audio/wav' });\n        stream.getTracks().forEach(track => track.stop());\n        resolve(audioBlob);\n      };\n\n      mediaRecorder.onerror = (event) => {\n        stream.getTracks().forEach(track => track.stop());\n        reject(new Error('Recording failed'));\n      };\n\n      mediaRecorder.start();\n      \n      // Stop recording after specified duration\n      setTimeout(() => {\n        if (mediaRecorder.state === 'recording') {\n          mediaRecorder.stop();\n        }\n      }, durationMs);\n\n    } catch (error) {\n      reject(new Error('Failed to access microphone'));\n    }\n  });\n};\n\n// Analyze audio for pronunciation feedback (simplified)\nexport const analyzePronounciation = (\n  recordedBlob: Blob,\n  targetText: string,\n  language: string\n): Promise<{ accuracy: number; feedback: string }> => {\n  return new Promise((resolve) => {\n    // This is a simplified implementation\n    // In a real app, you would send the audio to a speech analysis service\n    \n    // Simulate pronunciation analysis\n    setTimeout(() => {\n      const accuracy = Math.floor(Math.random() * 30) + 70; // 70-100%\n      let feedback = '';\n      \n      if (accuracy >= 90) {\n        feedback = 'Excellent pronunciation! 🎉';\n      } else if (accuracy >= 80) {\n        feedback = 'Good job! Minor improvements needed.';\n      } else if (accuracy >= 70) {\n        feedback = 'Keep practicing! Focus on vowel sounds.';\n      } else {\n        feedback = 'Try again. Listen to the native speaker carefully.';\n      }\n      \n      resolve({ accuracy, feedback });\n    }, 1000);\n  });\n};\n\n// Language code mapping for audio\nexport const getAudioLanguageCode = (language: string): string => {\n  const languageMap: { [key: string]: string } = {\n    spanish: 'es-ES',\n    french: 'fr-FR',\n    german: 'de-DE',\n    italian: 'it-IT',\n    portuguese: 'pt-PT',\n    english: 'en-US',\n    chinese: 'zh-CN',\n    japanese: 'ja-JP',\n    korean: 'ko-KR',\n    russian: 'ru-RU',\n    arabic: 'ar-SA',\n    hindi: 'hi-IN',\n  };\n\n  return languageMap[language.toLowerCase()] || language;\n};\n\n// Check if audio features are supported\nexport const isAudioSupported = (): {\n  textToSpeech: boolean;\n  microphone: boolean;\n  audioPlayback: boolean;\n} => {\n  return {\n    textToSpeech: 'speechSynthesis' in window,\n    microphone: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\n    audioPlayback: 'Audio' in window,\n  };\n};\n\n// Preload voices (helps with initial TTS performance)\nexport const preloadVoices = (): Promise<SpeechSynthesisVoice[]> => {\n  return new Promise((resolve) => {\n    if (!('speechSynthesis' in window)) {\n      resolve([]);\n      return;\n    }\n\n    const loadVoices = () => {\n      const voices = speechSynthesis.getVoices();\n      if (voices.length > 0) {\n        resolve(voices);\n      } else {\n        // Some browsers load voices asynchronously\n        setTimeout(loadVoices, 100);\n      }\n    };\n\n    // Listen for voice changes (some browsers fire this event)\n    speechSynthesis.onvoiceschanged = loadVoices;\n    \n    // Start loading\n    loadVoices();\n  });\n};\n","size_bytes":6771},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: string;\n    headers?: Record<string, string>;\n  }\n): Promise<any> {\n  const { method = \"GET\", body, headers = {} } = options || {};\n  \n  const res = await fetch(url, {\n    method,\n    headers: {\n      ...(body ? { \"Content-Type\": \"application/json\" } : {}),\n      ...headers,\n    },\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  \n  const contentType = res.headers.get(\"content-type\");\n  if (contentType && contentType.includes(\"application/json\")) {\n    return await res.json();\n  }\n  \n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1649},"client/src/lib/speech-recognition.ts":{"content":"interface SpeechRecognitionResult {\n  transcript: string;\n  confidence: number;\n}\n\nlet recognition: any = null;\nlet isListening = false;\n\nexport const isSpeechRecognitionSupported = (): boolean => {\n  return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\n};\n\nexport const startSpeechRecognition = (language: string = 'en-US'): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    if (!isSpeechRecognitionSupported()) {\n      reject(new Error('Speech recognition is not supported in this browser'));\n      return;\n    }\n\n    // Create recognition instance\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    recognition = new SpeechRecognition();\n\n    // Configure recognition\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = language;\n    recognition.maxAlternatives = 1;\n\n    // Handle results\n    recognition.onresult = (event: any) => {\n      if (event.results.length > 0) {\n        const result = event.results[0][0];\n        isListening = false;\n        resolve(result.transcript);\n      } else {\n        reject(new Error('No speech detected'));\n      }\n    };\n\n    // Handle errors\n    recognition.onerror = (event: any) => {\n      isListening = false;\n      let errorMessage = 'Speech recognition error';\n      \n      switch (event.error) {\n        case 'no-speech':\n          errorMessage = 'No speech was detected. Please try again.';\n          break;\n        case 'audio-capture':\n          errorMessage = 'Audio capture failed. Please check your microphone.';\n          break;\n        case 'not-allowed':\n          errorMessage = 'Microphone access denied. Please allow microphone access.';\n          break;\n        case 'network':\n          errorMessage = 'Network error occurred during speech recognition.';\n          break;\n        case 'service-not-allowed':\n          errorMessage = 'Speech recognition service is not allowed.';\n          break;\n        case 'bad-grammar':\n          errorMessage = 'Grammar error in speech recognition.';\n          break;\n        case 'language-not-supported':\n          errorMessage = 'Language not supported for speech recognition.';\n          break;\n        default:\n          errorMessage = `Speech recognition error: ${event.error}`;\n      }\n      \n      reject(new Error(errorMessage));\n    };\n\n    // Handle end event\n    recognition.onend = () => {\n      isListening = false;\n    };\n\n    // Start recognition\n    try {\n      recognition.start();\n      isListening = true;\n    } catch (error) {\n      reject(new Error('Failed to start speech recognition'));\n    }\n  });\n};\n\nexport const stopSpeechRecognition = (): void => {\n  if (recognition && isListening) {\n    recognition.stop();\n    isListening = false;\n  }\n};\n\nexport const getSpeechRecognitionStatus = (): boolean => {\n  return isListening;\n};\n\n// Language code mapping for better accuracy\nexport const getLanguageCode = (language: string): string => {\n  const languageMap: { [key: string]: string } = {\n    spanish: 'es-ES',\n    french: 'fr-FR',\n    german: 'de-DE',\n    italian: 'it-IT',\n    portuguese: 'pt-PT',\n    english: 'en-US',\n    chinese: 'zh-CN',\n    japanese: 'ja-JP',\n    korean: 'ko-KR',\n    russian: 'ru-RU',\n    arabic: 'ar-SA',\n    hindi: 'hi-IN',\n  };\n\n  return languageMap[language.toLowerCase()] || language;\n};\n\n// Advanced speech recognition with confidence scoring\nexport const startAdvancedSpeechRecognition = (\n  language: string = 'en-US',\n  options: {\n    continuous?: boolean;\n    interimResults?: boolean;\n    maxAlternatives?: number;\n  } = {}\n): Promise<SpeechRecognitionResult[]> => {\n  return new Promise((resolve, reject) => {\n    if (!isSpeechRecognitionSupported()) {\n      reject(new Error('Speech recognition is not supported in this browser'));\n      return;\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    recognition = new SpeechRecognition();\n\n    // Configure with advanced options\n    recognition.continuous = options.continuous || false;\n    recognition.interimResults = options.interimResults || false;\n    recognition.lang = getLanguageCode(language);\n    recognition.maxAlternatives = options.maxAlternatives || 3;\n\n    const results: SpeechRecognitionResult[] = [];\n\n    recognition.onresult = (event: any) => {\n      for (let i = 0; i < event.results.length; i++) {\n        const result = event.results[i];\n        if (result.isFinal) {\n          for (let j = 0; j < result.length; j++) {\n            results.push({\n              transcript: result[j].transcript,\n              confidence: result[j].confidence || 0,\n            });\n          }\n        }\n      }\n    };\n\n    recognition.onerror = (event: any) => {\n      isListening = false;\n      reject(new Error(`Speech recognition error: ${event.error}`));\n    };\n\n    recognition.onend = () => {\n      isListening = false;\n      resolve(results);\n    };\n\n    try {\n      recognition.start();\n      isListening = true;\n    } catch (error) {\n      reject(new Error('Failed to start speech recognition'));\n    }\n  });\n};\n","size_bytes":5159},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { AuthHeader } from \"@/components/auth-header\";\nimport { Brain, Headphones, Users, Trophy } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <AuthHeader />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-slate-900 dark:to-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n              About Learn a Language\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n              We're revolutionizing language learning by making it accessible, engaging, and effective for everyone.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-6\">\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                Our Mission\n              </h2>\n              <p className=\"text-lg text-gray-600 dark:text-gray-300 leading-relaxed\">\n                We believe that language learning should be fun, interactive, and accessible to everyone. \n                Our platform combines cutting-edge AI technology with proven language learning methodologies \n                to create personalized learning experiences that adapt to your pace and style.\n              </p>\n              <div className=\"grid grid-cols-2 gap-6 mt-8\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">15M+</div>\n                  <div className=\"text-gray-600 dark:text-gray-300\">Active Learners</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\">6</div>\n                  <div className=\"text-gray-600 dark:text-gray-300\">Languages</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\">95%</div>\n                  <div className=\"text-gray-600 dark:text-gray-300\">Success Rate</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400\">24/7</div>\n                  <div className=\"text-gray-600 dark:text-gray-300\">Support</div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"rounded-2xl overflow-hidden shadow-xl\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=600&h=400&fit=crop\" \n                  alt=\"Team collaboration\" \n                  className=\"w-full h-96 object-cover\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Our Story Section */}\n      <section className=\"py-20 bg-white dark:bg-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n              Our Story\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n              Founded in 2020, Learn a Language was born from a simple idea: everyone deserves access to quality language education.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center p-6\">\n              <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Brain className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-3\">Innovation</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                We continuously innovate with AI-powered features and cutting-edge technology to enhance your learning experience.\n              </p>\n            </div>\n            \n            <div className=\"text-center p-6\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-3\">Community</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Our global community of learners and native speakers creates a supportive environment for language practice.\n              </p>\n            </div>\n            \n            <div className=\"text-center p-6\">\n              <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Trophy className=\"w-8 h-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-3\">Excellence</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                We strive for excellence in everything we do, from course content to user experience and customer support.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20 bg-gray-50 dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n              Meet Our Team\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              A diverse group of educators, linguists, and technologists passionate about language learning.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-white dark:bg-slate-900 rounded-lg shadow-lg p-6 text-center\">\n              <img \n                src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face\" \n                alt=\"Sarah Johnson\" \n                className=\"w-24 h-24 rounded-full mx-auto mb-4 object-cover\"\n              />\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Sarah Johnson</h3>\n              <p className=\"text-blue-600 dark:text-blue-400 mb-3\">CEO & Founder</p>\n              <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n                Former polyglot with 15+ years in education technology, passionate about making language learning accessible worldwide.\n              </p>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-900 rounded-lg shadow-lg p-6 text-center\">\n              <img \n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face\" \n                alt=\"Marcus Chen\" \n                className=\"w-24 h-24 rounded-full mx-auto mb-4 object-cover\"\n              />\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Marcus Chen</h3>\n              <p className=\"text-blue-600 dark:text-blue-400 mb-3\">CTO</p>\n              <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n                AI and machine learning expert specializing in natural language processing and speech recognition technologies.\n              </p>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-900 rounded-lg shadow-lg p-6 text-center\">\n              <img \n                src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face\" \n                alt=\"Elena Rodriguez\" \n                className=\"w-24 h-24 rounded-full mx-auto mb-4 object-cover\"\n              />\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Elena Rodriguez</h3>\n              <p className=\"text-blue-600 dark:text-blue-400 mb-3\">Head of Education</p>\n              <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n                Linguistics PhD with expertise in curriculum design and language acquisition methodologies for diverse learners.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":8775},"client/src/pages/community.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport CommunityChat from \"@/components/community-chat\";\nimport LanguageExchange from \"@/components/language-exchange\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Community() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Connect & Practice Together</h1>\n            <p className=\"text-lg text-slate-600\">Join our global community of language learners and native speakers</p>\n          </div>\n\n          <Tabs defaultValue=\"chat\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3 mb-8\">\n              <TabsTrigger value=\"chat\">Community Chat</TabsTrigger>\n              <TabsTrigger value=\"exchange\">Language Exchange</TabsTrigger>\n              <TabsTrigger value=\"groups\">Study Groups</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"chat\">\n              <CommunityChat />\n            </TabsContent>\n\n            <TabsContent value=\"exchange\">\n              <LanguageExchange />\n            </TabsContent>\n\n            <TabsContent value=\"groups\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Study Groups</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-slate-600\">Study groups feature coming soon...</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1838},"client/src/pages/contact.tsx":{"content":"import { AuthHeader } from \"@/components/auth-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Send, MessageSquare, Users } from \"lucide-react\";\n\nexport default function Contact() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <AuthHeader />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-purple-50 to-blue-100 dark:from-slate-900 dark:to-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n              Get in Touch\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n              Have questions? We'd love to hear from you. Send us a message and we'll respond as soon as possible.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form and Info Section */}\n      <section className=\"py-20 bg-white dark:bg-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <div className=\"bg-gray-50 dark:bg-slate-800 rounded-2xl shadow-xl p-8\">\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-6\">Send us a message</h2>\n              <form className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      First Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white\"\n                      placeholder=\"John\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      Last Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white\"\n                      placeholder=\"Doe\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Email\n                  </label>\n                  <input\n                    type=\"email\"\n                    className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white\"\n                    placeholder=\"john@example.com\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Subject\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white\"\n                    placeholder=\"How can we help?\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Message\n                  </label>\n                  <textarea\n                    rows={6}\n                    className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-slate-700 dark:text-white resize-none\"\n                    placeholder=\"Tell us more about your question or how we can help...\"\n                  ></textarea>\n                </div>\n                \n                <Button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors\">\n                  <Send className=\"w-5 h-5 mr-2\" />\n                  Send Message\n                </Button>\n              </form>\n            </div>\n            \n            {/* Contact Info */}\n            <div className=\"space-y-8\">\n              <div className=\"bg-gray-50 dark:bg-slate-800 rounded-2xl shadow-xl p-8\">\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">Contact Information</h3>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Send className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white\">Email</h4>\n                      <p className=\"text-gray-600 dark:text-gray-300\">support@learnalanguage.com</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">We'll respond within 24 hours</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <MessageSquare className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white\">Live Chat</h4>\n                      <p className=\"text-gray-600 dark:text-gray-300\">Available 24/7</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">Get instant help with our chatbot</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Users className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 dark:text-white\">Community</h4>\n                      <p className=\"text-gray-600 dark:text-gray-300\">Join our forum</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">Connect with other learners</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gray-50 dark:bg-slate-800 rounded-2xl shadow-xl p-8\">\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">Frequently Asked Questions</h3>\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white text-lg mb-2\">How much does it cost?</h4>\n                    <p className=\"text-gray-600 dark:text-gray-300\">We offer free and premium plans starting at $9.99/month with advanced features and unlimited practice.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white text-lg mb-2\">Can I switch languages?</h4>\n                    <p className=\"text-gray-600 dark:text-gray-300\">Yes, you can learn multiple languages with one account and switch between them anytime.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white text-lg mb-2\">Is there a mobile app?</h4>\n                    <p className=\"text-gray-600 dark:text-gray-300\">Yes, our mobile apps are available on iOS and Android app stores for learning on the go.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white text-lg mb-2\">Do you offer certificates?</h4>\n                    <p className=\"text-gray-600 dark:text-gray-300\">Yes, we provide completion certificates that you can share on LinkedIn and with employers.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Office Locations */}\n      <section className=\"py-20 bg-gray-50 dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n              Our Global Presence\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              We're here to support learners worldwide with local offices and native-speaking teams.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-white dark:bg-slate-900 rounded-lg shadow-lg p-6 text-center\">\n              <div className=\"text-4xl mb-4\">🇺🇸</div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">New York, USA</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-4\">Headquarters</p>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                123 Learning Street<br />\n                New York, NY 10001<br />\n                +1 (555) 123-4567\n              </p>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-900 rounded-lg shadow-lg p-6 text-center\">\n              <div className=\"text-4xl mb-4\">🇬🇧</div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">London, UK</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-4\">European Office</p>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                456 Education Lane<br />\n                London EC1A 1BB<br />\n                +44 20 7123 4567\n              </p>\n            </div>\n            \n            <div className=\"bg-white dark:bg-slate-900 rounded-lg shadow-lg p-6 text-center\">\n              <div className=\"text-4xl mb-4\">🇯🇵</div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Tokyo, Japan</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-4\">Asia Pacific Office</p>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                789 Language Building<br />\n                Tokyo 100-0001<br />\n                +81 3-1234-5678\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11263},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BookOpen, \n  Brain, \n  Play, \n  Target, \n  Sparkles,\n  Globe,\n  TrendingUp,\n  Flame,\n  Star,\n  Clock,\n  ChevronRight,\n  Zap,\n  Users,\n  Mic,\n  Award,\n  Languages\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LearningPath {\n  id: string;\n  languageId: string;\n  currentLevel: string;\n  targetLevel: string;\n  completedStages: number;\n  totalStages: number;\n  progressPercentage: number;\n}\n\ninterface Language {\n  id: string;\n  code: string;\n  name: string;\n  nativeName: string;\n  flagEmoji: string;\n}\n\ninterface LearningStage {\n  id: string;\n  stageNumber: number;\n  title: string;\n  description: string;\n  difficulty: string;\n  isUnlocked: boolean;\n  isCompleted: boolean;\n  vocabularyData?: any[];\n  grammarTopics?: any[];\n  culturalNotes?: string[];\n}\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedLanguage, setSelectedLanguage] = useState<Language | null>(null);\n\n  // Fetch user data\n  const { data: userResponse } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    staleTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: false,\n  });\n\n  // Fetch languages\n  const { data: languages } = useQuery({\n    queryKey: [\"/api/languages\"],\n    staleTime: 10 * 60 * 1000,\n  });\n\n  // Fetch learning path for selected language\n  const { data: learningPath, isLoading: pathLoading } = useQuery({\n    queryKey: [\"/api/learning-paths\", selectedLanguage?.id],\n    enabled: !!selectedLanguage?.id,\n  });\n\n  // Fetch learning stages\n  const { data: stages, isLoading: stagesLoading } = useQuery({\n    queryKey: [\"/api/learning-paths\", learningPath?.id, \"stages\"],\n    enabled: !!learningPath?.id,\n  });\n\n  // Fetch study sessions\n  const { data: studySessions } = useQuery({\n    queryKey: [\"/api/study-sessions\"],\n    enabled: !!userResponse?.user,\n    staleTime: 2 * 60 * 1000,\n  });\n\n  const user = userResponse?.user;\n\n  // Create learning path mutation\n  const createPathMutation = useMutation({\n    mutationFn: (data: { languageId: string }) => \n      apiRequest(\"/api/learning-paths\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-paths\"] });\n      toast({\n        title: \"Learning Path Created!\",\n        description: \"Your personalized language learning journey has been set up.\",\n      });\n    },\n  });\n\n  // Generate pathway content mutation\n  const generatePathwayMutation = useMutation({\n    mutationFn: (data: { languageId: string }) => \n      apiRequest(`/api/learning-paths/${learningPath?.id}/generate`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-paths\"] });\n      toast({\n        title: \"AI Content Generated!\",\n        description: \"Your learning stages are now ready with personalized content.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate learning content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Set default language\n  useEffect(() => {\n    if (languages && languages.length > 0 && !selectedLanguage) {\n      setSelectedLanguage(languages[0]);\n    }\n  }, [languages, selectedLanguage]);\n\n  const calculateWeeklyProgress = () => {\n    if (!studySessions || studySessions.length === 0) return 0;\n    const totalMinutes = studySessions.reduce((acc: number, session: any) => acc + session.durationMinutes, 0);\n    const dailyGoal = user?.dailyGoalMinutes || 20;\n    return Math.min(100, (totalMinutes / (dailyGoal * 7)) * 100);\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case \"beginner\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"intermediate\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"advanced\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\";\n    }\n  };\n\n  const handleStartLearning = () => {\n    if (!selectedLanguage) return;\n    \n    if (!learningPath) {\n      createPathMutation.mutate({ languageId: selectedLanguage.id });\n    } else if (!stages || stages.length === 0) {\n      generatePathwayMutation.mutate({ languageId: selectedLanguage.id });\n    } else {\n      // Navigate to learning pathway\n      window.location.href = \"/learning-pathway\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation />\n      <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n        \n        {/* Welcome Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full\">\n              <Brain className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Learn a Language\n            </h1>\n          </div>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n            Welcome back, {user?.firstName}! Ready to continue your personalized learning journey?\n          </p>\n        </div>\n\n        {/* Language Selection */}\n        <Card className=\"border-2 border-blue-200 dark:border-blue-800\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-center justify-center\">\n              <Languages className=\"w-6 h-6\" />\n              Choose Your Learning Language\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n              {languages?.map((language: Language) => (\n                <Button\n                  key={language.id}\n                  variant={selectedLanguage?.id === language.id ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedLanguage(language)}\n                  className=\"h-20 flex-col gap-2 transition-all hover:scale-105\"\n                >\n                  <span className=\"text-3xl\">{language.flagEmoji}</span>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">{language.name}</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">{language.nativeName}</div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Learning Path Section */}\n        {selectedLanguage && (\n          <Card className=\"border-2 border-purple-200 dark:border-purple-800 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-2xl\">\n                <Sparkles className=\"w-8 h-8 text-yellow-500\" />\n                Your {selectedLanguage.name} Learning Journey\n              </CardTitle>\n              <CardDescription className=\"text-lg\">\n                AI-powered personalized learning path designed just for you\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              \n              {/* Learning Path Progress */}\n              {learningPath && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <Badge variant=\"outline\" className=\"text-sm px-3 py-1\">\n                        Level: {learningPath.currentLevel} → {learningPath.targetLevel}\n                      </Badge>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                        {learningPath.completedStages || 0}/{learningPath.totalStages || 0} stages completed\n                      </span>\n                    </div>\n                    <span className=\"text-2xl font-bold text-purple-600\">\n                      {Math.round(learningPath.progressPercentage || 0)}%\n                    </span>\n                  </div>\n                  <Progress value={learningPath.progressPercentage || 0} className=\"h-4\" />\n                </div>\n              )}\n\n              {/* Learning Content Preview */}\n              {stages && stages.length > 0 && (\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {stages.slice(0, 3).map((stage: LearningStage, index: number) => (\n                    <Card \n                      key={stage.id}\n                      className={`transition-all hover:shadow-md ${\n                        stage.isCompleted ? \"border-green-200 bg-green-50 dark:bg-green-900/20\" : \n                        stage.isUnlocked ? \"border-blue-200 bg-blue-50 dark:bg-blue-900/20\" : \n                        \"border-gray-200 bg-gray-50 dark:bg-gray-800 opacity-60\"\n                      }`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${\n                            stage.isCompleted ? \"bg-green-500 text-white\" :\n                            stage.isUnlocked ? \"bg-blue-500 text-white\" :\n                            \"bg-gray-400 text-white\"\n                          }`}>\n                            {stage.stageNumber}\n                          </div>\n                          <Badge className={getDifficultyColor(stage.difficulty)} variant=\"secondary\">\n                            {stage.difficulty}\n                          </Badge>\n                        </div>\n                        <h3 className=\"font-semibold mb-1\">{stage.title}</h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">{stage.description}</p>\n                        <div className=\"flex items-center justify-between mt-3 text-xs\">\n                          <span>{stage.vocabularyData?.length || 0} words</span>\n                          <span>{stage.grammarTopics?.length || 0} topics</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {/* Main Action Button */}\n              <div className=\"text-center\">\n                <Button \n                  onClick={handleStartLearning}\n                  disabled={createPathMutation.isPending || generatePathwayMutation.isPending || pathLoading || stagesLoading}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4 text-lg font-semibold\"\n                >\n                  {createPathMutation.isPending || generatePathwayMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                      Setting Up Your Journey...\n                    </>\n                  ) : !learningPath ? (\n                    <>\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      Start Learning {selectedLanguage.name}\n                    </>\n                  ) : !stages || stages.length === 0 ? (\n                    <>\n                      <Sparkles className=\"w-5 h-5 mr-2\" />\n                      Generate AI Learning Path\n                    </>\n                  ) : (\n                    <>\n                      <BookOpen className=\"w-5 h-5 mr-2\" />\n                      Continue Learning\n                    </>\n                  )}\n                  <ChevronRight className=\"w-5 h-5 ml-2\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Current Level</p>\n                  <p className=\"text-xl font-bold text-blue-600\">{user?.cefr_level || \"A1\"}</p>\n                </div>\n                <Target className=\"w-6 h-6 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Streak</p>\n                  <p className=\"text-xl font-bold text-green-600\">{user?.currentStreak || 0} days</p>\n                </div>\n                <Flame className=\"w-6 h-6 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Points</p>\n                  <p className=\"text-xl font-bold text-purple-600\">{user?.totalPoints || 0}</p>\n                </div>\n                <Star className=\"w-6 h-6 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-orange-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Weekly Goal</p>\n                  <p className=\"text-xl font-bold text-orange-600\">{Math.round(calculateWeeklyProgress())}%</p>\n                </div>\n                <TrendingUp className=\"w-6 h-6 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"w-5 h-5\" />\n              Quick Practice\n            </CardTitle>\n            <CardDescription>Jump into quick learning activities</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button\n                variant=\"outline\"\n                className=\"h-16 flex-col gap-2 hover:shadow-md transition-all\"\n                onClick={() => window.location.href = \"/learning-pathway\"}\n              >\n                <BookOpen className=\"w-5 h-5 text-blue-500\" />\n                <span className=\"text-sm font-medium\">Learning Path</span>\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                className=\"h-16 flex-col gap-2 hover:shadow-md transition-all\"\n                onClick={() => window.location.href = \"/online-friends\"}\n              >\n                <Users className=\"w-5 h-5 text-green-500\" />\n                <span className=\"text-sm font-medium\">Practice Partners</span>\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"h-16 flex-col gap-2 hover:shadow-md transition-all\"\n              >\n                <Mic className=\"w-5 h-5 text-purple-500\" />\n                <span className=\"text-sm font-medium\">Pronunciation</span>\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"h-16 flex-col gap-2 hover:shadow-md transition-all\"\n                onClick={() => window.location.href = \"/profile\"}\n              >\n                <Award className=\"w-5 h-5 text-pink-500\" />\n                <span className=\"text-sm font-medium\">Achievements</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* AI Features */}\n        <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain className=\"w-6 h-6 text-blue-600\" />\n              AI-Powered Learning Features\n            </CardTitle>\n            <CardDescription>\n              Personalized content generated specifically for your learning style and interests\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                <Sparkles className=\"w-10 h-10 text-yellow-500 mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Smart Content Generation</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  AI creates vocabulary, grammar, and cultural content based on your interests and field of learning\n                </p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                <Target className=\"w-10 h-10 text-green-500 mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Adaptive Difficulty</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Learning path adjusts difficulty based on your progress and CEFR level\n                </p>\n              </div>\n              \n              <div className=\"text-center p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                <Globe className=\"w-10 h-10 text-purple-500 mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Cultural Context</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Learn real-world applications with cultural notes and practical examples\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":19166},"client/src/pages/home-old.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navigation from \"@/components/navigation\";\nimport { Play, Users, Trophy, Book, MessageSquare, Globe } from \"lucide-react\";\nimport { Logo } from \"@/components/ui/logo\";\n\nexport default function Home() {\n  const [stats] = useState({\n    totalUsers: \"2.5M+\",\n    languages: \"25+\",\n    completionRate: \"94%\"\n  });\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-emerald-50 via-blue-50 to-amber-50 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-8\">\n            <div className=\"flex justify-center mb-8\">\n              <Logo size=\"xl\" />\n            </div>\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl md:text-6xl font-bold text-slate-800 leading-tight\">\n                Master Any Language with\n                <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-emerald-500 to-blue-600\">\n                  {\" \"}AI-Powered Learning\n                </span>\n              </h1>\n              <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n                Join millions of learners worldwide in an immersive, gamified language learning experience. \n                From pronunciation feedback to cultural immersion, we make language learning engaging and effective.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Link href=\"/dashboard\">\n                <Button size=\"lg\" className=\"bg-emerald-500 hover:bg-emerald-600 text-white px-8 py-4 text-lg shadow-lg\">\n                  <Play className=\"w-5 h-5 mr-2\" />\n                  Start Learning Today\n                </Button>\n              </Link>\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-4 text-lg\">\n                View Demo\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-center space-x-8 pt-8\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-slate-800\">{stats.totalUsers}</div>\n                <div className=\"text-sm text-slate-600\">Active Learners</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-slate-800\">{stats.languages}</div>\n                <div className=\"text-sm text-slate-600\">Languages</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-slate-800\">{stats.completionRate}</div>\n                <div className=\"text-sm text-slate-600\">Success Rate</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-800 mb-4\">Why Choose Learn a Language?</h2>\n            <p className=\"text-lg text-slate-600\">Everything you need to master a new language</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Book className=\"w-6 h-6 text-emerald-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Interactive Lessons</h3>\n                <p className=\"text-slate-600\">Engage with dynamic exercises, flashcards, and quizzes designed to accelerate your learning.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <MessageSquare className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">AI Pronunciation</h3>\n                <p className=\"text-slate-600\">Get real-time feedback on your pronunciation with our advanced speech recognition technology.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Trophy className=\"w-6 h-6 text-amber-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Gamified Learning</h3>\n                <p className=\"text-slate-600\">Stay motivated with streaks, achievements, and friendly competition with learners worldwide.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Globe className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Cultural Immersion</h3>\n                <p className=\"text-slate-600\">Learn through authentic stories, dialogues, and cultural content from native speakers.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-12 h-12 bg-rose-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"w-6 h-6 text-rose-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Global Community</h3>\n                <p className=\"text-slate-600\">Connect with language partners and practice with native speakers in our vibrant community.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4\">\n                  <MessageSquare className=\"w-6 h-6 text-indigo-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">Personalized Learning</h3>\n                <p className=\"text-slate-600\">AI-powered adaptive learning that adjusts to your pace and learning style.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-slate-800 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to Start Your Language Journey?</h2>\n          <p className=\"text-xl text-slate-300 mb-8\">Join millions of learners and start speaking a new language today</p>\n          <Link href=\"/dashboard\">\n            <Button size=\"lg\" className=\"bg-emerald-500 hover:bg-emerald-600 text-white px-8 py-4 text-lg\">\n              Get Started Free\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-800 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                  <Globe className=\"w-4 h-4 text-white\" />\n                </div>\n                <span className=\"text-xl font-bold\">LinguaLearn</span>\n              </div>\n              <p className=\"text-slate-400 text-sm\">\n                Master any language with AI-powered learning, cultural immersion, and global community support.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Learning</h4>\n              <ul className=\"space-y-2 text-sm text-slate-400\">\n                <li><Link href=\"/lessons\" className=\"hover:text-white transition-colors\">Language Courses</Link></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Pronunciation Tools</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Grammar Hub</a></li>\n                <li><Link href=\"/stories\" className=\"hover:text-white transition-colors\">Cultural Stories</Link></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Community</h4>\n              <ul className=\"space-y-2 text-sm text-slate-400\">\n                <li><Link href=\"/community\" className=\"hover:text-white transition-colors\">Language Exchange</Link></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Study Groups</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Discussion Forums</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Native Speakers</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-slate-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Terms of Service</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact Us</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-slate-700 mt-8 pt-8 flex flex-col md:flex-row items-center justify-between\">\n            <p className=\"text-slate-400 text-sm\">© 2024 LinguaLearn. All rights reserved.</p>\n            <div className=\"flex space-x-4 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\">Twitter</a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\">Facebook</a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\">Instagram</a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\">YouTube</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11214},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Play, Download, Apple, Smartphone, Facebook, Instagram, Twitter, Linkedin, Send, Check, Brain, Headphones, Users, Trophy, MessageSquare } from \"lucide-react\";\nimport { Logo } from \"@/components/ui/logo\";\nimport { AuthHeader } from \"@/components/auth-header\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Home() {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"en\");\n\n  const languages = [\n    { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n    { code: \"ru\", name: \"Русский\", flag: \"🇷🇺\" },\n    { code: \"zh\", name: \"中文\", flag: \"🇨🇳\" },\n    { code: \"fr\", name: \"Français\", flag: \"🇫🇷\" },\n    { code: \"de\", name: \"Deutsch\", flag: \"🇩🇪\" },\n    { code: \"es\", name: \"Español\", flag: \"🇪🇸\" }\n  ];\n\n  // Fetch languages from database\n  const { data: availableLanguages = [] } = useQuery<{\n    id: string;\n    code: string;\n    name: string;\n    nativeName: string;\n    flagEmoji: string;\n    isActive: boolean;\n    createdAt: string;\n  }[]>({\n    queryKey: ['/api/languages'],\n  });\n\n  return (\n    <div className=\"min-h-screen\">\n      <AuthHeader />\n\n\n      {/* Language Selection Section */}\n      <section className=\"py-20 bg-gray-50 relative overflow-hidden\">\n        {/* Animated Background - positioned in empty white spaces only */}\n        <div className=\"absolute inset-0 opacity-25 pointer-events-none\">\n          {/* Rotating Language Rings - positioned in right side empty space */}\n          <div className=\"absolute top-32 right-16 w-36 h-36 border-3 border-blue-400 rounded-full animate-spin-slow\">\n            <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 text-sm font-bold text-blue-600\">EN</div>\n            <div className=\"absolute top-1/2 -right-3 transform -translate-y-1/2 text-sm font-bold text-blue-600\">ES</div>\n            <div className=\"absolute -bottom-3 left-1/2 transform -translate-x-1/2 text-sm font-bold text-blue-600\">FR</div>\n            <div className=\"absolute top-1/2 -left-3 transform -translate-y-1/2 text-sm font-bold text-blue-600\">DE</div>\n          </div>\n          \n          <div className=\"absolute bottom-24 right-32 w-28 h-28 border-3 border-green-400 rounded-full animate-spin-reverse\">\n            <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 text-sm font-bold text-green-600\">中文</div>\n            <div className=\"absolute top-1/2 -right-2 transform -translate-y-1/2 text-sm font-bold text-green-600\">RU</div>\n          </div>\n\n          {/* Floating Text Animations - using empty margins/padding areas */}\n          <div className=\"absolute top-4 left-0 animate-slide-right\">\n            <div className=\"flex items-center space-x-3 text-lg font-semibold\">\n              <span className=\"text-blue-600\">Hello</span>\n              <span className=\"text-gray-500\">→</span>\n              <span className=\"text-green-600\">Hola</span>\n            </div>\n          </div>\n          \n          <div className=\"absolute top-1/2 right-0 animate-slide-left\">\n            <div className=\"flex items-center space-x-3 text-lg font-semibold\">\n              <span className=\"text-purple-600\">Bonjour</span>\n              <span className=\"text-gray-500\">←</span>\n              <span className=\"text-orange-600\">Guten Tag</span>\n            </div>\n          </div>\n\n          <div className=\"absolute bottom-4 left-0 animate-slide-right-delayed\">\n            <div className=\"flex items-center space-x-3 text-lg font-semibold\">\n              <span className=\"text-red-600\">你好</span>\n              <span className=\"text-gray-500\">→</span>\n              <span className=\"text-blue-600\">Привет</span>\n            </div>\n          </div>\n\n          {/* Flag to Dictionary Transformations - positioned in right margin area */}\n          <div className=\"absolute top-72 right-4\">\n            <div className=\"animate-pulse-slow\">\n              <div className=\"text-2xl mb-1 animate-flag-transform\">🇪🇸</div>\n              <div className=\"text-xs bg-white p-1.5 rounded shadow-md border\">\n                <div className=\"font-bold text-gray-800\">casa</div>\n                <div className=\"text-gray-600\">house</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"absolute bottom-48 right-6\">\n            <div className=\"animate-pulse-slow-delayed\">\n              <div className=\"text-2xl mb-1 animate-flag-transform\">🇫🇷</div>\n              <div className=\"text-xs bg-white p-1.5 rounded shadow-md border\">\n                <div className=\"font-bold text-gray-800\">amour</div>\n                <div className=\"text-gray-600\">love</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Floating Language Particles - in empty corner spaces */}\n          <div className=\"absolute top-8 right-8 animate-float\">\n            <span className=\"text-xl\">🌍</span>\n          </div>\n          <div className=\"absolute bottom-8 right-4 animate-float-delayed\">\n            <span className=\"text-xl\">📚</span>\n          </div>\n          <div className=\"absolute top-2 right-1/2 animate-float-slow\">\n            <span className=\"text-xl\">💬</span>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Left Side - Language Selection */}\n            <div>\n              <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-8\">\n                Which <span className=\"text-orange-500\">language</span><br />\n                do you want to<br />\n                learn?\n              </h1>\n              \n              <div className=\"grid grid-cols-2 gap-3 max-w-sm\">\n                {languages.map((lang) => (\n                  <button\n                    key={lang.code}\n                    onClick={() => setSelectedLanguage(lang.code)}\n                    className={`flex items-center space-x-2 p-2 border border-gray-200 rounded-lg hover:bg-white hover:shadow-md transition-all cursor-pointer ${\n                      selectedLanguage === lang.code\n                        ? 'border-orange-500 bg-orange-50'\n                        : 'hover:border-orange-300'\n                    }`}\n                  >\n                    <div className=\"text-2xl\">\n                      {lang.flag}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900 text-sm\">{lang.name}</div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Right Side - Content Grid - Reduced size */}\n            <div className=\"grid grid-cols-2 gap-2 max-w-md\">\n              <div className=\"space-y-2\">\n                <div className=\"bg-orange-100 rounded-lg p-3 relative overflow-hidden\">\n                  <div className=\"absolute top-2 right-2 text-lg\">🚗</div>\n                  <h3 className=\"text-sm font-semibold text-gray-800 mb-1\">Cultural History<br />Of Coffee</h3>\n                  <p className=\"text-xs text-gray-600\">Daily Life</p>\n                </div>\n                \n                <div className=\"bg-blue-100 rounded-lg p-2 relative overflow-hidden\">\n                  <div className=\"absolute top-2 right-2 text-lg\">☕</div>\n                  <div className=\"text-xs text-gray-600\">Conversation</div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"bg-cover bg-center rounded-lg h-24 relative\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1551218808-94e220e084d2?w=400&h=300&fit=crop')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-30 rounded-lg\"></div>\n                  <div className=\"absolute bottom-2 left-2 text-white\">\n                    <h3 className=\"text-xs font-semibold\">Weekend Adventures</h3>\n                  </div>\n                </div>\n                \n                <div className=\"bg-green-400 rounded-lg p-3 relative\">\n                  <div className=\"absolute top-2 right-2 text-lg\">🧺</div>\n                  <h3 className=\"text-sm font-semibold text-gray-800 mb-1\">Share your<br />weekend plans</h3>\n                  <p className=\"text-xs text-gray-700\">Daily Life</p>\n                </div>\n              </div>\n              \n              <div className=\"col-span-2\">\n                <div className=\"bg-yellow-300 rounded-lg p-3 relative\">\n                  <div className=\"absolute top-2 right-2 text-lg\">📚</div>\n                  <h3 className=\"text-sm font-bold text-gray-800\">Newcomer</h3>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Effective Learning Section */}\n      <section className=\"py-20 bg-white relative overflow-hidden\">\n        {/* Animations in empty white space */}\n        <div className=\"absolute inset-0 opacity-25 pointer-events-none\">\n          {/* Top right empty area */}\n          <div className=\"absolute top-8 right-8 animate-float-slow\">\n            <span className=\"text-xl\">🎯</span>\n          </div>\n          \n          {/* Bottom left empty area */}\n          <div className=\"absolute bottom-16 left-8 w-24 h-24 border-2 border-purple-400 rounded-full animate-spin-slow\">\n            <div className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 text-xs font-bold text-purple-600\">IT</div>\n            <div className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 text-xs font-bold text-purple-600\">PT</div>\n          </div>\n          \n          {/* Right side margin */}\n          <div className=\"absolute top-1/3 right-4\">\n            <div className=\"animate-pulse-slow\">\n              <div className=\"text-2xl mb-1 animate-flag-transform\">🇮🇹</div>\n              <div className=\"text-xs bg-white p-1.5 rounded shadow-md border\">\n                <div className=\"font-bold text-gray-800\">ciao</div>\n                <div className=\"text-gray-600\">hello</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-center text-gray-900 mb-16\">\n            The effective way to learn a language<br />online\n          </h2>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Left Side - Image */}\n            <div className=\"relative\">\n              <div className=\"rounded-2xl overflow-hidden shadow-lg\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1521737604893-d14cc237f11d?w=600&h=400&fit=crop\" \n                  alt=\"People learning in a cafe\" \n                  className=\"w-full h-96 object-cover\"\n                />\n                <div className=\"absolute top-6 left-6 bg-yellow-400 text-black px-4 py-2 rounded-lg\">\n                  <div className=\"font-semibold\">Talk about</div>\n                  <div className=\"font-semibold\">your favorite</div>\n                  <div className=\"font-semibold\">food</div>\n                  <div className=\"text-sm mt-1\">Daily Life</div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Right Side - Content */}\n            <div className=\"space-y-6\">\n              <h3 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n                Learn to speak a new<br />\n                language with<br />\n                confidence\n              </h3>\n              \n              <p className=\"text-lg text-gray-600 leading-relaxed\">\n                With Learn a Language, you'll learn practical and useful skills that you can apply right away — so you can reach your goal of having real-life conversations faster.\n              </p>\n              \n              <Link href=\"/dashboard\">\n                <Button size=\"lg\" className=\"bg-black hover:bg-gray-800 text-white px-8 py-4 text-lg rounded-full\">\n                  Start learning\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Download App Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-800 mb-8\">Download App</h2>\n          \n          <div className=\"flex justify-center items-center space-x-6\">\n            <div className=\"bg-black text-white px-6 py-3 rounded-lg flex items-center space-x-3 hover:bg-gray-800 transition-colors cursor-pointer\">\n              <Apple className=\"w-6 h-6\" />\n              <div className=\"text-left\">\n                <div className=\"text-xs\">Download on the</div>\n                <div className=\"text-lg font-semibold\">App Store</div>\n              </div>\n            </div>\n            \n            <div className=\"bg-black text-white px-6 py-3 rounded-lg flex items-center space-x-3 hover:bg-gray-800 transition-colors cursor-pointer\">\n              <Play className=\"w-6 h-6\" />\n              <div className=\"text-left\">\n                <div className=\"text-xs\">Get it on</div>\n                <div className=\"text-lg font-semibold\">Google Play</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* What Makes Us Different Section */}\n      <section className=\"py-20 bg-gray-50 relative overflow-hidden\">\n        {/* Animations in white space margins */}\n        <div className=\"absolute inset-0 opacity-25 pointer-events-none\">\n          {/* Left margin area */}\n          <div className=\"absolute top-1/4 left-4 animate-float-delayed\">\n            <span className=\"text-xl\">📖</span>\n          </div>\n          \n          {/* Right margin area */}\n          <div className=\"absolute bottom-1/3 right-6 animate-float\">\n            <span className=\"text-xl\">🗣️</span>\n          </div>\n          \n          {/* Top margin sliding text */}\n          <div className=\"absolute top-4 left-0 animate-slide-right\">\n            <div className=\"flex items-center space-x-3 text-lg font-semibold\">\n              <span className=\"text-green-600\">Gracias</span>\n              <span className=\"text-gray-500\">→</span>\n              <span className=\"text-blue-600\">Thank you</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-center text-gray-900 mb-16\">\n            What makes Learn a Language different?\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Real People */}\n            <div className=\"text-center\">\n              <div className=\"mb-6 flex justify-center\">\n                <div className=\"w-32 h-32 bg-blue-100 rounded-full flex items-center justify-center relative overflow-hidden\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face\" \n                    alt=\"Real person\" \n                    className=\"w-full h-full object-cover rounded-full\"\n                  />\n                  <div className=\"absolute top-2 right-2 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">✨</span>\n                  </div>\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Real people</h3>\n              <p className=\"text-gray-600 text-lg leading-relaxed\">\n                Learn authentic language for real-world situations.\n              </p>\n            </div>\n            \n            {/* Supportive Community */}\n            <div className=\"text-center\">\n              <div className=\"mb-6 flex justify-center\">\n                <div className=\"w-32 h-32 bg-orange-100 rounded-full flex items-center justify-center\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-8 h-12 bg-orange-400 rounded-full\"></div>\n                    <div className=\"w-8 h-12 bg-orange-600 rounded-full\"></div>\n                  </div>\n                  <div className=\"absolute mt-8 ml-4\">\n                    <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white text-xs\">💬</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Supportive Community</h3>\n              <p className=\"text-gray-600 text-lg leading-relaxed\">\n                Learn together and get feedback from other fluent speakers.\n              </p>\n            </div>\n            \n            {/* Express Yourself */}\n            <div className=\"text-center\">\n              <div className=\"mb-6 flex justify-center\">\n                <div className=\"w-32 h-32 bg-green-100 rounded-full flex items-center justify-center\">\n                  <div className=\"relative\">\n                    <div className=\"w-12 h-8 bg-blue-500 rounded transform rotate-12\"></div>\n                    <div className=\"w-12 h-8 bg-orange-500 rounded transform -rotate-12 -mt-4 ml-4\"></div>\n                    <div className=\"w-12 h-8 bg-green-500 rounded transform rotate-6 -mt-4 ml-2\"></div>\n                    <div className=\"w-12 h-8 bg-purple-500 rounded transform -rotate-6 -mt-4 ml-6\"></div>\n                  </div>\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Express yourself</h3>\n              <p className=\"text-gray-600 text-lg leading-relaxed\">\n                Learn grammar, cultural skills in expertly designed lessons.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Video Integration Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Learn real-world language skills\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              See and hear real people speaking the language you're learning to build your confidence.\n            </p>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"flex space-x-4 overflow-x-auto pb-4\">\n              {/* English Speaker */}\n              <div className=\"flex-shrink-0 relative\">\n                <div className=\"w-64 h-80 bg-cover bg-center rounded-2xl relative overflow-hidden\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=500&fit=crop&crop=face')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <div className=\"bg-white rounded-lg p-3 mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">🇺🇸</span>\n                        <div>\n                          <div className=\"font-bold text-gray-900\">ENGLISH</div>\n                          <div className=\"text-sm text-gray-600\">2M learners</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                      <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* German Speaker */}\n              <div className=\"flex-shrink-0 relative\">\n                <div className=\"w-64 h-80 bg-cover bg-center rounded-2xl relative overflow-hidden\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=500&fit=crop&crop=face')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <div className=\"bg-white rounded-lg p-3 mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">🇩🇪</span>\n                        <div>\n                          <div className=\"font-bold text-gray-900\">GERMAN</div>\n                          <div className=\"text-sm text-gray-600\">4M learners</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                      <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Spanish Speaker */}\n              <div className=\"flex-shrink-0 relative\">\n                <div className=\"w-64 h-80 bg-cover bg-center rounded-2xl relative overflow-hidden\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=500&fit=crop&crop=face')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <div className=\"bg-white rounded-lg p-3 mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">🇪🇸</span>\n                        <div>\n                          <div className=\"font-bold text-gray-900\">SPANISH</div>\n                          <div className=\"text-sm text-gray-600\">5M learners</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                      <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* French Speaker */}\n              <div className=\"flex-shrink-0 relative\">\n                <div className=\"w-64 h-80 bg-cover bg-center rounded-2xl relative overflow-hidden\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=500&fit=crop&crop=face')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <div className=\"bg-white rounded-lg p-3 mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">🇫🇷</span>\n                        <div>\n                          <div className=\"font-bold text-gray-900\">FRENCH</div>\n                          <div className=\"text-sm text-gray-600\">2M learners</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                      <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Russian Speaker */}\n              <div className=\"flex-shrink-0 relative\">\n                <div className=\"w-64 h-80 bg-cover bg-center rounded-2xl relative overflow-hidden\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=400&h=500&fit=crop&crop=face')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <div className=\"bg-white rounded-lg p-3 mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">🇷🇺</span>\n                        <div>\n                          <div className=\"font-bold text-gray-900\">RUSSIAN</div>\n                          <div className=\"text-sm text-gray-600\">1M learners</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                      <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Mandarin Speaker */}\n              <div className=\"flex-shrink-0 relative\">\n                <div className=\"w-64 h-80 bg-cover bg-center rounded-2xl relative overflow-hidden\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1531123897727-8f129e1688ce?w=400&h=500&fit=crop&crop=face')\"}}>\n                  <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-2xl\"></div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <div className=\"bg-white rounded-lg p-3 mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl\">🇨🇳</span>\n                        <div>\n                          <div className=\"font-bold text-gray-900\">MANDARIN</div>\n                          <div className=\"text-sm text-gray-600\">3M learners</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                      <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Navigation arrows */}\n            <button className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center hover:shadow-xl transition-shadow\">\n              <span className=\"text-gray-600\">‹</span>\n            </button>\n            <button className=\"absolute right-4 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center hover:shadow-xl transition-shadow\">\n              <span className=\"text-gray-600\">›</span>\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Interactive Learning Experience Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100 relative overflow-hidden\">\n        {/* Animations in gradient background empty areas */}\n        <div className=\"absolute inset-0 opacity-20 pointer-events-none\">\n          {/* Upper right corner */}\n          <div className=\"absolute top-12 right-12 w-20 h-20 border-2 border-orange-400 rounded-full animate-spin-reverse\">\n            <div className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 text-xs font-bold text-orange-600\">KO</div>\n            <div className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 text-xs font-bold text-orange-600\">HI</div>\n          </div>\n          \n          {/* Bottom left area */}\n          <div className=\"absolute bottom-12 left-12 animate-pulse-slow-delayed\">\n            <div className=\"text-2xl mb-1 animate-flag-transform\">🇰🇷</div>\n            <div className=\"text-xs bg-white p-1.5 rounded shadow-md border\">\n              <div className=\"font-bold text-gray-800\">안녕</div>\n              <div className=\"text-gray-600\">hello</div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Left Side - Interactive Demo */}\n            <div className=\"relative\">\n              <div className=\"bg-white rounded-2xl shadow-2xl overflow-hidden max-w-md mx-auto\">\n                <div className=\"relative h-80 bg-gradient-to-br from-orange-400 to-red-500 flex items-center justify-center\">\n                  <div className=\"absolute inset-0 bg-cover bg-center\" style={{backgroundImage: \"url('https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=600&h=400&fit=crop')\"}}>\n                    <div className=\"absolute inset-0 bg-black bg-opacity-30\"></div>\n                  </div>\n                  \n                  {/* Interactive Elements */}\n                  <div className=\"relative z-10 space-y-4\">\n                    <div className=\"bg-white bg-opacity-90 rounded-lg p-3 max-w-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white text-xs\">🎯</span>\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-gray-900 text-sm\">Practice Speaking</div>\n                          <div className=\"text-xs text-gray-600\">Interactive lessons</div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-white bg-opacity-90 rounded-lg p-3 max-w-xs ml-auto\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                          <Check className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-gray-900 text-sm\">Grammar Mastery</div>\n                          <div className=\"text-xs text-gray-600\">Step by step</div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-white bg-opacity-90 rounded-lg p-3 max-w-xs\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white text-xs\">💬</span>\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-gray-900 text-sm\">Real Conversations</div>\n                          <div className=\"text-xs text-gray-600\">With native speakers</div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-white bg-opacity-90 rounded-lg p-3 max-w-xs ml-auto\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white text-xs\">🏆</span>\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-gray-900 text-sm\">Cultural Context</div>\n                          <div className=\"text-xs text-gray-600\">Learn traditions</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Play Button */}\n                  <div className=\"absolute bottom-4 right-4 z-20\">\n                    <div className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center shadow-lg cursor-pointer hover:shadow-xl transition-all\">\n                      <Play className=\"w-5 h-5 text-gray-800 ml-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Right Side - Features */}\n            <div className=\"space-y-6\">\n              <h3 className=\"text-3xl md:text-4xl font-bold text-gray-900\">\n                Interactive learning<br />\n                experience designed<br />\n                for success\n              </h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Pronunciation Practice</h4>\n                    <p className=\"text-gray-600\">AI-powered speech recognition helps perfect your accent</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Grammar Exercises</h4>\n                    <p className=\"text-gray-600\">Interactive quizzes that adapt to your learning pace</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Cultural Stories</h4>\n                    <p className=\"text-gray-600\">Learn language through engaging cultural narratives</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Check className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">Community Learning</h4>\n                    <p className=\"text-gray-600\">Connect with other learners and native speakers</p>\n                  </div>\n                </div>\n              </div>\n              \n              <Link href=\"/dashboard\">\n                <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg rounded-full\">\n                  Try Interactive Demo\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Available Languages Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Choose from 12+ languages\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              Start your journey with any of our supported languages\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {availableLanguages.map((language) => (\n              <Link key={language.code} href=\"/dashboard\">\n                <div className=\"text-center p-4 rounded-lg border border-gray-200 hover:border-blue-300 hover:shadow-md transition-all cursor-pointer\">\n                  <div className=\"text-3xl mb-2\">{language.flagEmoji}</div>\n                  <div className=\"font-medium text-gray-900 text-sm\">{language.name}</div>\n                  <div className=\"text-xs text-gray-500\">{language.nativeName}</div>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-gray-50 relative overflow-hidden\">\n        {/* Animations in empty margins */}\n        <div className=\"absolute inset-0 opacity-25 pointer-events-none\">\n          {/* Right side empty space */}\n          <div className=\"absolute top-16 right-8 animate-float\">\n            <span className=\"text-xl\">⭐</span>\n          </div>\n          \n          {/* Left side margin */}\n          <div className=\"absolute bottom-20 left-6 animate-float-delayed\">\n            <span className=\"text-xl\">💡</span>\n          </div>\n          \n          {/* Bottom margin text animation */}\n          <div className=\"absolute bottom-4 left-0 animate-slide-right-delayed\">\n            <div className=\"flex items-center space-x-3 text-lg font-semibold\">\n              <span className=\"text-purple-600\">Danke</span>\n              <span className=\"text-gray-500\">→</span>\n              <span className=\"text-green-600\">Thanks</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Join millions of learners\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              See what our community has to say about their learning journey\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n              <div className=\"flex items-center mb-4\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=80&h=80&fit=crop&crop=face\" \n                  alt=\"User testimonial\" \n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n                <div className=\"ml-3\">\n                  <div className=\"font-semibold text-gray-900\">Maria Rodriguez</div>\n                  <div className=\"text-sm text-gray-500\">Learning French</div>\n                </div>\n              </div>\n              <p className=\"text-gray-600 italic\">\n                \"The pronunciation practice feature helped me gain confidence in speaking French. \n                I can now have conversations with native speakers!\"\n              </p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n              <div className=\"flex items-center mb-4\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=80&h=80&fit=crop&crop=face\" \n                  alt=\"User testimonial\" \n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n                <div className=\"ml-3\">\n                  <div className=\"font-semibold text-gray-900\">James Chen</div>\n                  <div className=\"text-sm text-gray-500\">Learning Spanish</div>\n                </div>\n              </div>\n              <p className=\"text-gray-600 italic\">\n                \"The cultural stories made learning Spanish so much more engaging. \n                I understand not just the language, but the culture behind it.\"\n              </p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl p-6 shadow-sm\">\n              <div className=\"flex items-center mb-4\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=80&h=80&fit=crop&crop=face\" \n                  alt=\"User testimonial\" \n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n                <div className=\"ml-3\">\n                  <div className=\"font-semibold text-gray-900\">Anna Schmidt</div>\n                  <div className=\"text-sm text-gray-500\">Learning Mandarin</div>\n                </div>\n              </div>\n              <p className=\"text-gray-600 italic\">\n                \"The community features are amazing! I practice with native speakers \n                and other learners. It feels like having language partners worldwide.\"\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Section */}\n      <section className=\"py-16 bg-blue-600 text-white\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Stay updated with language learning tips\n          </h2>\n          <p className=\"text-lg text-blue-100 mb-8\">\n            Get weekly tips, cultural insights, and exclusive content delivered to your inbox\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row max-w-md mx-auto gap-4\">\n            <input \n              type=\"email\" \n              placeholder=\"Enter your email\"\n              className=\"flex-1 px-4 py-3 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-white\"\n            />\n            <Button className=\"bg-white text-blue-600 hover:bg-gray-100 px-6 py-3 rounded-lg font-semibold flex items-center justify-center\">\n              <Send className=\"w-4 h-4 mr-2\" />\n              Subscribe\n            </Button>\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {/* Logo and Description */}\n            <div className=\"col-span-1 md:col-span-2\">\n              <div className=\"mb-4\">\n                <Logo size=\"lg\" className=\"brightness-0 invert\" />\n              </div>\n              <p className=\"text-gray-400 mb-6 max-w-md\">\n                Learn a Language is the world's leading language learning platform, \n                helping millions of people master new languages through innovative technology \n                and engaging content.\n              </p>\n              <div className=\"flex space-x-4\">\n                <Facebook className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n                <Instagram className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n                <Twitter className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n                <Linkedin className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n              </div>\n            </div>\n            \n            {/* Quick Links */}\n            <div>\n              <h3 className=\"font-semibold text-white mb-4\">Quick Links</h3>\n              <ul className=\"space-y-2\">\n                <li><Link href=\"/lessons\" className=\"text-gray-400 hover:text-white transition-colors\">Lessons</Link></li>\n                <li><Link href=\"/stories\" className=\"text-gray-400 hover:text-white transition-colors\">Stories</Link></li>\n                <li><Link href=\"/community\" className=\"text-gray-400 hover:text-white transition-colors\">Community</Link></li>\n                <li><Link href=\"/dashboard\" className=\"text-gray-400 hover:text-white transition-colors\">Dashboard</Link></li>\n              </ul>\n            </div>\n            \n            {/* Support */}\n            <div>\n              <h3 className=\"font-semibold text-white mb-4\">Support</h3>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">Terms of Service</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n            <p className=\"text-gray-400\">\n              © 2024 Learn a Language. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":45985},"client/src/pages/how-it-works.tsx":{"content":"import { AuthHeader } from \"@/components/auth-header\";\nimport { Brain, Headphones, Users, Trophy, Play, Check } from \"lucide-react\";\n\nexport default function HowItWorks() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <AuthHeader />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-green-50 to-blue-100 dark:from-slate-900 dark:to-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n              How It Works\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n              Start your language learning journey in just 3 simple steps and discover our proven methodology.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* 3 Steps Section */}\n      <section className=\"py-20 bg-white dark:bg-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Step 1 */}\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <div className=\"w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">1</span>\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Choose Your Language</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 text-lg leading-relaxed\">\n                Select from 6 popular languages: English, Spanish, French, German, Russian, or Mandarin. \n                Each course is designed by language experts and native speakers.\n              </p>\n            </div>\n            \n            {/* Step 2 */}\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <div className=\"w-12 h-12 bg-green-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">2</span>\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Personalized Learning</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 text-lg leading-relaxed\">\n                Take our placement test and get a customized learning path. Practice vocabulary, \n                grammar, pronunciation, and conversation skills at your own pace.\n              </p>\n            </div>\n            \n            {/* Step 3 */}\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <div className=\"w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">3</span>\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Achieve Fluency</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 text-lg leading-relaxed\">\n                Track your progress, earn achievements, and connect with native speakers. \n                Build confidence through real-world practice and cultural immersion.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 bg-gray-50 dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n              Powerful Features\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Everything you need to master a new language effectively.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center p-6 rounded-lg bg-white dark:bg-slate-900 shadow-lg\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Brain className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-bold text-gray-900 dark:text-white mb-2\">AI-Powered</h4>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">Smart algorithms adapt to your learning style and pace</p>\n            </div>\n            \n            <div className=\"text-center p-6 rounded-lg bg-white dark:bg-slate-900 shadow-lg\">\n              <div className=\"w-12 h-12 bg-green-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Headphones className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-bold text-gray-900 dark:text-white mb-2\">Speech Recognition</h4>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">Perfect your pronunciation with AI feedback</p>\n            </div>\n            \n            <div className=\"text-center p-6 rounded-lg bg-white dark:bg-slate-900 shadow-lg\">\n              <div className=\"w-12 h-12 bg-purple-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-bold text-gray-900 dark:text-white mb-2\">Community</h4>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">Practice with learners worldwide</p>\n            </div>\n            \n            <div className=\"text-center p-6 rounded-lg bg-white dark:bg-slate-900 shadow-lg\">\n              <div className=\"w-12 h-12 bg-orange-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Trophy className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-bold text-gray-900 dark:text-white mb-2\">Gamified</h4>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">Earn points and achievements as you learn</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Learning Process Section */}\n      <section className=\"py-20 bg-white dark:bg-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n              Our Learning Methodology\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Based on proven language acquisition principles and modern technology.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Check className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Spaced Repetition</h3>\n                  <p className=\"text-gray-600 dark:text-gray-300\">\n                    Our algorithm presents vocabulary and concepts at optimal intervals for long-term retention.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Check className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Immersive Practice</h3>\n                  <p className=\"text-gray-600 dark:text-gray-300\">\n                    Practice real conversations with AI tutors and native speakers in contextualized scenarios.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Check className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Cultural Context</h3>\n                  <p className=\"text-gray-600 dark:text-gray-300\">\n                    Learn not just the language, but the culture and customs that give words their true meaning.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-orange-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Check className=\"w-4 h-4 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Progress Tracking</h3>\n                  <p className=\"text-gray-600 dark:text-gray-300\">\n                    Detailed analytics help you understand your strengths and areas for improvement.\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"rounded-2xl overflow-hidden shadow-xl\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1521737604893-d14cc237f11d?w=600&h=400&fit=crop\" \n                  alt=\"Learning process\" \n                  className=\"w-full h-96 object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\"></div>\n                <div className=\"absolute bottom-6 left-6 text-white\">\n                  <h3 className=\"text-2xl font-bold mb-2\">Interactive Learning</h3>\n                  <p className=\"text-lg opacity-90\">Engage with real-world scenarios</p>\n                </div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                  <div className=\"w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-100 transition-all\">\n                    <Play className=\"w-6 h-6 text-gray-800 ml-1\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11002},"client/src/pages/lessons.tsx":{"content":"import { useState } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport Flashcard from \"@/components/flashcard\";\nimport GrammarQuiz from \"@/components/grammar-quiz\";\nimport PronunciationPractice from \"@/components/pronunciation-practice\";\nimport SentenceBuilder from \"@/components/sentence-builder\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Lessons() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"py-16 bg-slate-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Interactive Learning Experience</h1>\n            <p className=\"text-lg text-slate-600\">Engage with dynamic exercises designed to accelerate your learning</p>\n          </div>\n\n          <Tabs defaultValue=\"vocabulary\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n              <TabsTrigger value=\"vocabulary\">Vocabulary</TabsTrigger>\n              <TabsTrigger value=\"grammar\">Grammar</TabsTrigger>\n              <TabsTrigger value=\"pronunciation\">Pronunciation</TabsTrigger>\n              <TabsTrigger value=\"sentence\">Sentence Building</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"vocabulary\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Vocabulary Practice</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Flashcard />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"grammar\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Grammar Challenge</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <GrammarQuiz />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"pronunciation\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Pronunciation Practice</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <PronunciationPractice />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"sentence\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sentence Builder</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <SentenceBuilder />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2923},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Welcome back!\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-slate-900 dark:to-slate-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n          <CardDescription>\n            Sign in to continue your language learning journey\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        {...field}\n                        disabled={loginMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        {...field}\n                        disabled={loginMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\">\n                <Button variant=\"link\" className=\"p-0 h-auto\">\n                  Sign up\n                </Button>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4453},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">Page Not Available</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            This page is not available at the moment. Our platform currently supports language learning for 6 languages: English, Russian, Mandarin, French, German, and Spanish.\n          </p>\n\n          <div className=\"mt-6\">\n            <Link href=\"/\">\n              <Button className=\"w-full\">\n                <Home className=\"h-4 w-4 mr-2\" />\n                Return to Homepage\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1167},"client/src/pages/profile-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Upload, X, Globe, BookOpen, Target, Clock, MapPin } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { countries, learningCategories, contentTypes } from \"@/../../shared/countries\";\n\nconst profileSetupSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  location: z.string().optional(),\n  country: z.string().optional(),\n  fieldOfLearning: z.string().optional(),\n  interests: z.array(z.string()).optional(),\n  learningCategories: z.array(z.string()).optional(),\n  contentTypes: z.array(z.string()).optional(),\n  preferredLearningStyle: z.string().optional(),\n  dailyGoalMinutes: z.number().min(5).max(240).default(20),\n  cefr_level: z.enum([\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"]).default(\"A1\"),\n  profileImageUrl: z.string().optional(),\n});\n\ntype ProfileSetupForm = z.infer<typeof profileSetupSchema>;\n\nconst FIELD_OPTIONS = [\n  \"Technology\",\n  \"Business\",\n  \"Healthcare\", \n  \"Education\",\n  \"Engineering\",\n  \"Arts & Design\",\n  \"Science\",\n  \"Law\",\n  \"Marketing\",\n  \"Finance\",\n  \"Other\"\n];\n\nconst INTEREST_OPTIONS = [\n  \"Travel\", \"Culture\", \"Business\", \"Technology\", \"Science\", \"Art\", \"Music\",\n  \"Sports\", \"Food\", \"History\", \"Literature\", \"Movies\", \"Gaming\", \"Photography\"\n];\n\nconst CEFR_LEVELS = [\n  { value: \"A1\", label: \"A1 - Beginner\", description: \"Can understand basic phrases\" },\n  { value: \"A2\", label: \"A2 - Elementary\", description: \"Can handle simple conversations\" },\n  { value: \"B1\", label: \"B1 - Intermediate\", description: \"Can discuss familiar topics\" },\n  { value: \"B2\", label: \"B2 - Upper Intermediate\", description: \"Can engage in complex discussions\" },\n  { value: \"C1\", label: \"C1 - Advanced\", description: \"Can use language flexibly\" },\n  { value: \"C2\", label: \"C2 - Proficient\", description: \"Near-native level\" }\n];\n\nexport default function ProfileSetup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [selectedContentTypes, setSelectedContentTypes] = useState<string[]>([]);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors },\n  } = useForm<ProfileSetupForm>({\n    resolver: zodResolver(profileSetupSchema),\n    defaultValues: {\n      dailyGoalMinutes: 20,\n      cefr_level: \"A1\",\n      interests: [],\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileSetupForm) => {\n      return apiRequest(\"/api/profile\", {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Profile Setup Complete!\",\n        description: \"Your learning journey is ready to begin.\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = async (file: File) => {\n    if (file.size > 1024 * 1024) { // 1MB limit\n      toast({\n        title: \"File too large\",\n        description: \"Profile image must be less than 1MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      // Create a base64 data URL for preview and storage\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const dataUrl = e.target?.result as string;\n        setImagePreview(dataUrl);\n        setValue(\"profileImageUrl\", dataUrl);\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to process image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const toggleInterest = (interest: string) => {\n    const newInterests = selectedInterests.includes(interest)\n      ? selectedInterests.filter(i => i !== interest)\n      : [...selectedInterests, interest];\n    \n    setSelectedInterests(newInterests);\n    setValue(\"interests\", newInterests);\n  };\n\n  const onSubmit = (data: ProfileSetupForm) => {\n    const submitData = {\n      ...data,\n      interests: selectedInterests,\n      learningCategories: selectedCategories,\n      contentTypes: selectedContentTypes,\n      profileCompleted: true,\n    };\n    updateProfileMutation.mutate(submitData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 p-3 bg-blue-100 dark:bg-blue-900 rounded-full w-16 h-16 flex items-center justify-center\">\n              <Globe className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Complete Your Profile</CardTitle>\n            <CardDescription>\n              Help us personalize your language learning experience\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Profile Image Upload */}\n              <div className=\"text-center\">\n                <Label className=\"text-sm font-medium\">Profile Picture (Optional, max 1MB)</Label>\n                <div className=\"mt-2 flex flex-col items-center\">\n                  {imagePreview ? (\n                    <div className=\"relative\">\n                      <img\n                        src={imagePreview}\n                        alt=\"Profile preview\"\n                        className=\"w-24 h-24 rounded-full object-cover border-4 border-blue-200\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setImagePreview(\"\");\n                          setValue(\"profileImageUrl\", \"\");\n                        }}\n                        className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </div>\n                  ) : (\n                    <label className=\"cursor-pointer\">\n                      <div className=\"w-24 h-24 border-2 border-dashed border-gray-300 rounded-full flex items-center justify-center hover:border-blue-400 transition-colors\">\n                        <Upload className=\"w-6 h-6 text-gray-400\" />\n                      </div>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          const file = e.target.files?.[0];\n                          if (file) handleImageUpload(file);\n                        }}\n                      />\n                    </label>\n                  )}\n                </div>\n              </div>\n\n              {/* Personal Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name *</Label>\n                  <Input\n                    id=\"firstName\"\n                    {...register(\"firstName\")}\n                    className=\"mt-1\"\n                    placeholder=\"Your first name\"\n                  />\n                  {errors.firstName && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.firstName.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"lastName\">Last Name *</Label>\n                  <Input\n                    id=\"lastName\"\n                    {...register(\"lastName\")}\n                    className=\"mt-1\"\n                    placeholder=\"Your last name\"\n                  />\n                  {errors.lastName && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.lastName.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Location and Country */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"location\">City/Location</Label>\n                  <Input\n                    id=\"location\"\n                    {...register(\"location\")}\n                    className=\"mt-1\"\n                    placeholder=\"e.g., New York\"\n                  />\n                </div>\n                \n                <div>\n                  <Label>Country</Label>\n                  <Select onValueChange={(value) => setValue(\"country\", value)}>\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"Select your country\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {countries.map((country) => (\n                        <SelectItem key={country.code} value={country.name}>\n                          {country.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Field of Learning */}\n              <div>\n                <Label>Field of Learning/Work</Label>\n                <Select onValueChange={(value) => setValue(\"fieldOfLearning\", value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Select your field\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FIELD_OPTIONS.map((field) => (\n                      <SelectItem key={field} value={field}>\n                        {field}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Interests */}\n              <div>\n                <Label>Interests (Select up to 5)</Label>\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {INTEREST_OPTIONS.map((interest) => (\n                    <Badge\n                      key={interest}\n                      variant={selectedInterests.includes(interest) ? \"default\" : \"outline\"}\n                      className=\"cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900\"\n                      onClick={() => toggleInterest(interest)}\n                    >\n                      {interest}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Current Language Level */}\n              <div>\n                <Label>Current Language Level</Label>\n                <Select onValueChange={(value) => setValue(\"cefr_level\", value as any)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Select your current level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CEFR_LEVELS.map((level) => (\n                      <SelectItem key={level.value} value={level.value}>\n                        <div>\n                          <div className=\"font-medium\">{level.label}</div>\n                          <div className=\"text-xs text-gray-500\">{level.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Learning Categories */}\n              <div>\n                <Label>Learning Categories (Select your areas of interest)</Label>\n                <div className=\"mt-2 space-y-3\">\n                  {learningCategories.map((category) => (\n                    <div key={category.id} className=\"flex items-start space-x-2\">\n                      <Checkbox\n                        id={category.id}\n                        checked={selectedCategories.includes(category.id)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedCategories([...selectedCategories, category.id]);\n                          } else {\n                            setSelectedCategories(selectedCategories.filter(cat => cat !== category.id));\n                          }\n                        }}\n                      />\n                      <div className=\"grid gap-1.5 leading-none\">\n                        <label\n                          htmlFor={category.id}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                        >\n                          {category.name}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {category.subcategories.slice(0, 3).join(\", \")}...\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Content Types */}\n              <div>\n                <Label>Content Types (What would you like to learn?)</Label>\n                <div className=\"mt-2 space-y-3\">\n                  {contentTypes.map((type) => (\n                    <div key={type.id} className=\"flex items-start space-x-2\">\n                      <Checkbox\n                        id={type.id}\n                        checked={selectedContentTypes.includes(type.id)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedContentTypes([...selectedContentTypes, type.id]);\n                          } else {\n                            setSelectedContentTypes(selectedContentTypes.filter(t => t !== type.id));\n                          }\n                        }}\n                      />\n                      <div className=\"grid gap-1.5 leading-none\">\n                        <label\n                          htmlFor={type.id}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                        >\n                          {type.name}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {type.description}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Learning Style */}\n              <div>\n                <Label>Preferred Learning Style</Label>\n                <Select onValueChange={(value) => setValue(\"preferredLearningStyle\", value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Select your learning style\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"visual\">Visual Learner (images, diagrams, charts)</SelectItem>\n                    <SelectItem value=\"auditory\">Auditory Learner (listening, speaking)</SelectItem>\n                    <SelectItem value=\"kinesthetic\">Kinesthetic Learner (hands-on, interactive)</SelectItem>\n                    <SelectItem value=\"reading\">Reading/Writing Learner (text-based)</SelectItem>\n                    <SelectItem value=\"mixed\">Mixed Learning (combination of all)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Daily Goal */}\n              <div>\n                <Label htmlFor=\"dailyGoalMinutes\">Daily Study Goal (minutes)</Label>\n                <Input\n                  id=\"dailyGoalMinutes\"\n                  type=\"number\"\n                  min=\"5\"\n                  max=\"240\"\n                  {...register(\"dailyGoalMinutes\", { valueAsNumber: true })}\n                  className=\"mt-1\"\n                />\n                {errors.dailyGoalMinutes && (\n                  <p className=\"text-sm text-red-500 mt-1\">{errors.dailyGoalMinutes.message}</p>\n                )}\n              </div>\n\n              {/* Learning Features Preview */}\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                  <Target className=\"w-5 h-5\" />\n                  Your Personalized Learning Features\n                </h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <BookOpen className=\"w-4 h-4 text-blue-600\" />\n                    <span>AI-powered adaptive learning based on your pace</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"w-4 h-4 text-green-600\" />\n                    <span>Customizable study goals and intelligent reminders</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"w-4 h-4 text-purple-600\" />\n                    <span>Progress dashboards and CEFR level benchmarks (A1–C2)</span>\n                  </div>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={updateProfileMutation.isPending || isUploading}\n              >\n                {updateProfileMutation.isPending ? \"Setting up...\" : \"Complete Profile Setup\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18978},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Upload, X, User, Settings, BarChart3, Trophy, Edit2, Save, Clock, Target, BookOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\n\nconst updateProfileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  location: z.string().optional(),\n  fieldOfLearning: z.string().optional(),\n  interests: z.array(z.string()).optional(),\n  dailyGoalMinutes: z.number().min(5).max(240),\n  cefr_level: z.enum([\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"]),\n  profileImageUrl: z.string().optional(),\n});\n\ntype UpdateProfileForm = z.infer<typeof updateProfileSchema>;\n\nconst FIELD_OPTIONS = [\n  \"Technology\", \"Business\", \"Healthcare\", \"Education\", \"Engineering\",\n  \"Arts & Design\", \"Science\", \"Law\", \"Marketing\", \"Finance\", \"Other\"\n];\n\nconst INTEREST_OPTIONS = [\n  \"Travel\", \"Culture\", \"Business\", \"Technology\", \"Science\", \"Art\", \"Music\",\n  \"Sports\", \"Food\", \"History\", \"Literature\", \"Movies\", \"Gaming\", \"Photography\"\n];\n\nconst CEFR_LEVELS = [\n  { value: \"A1\", label: \"A1 - Beginner\", description: \"Can understand basic phrases\" },\n  { value: \"A2\", label: \"A2 - Elementary\", description: \"Can handle simple conversations\" },\n  { value: \"B1\", label: \"B1 - Intermediate\", description: \"Can discuss familiar topics\" },\n  { value: \"B2\", label: \"B2 - Upper Intermediate\", description: \"Can engage in complex discussions\" },\n  { value: \"C1\", label: \"C1 - Advanced\", description: \"Can use language flexibly\" },\n  { value: \"C2\", label: \"C2 - Proficient\", description: \"Near-native level\" }\n];\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Fetch current user data\n  const { data: userResponse, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => apiRequest(\"/api/auth/me\"),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n  });\n\n  const user = userResponse?.user;\n\n  // Fetch study sessions for progress tracking\n  const { data: studySessions } = useQuery({\n    queryKey: [\"/api/study-sessions\"],\n    queryFn: () => apiRequest(\"/api/study-sessions?limit=10\"),\n    enabled: !!user,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  // Fetch progress benchmarks\n  const { data: progressBenchmarks } = useQuery({\n    queryKey: [\"/api/progress-benchmarks\"],\n    queryFn: () => apiRequest(\"/api/progress-benchmarks\"),\n    enabled: !!user,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { errors },\n  } = useForm<UpdateProfileForm>({\n    resolver: zodResolver(updateProfileSchema),\n  });\n\n  // Initialize form with user data\n  useState(() => {\n    if (user) {\n      reset({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        location: user.location || \"\",\n        fieldOfLearning: user.fieldOfLearning || \"\",\n        interests: user.interests || [],\n        dailyGoalMinutes: user.dailyGoalMinutes || 20,\n        cefr_level: user.cefr_level || \"A1\",\n        profileImageUrl: user.profileImageUrl || \"\",\n      });\n      setSelectedInterests(user.interests || []);\n      setImagePreview(user.profileImageUrl || \"\");\n    }\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: UpdateProfileForm) => {\n      return apiRequest(\"/api/profile\", {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = async (file: File) => {\n    if (file.size > 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Profile image must be less than 1MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const dataUrl = e.target?.result as string;\n        setImagePreview(dataUrl);\n        setValue(\"profileImageUrl\", dataUrl);\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to process image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const toggleInterest = (interest: string) => {\n    const newInterests = selectedInterests.includes(interest)\n      ? selectedInterests.filter(i => i !== interest)\n      : [...selectedInterests, interest];\n    \n    setSelectedInterests(newInterests);\n    setValue(\"interests\", newInterests);\n  };\n\n  const onSubmit = (data: UpdateProfileForm) => {\n    const submitData = {\n      ...data,\n      interests: selectedInterests,\n    };\n    updateProfileMutation.mutate(submitData);\n  };\n\n  const calculateProgress = () => {\n    if (!studySessions || studySessions.length === 0) return 0;\n    const totalMinutes = studySessions.reduce((acc: number, session: any) => acc + session.durationMinutes, 0);\n    const dailyGoal = user?.dailyGoalMinutes || 20;\n    const daysActive = 7; // Last 7 days\n    return Math.min(100, (totalMinutes / (dailyGoal * daysActive)) * 100);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">Please log in to view your profile.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navigation />\n      <div className=\"max-w-4xl mx-auto p-4\">\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <User className=\"w-4 h-4\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"progress\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Progress\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n              <Settings className=\"w-4 h-4\" />\n              Settings\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Profile Card */}\n              <Card className=\"lg:col-span-1\">\n                <CardHeader className=\"text-center\">\n                  <Avatar className=\"w-24 h-24 mx-auto mb-4\">\n                    <AvatarImage src={user.profileImageUrl} alt={user.firstName} />\n                    <AvatarFallback className=\"text-2xl\">\n                      {user.firstName?.[0]}{user.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <CardTitle>{user.firstName} {user.lastName}</CardTitle>\n                  <CardDescription>\n                    {user.location && <div className=\"flex items-center justify-center gap-1 mt-1\">📍 {user.location}</div>}\n                    {user.fieldOfLearning && <div className=\"mt-1\">💼 {user.fieldOfLearning}</div>}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{user.totalPoints || 0}</div>\n                      <div className=\"text-sm text-gray-500\">Total Points</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{user.currentStreak || 0}</div>\n                      <div className=\"text-sm text-gray-500\">Day Streak</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {user.cefr_level || \"A1\"} Level\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Learning Stats */}\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"w-5 h-5\" />\n                    Learning Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <BookOpen className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                      <div className=\"text-2xl font-bold\">{user.dailyGoalMinutes || 20}</div>\n                      <div className=\"text-sm text-gray-500\">Daily Goal (min)</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <Clock className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                      <div className=\"text-2xl font-bold\">{studySessions?.length || 0}</div>\n                      <div className=\"text-sm text-gray-500\">Study Sessions</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                      <Trophy className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n                      <div className=\"text-2xl font-bold\">{progressBenchmarks?.length || 0}</div>\n                      <div className=\"text-sm text-gray-500\">Achievements</div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-6\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium\">Weekly Progress</span>\n                      <span className=\"text-sm text-gray-500\">{Math.round(calculateProgress())}%</span>\n                    </div>\n                    <Progress value={calculateProgress()} className=\"h-2\" />\n                  </div>\n\n                  {user.interests && user.interests.length > 0 && (\n                    <div className=\"mt-6\">\n                      <h4 className=\"text-sm font-medium mb-2\">Interests</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {user.interests.map((interest: string) => (\n                          <Badge key={interest} variant=\"secondary\">\n                            {interest}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Progress Tab */}\n          <TabsContent value=\"progress\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Learning Progress</CardTitle>\n                <CardDescription>Track your language learning journey</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {/* Personalized Learning Features */}\n                  <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-lg\">\n                    <h3 className=\"font-semibold mb-4 flex items-center gap-2\">\n                      <Target className=\"w-5 h-5 text-blue-600\" />\n                      Your Personalized Learning Features\n                    </h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"text-center p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                        <BookOpen className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                        <h4 className=\"font-medium mb-1\">AI-Powered Adaptive Learning</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Adjusts to your pace and performance automatically\n                        </p>\n                      </div>\n                      <div className=\"text-center p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                        <Target className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                        <h4 className=\"font-medium mb-1\">Smart Goals & Reminders</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Customizable study goals with intelligent notifications\n                        </p>\n                      </div>\n                      <div className=\"text-center p-4 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                        <BarChart3 className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n                        <h4 className=\"font-medium mb-1\">CEFR Benchmarks</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Progress tracking with A1–C2 proficiency levels\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Recent Study Sessions */}\n                  {studySessions && studySessions.length > 0 && (\n                    <div>\n                      <h3 className=\"font-semibold mb-3\">Recent Study Sessions</h3>\n                      <div className=\"space-y-2\">\n                        {studySessions.slice(0, 5).map((session: any) => (\n                          <div key={session.id} className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                            <div>\n                              <div className=\"font-medium\">{session.sessionType}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {new Date(session.startedAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">{session.durationMinutes} min</div>\n                              {session.correctAnswers && session.totalQuestions && (\n                                <div className=\"text-sm text-gray-500\">\n                                  {Math.round((session.correctAnswers / session.totalQuestions) * 100)}% accuracy\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                  <CardTitle>Profile Settings</CardTitle>\n                  <CardDescription>Manage your profile information</CardDescription>\n                </div>\n                <Button\n                  variant={isEditing ? \"outline\" : \"default\"}\n                  onClick={() => setIsEditing(!isEditing)}\n                >\n                  {isEditing ? (\n                    <>Cancel</>\n                  ) : (\n                    <>\n                      <Edit2 className=\"w-4 h-4 mr-2\" />\n                      Edit Profile\n                    </>\n                  )}\n                </Button>\n              </CardHeader>\n              \n              <CardContent>\n                <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Profile Image */}\n                  <div className=\"text-center\">\n                    <Label className=\"text-sm font-medium\">Profile Picture</Label>\n                    <div className=\"mt-2 flex flex-col items-center\">\n                      {imagePreview ? (\n                        <div className=\"relative\">\n                          <img\n                            src={imagePreview}\n                            alt=\"Profile preview\"\n                            className=\"w-24 h-24 rounded-full object-cover border-4 border-gray-200\"\n                          />\n                          {isEditing && (\n                            <button\n                              type=\"button\"\n                              onClick={() => {\n                                setImagePreview(\"\");\n                                setValue(\"profileImageUrl\", \"\");\n                              }}\n                              className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600\"\n                            >\n                              <X className=\"w-3 h-3\" />\n                            </button>\n                          )}\n                        </div>\n                      ) : (\n                        <Avatar className=\"w-24 h-24\">\n                          <AvatarFallback className=\"text-2xl\">\n                            {user.firstName?.[0]}{user.lastName?.[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                      )}\n                      \n                      {isEditing && (\n                        <label className=\"cursor-pointer mt-2\">\n                          <Button type=\"button\" variant=\"outline\" size=\"sm\" disabled={isUploading}>\n                            <Upload className=\"w-4 h-4 mr-2\" />\n                            {isUploading ? \"Uploading...\" : \"Change Photo\"}\n                          </Button>\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={(e) => {\n                              const file = e.target.files?.[0];\n                              if (file) handleImageUpload(file);\n                            }}\n                          />\n                        </label>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Form Fields */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...register(\"firstName\")}\n                        disabled={!isEditing}\n                        className=\"mt-1\"\n                      />\n                      {errors.firstName && (\n                        <p className=\"text-sm text-red-500 mt-1\">{errors.firstName.message}</p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...register(\"lastName\")}\n                        disabled={!isEditing}\n                        className=\"mt-1\"\n                      />\n                      {errors.lastName && (\n                        <p className=\"text-sm text-red-500 mt-1\">{errors.lastName.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      {...register(\"location\")}\n                      disabled={!isEditing}\n                      className=\"mt-1\"\n                      placeholder=\"e.g., New York, USA\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label>Field of Learning/Work</Label>\n                    <Select\n                      onValueChange={(value) => setValue(\"fieldOfLearning\", value)}\n                      disabled={!isEditing}\n                    >\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue placeholder={user.fieldOfLearning || \"Select your field\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {FIELD_OPTIONS.map((field) => (\n                          <SelectItem key={field} value={field}>\n                            {field}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {isEditing && (\n                    <div>\n                      <Label>Interests</Label>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {INTEREST_OPTIONS.map((interest) => (\n                          <Badge\n                            key={interest}\n                            variant={selectedInterests.includes(interest) ? \"default\" : \"outline\"}\n                            className=\"cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900\"\n                            onClick={() => toggleInterest(interest)}\n                          >\n                            {interest}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div>\n                    <Label>Current Language Level</Label>\n                    <Select\n                      onValueChange={(value) => setValue(\"cefr_level\", value as any)}\n                      disabled={!isEditing}\n                    >\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue placeholder={user.cefr_level || \"Select your level\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {CEFR_LEVELS.map((level) => (\n                          <SelectItem key={level.value} value={level.value}>\n                            <div>\n                              <div className=\"font-medium\">{level.label}</div>\n                              <div className=\"text-xs text-gray-500\">{level.description}</div>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dailyGoalMinutes\">Daily Study Goal (minutes)</Label>\n                    <Input\n                      id=\"dailyGoalMinutes\"\n                      type=\"number\"\n                      min=\"5\"\n                      max=\"240\"\n                      {...register(\"dailyGoalMinutes\", { valueAsNumber: true })}\n                      disabled={!isEditing}\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  {isEditing && (\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={updateProfileMutation.isPending}\n                    >\n                      {updateProfileMutation.isPending ? (\n                        \"Saving...\"\n                      ) : (\n                        <>\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save Changes\n                        </>\n                      )}\n                    </Button>\n                  )}\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":25339},"client/src/pages/signup.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst signupSchema = z.object({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(50, \"Username must be less than 50 characters\")\n    .regex(/^[a-zA-Z0-9_]+$/, \"Username can only contain letters, numbers, and underscores\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\").max(100, \"First name must be less than 100 characters\"),\n  lastName: z.string().min(1, \"Last name is required\").max(100, \"Last name must be less than 100 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\",\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupFormData) => {\n      return apiRequest(\"/api/auth/signup\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Account created successfully!\",\n        description: \"Welcome to Learn a Language. Start your learning journey today!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Please try again with different information.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupFormData) => {\n    signupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-slate-900 dark:to-slate-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Join Learn a Language</CardTitle>\n          <CardDescription>\n            Create your account to start learning languages today\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"John\"\n                          {...field}\n                          disabled={signupMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Doe\"\n                          {...field}\n                          disabled={signupMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"johndoe123\"\n                        {...field}\n                        disabled={signupMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"john@example.com\"\n                        {...field}\n                        disabled={signupMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter a secure password\"\n                        {...field}\n                        disabled={signupMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={signupMutation.isPending}\n              >\n                {signupMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"p-0 h-auto\">\n                  Sign in\n                </Button>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6965},"client/src/pages/stories.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, Book, ChevronRight, Utensils, Handshake, Calendar } from \"lucide-react\";\nimport type { CulturalStory } from \"@shared/schema\";\n\nexport default function Stories() {\n  const [selectedLevel, setSelectedLevel] = useState<string>(\"all\");\n  \n  const { data: stories, isLoading } = useQuery<CulturalStory[]>({\n    queryKey: [\"/api/languages/spanish-id/stories\"],\n    enabled: false, // Disabled for demo - would use actual language ID\n  });\n\n  // Mock data for demonstration\n  const mockStories = [\n    {\n      id: \"1\",\n      title: \"Una Cena Familiar\",\n      description: \"Experience a traditional Spanish family dinner and learn cultural dining etiquette\",\n      level: \"intermediate\",\n      category: \"culture\",\n      readingTimeMinutes: 15,\n      imageUrl: \"https://images.unsplash.com/photo-1555939594-58d7cb561ad1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: \"2\", \n      title: \"El Mercado Local\",\n      description: \"Learn shopping vocabulary at a traditional Spanish market\",\n      level: \"beginner\",\n      category: \"culture\",\n      readingTimeMinutes: 10,\n      imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: \"3\",\n      title: \"La Fiesta del Pueblo\", \n      description: \"Experience a traditional village celebration and local customs\",\n      level: \"intermediate\",\n      category: \"tradition\",\n      readingTimeMinutes: 12,\n      imageUrl: \"https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: \"4\",\n      title: \"Viaje a la Costa\",\n      description: \"Plan a trip to Spain's beautiful coastal regions\",\n      level: \"advanced\", \n      category: \"travel\",\n      readingTimeMinutes: 18,\n      imageUrl: \"https://images.unsplash.com/photo-1539037116277-4db20889f2d4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n    }\n  ];\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case \"beginner\": return \"bg-blue-100 text-blue-600\";\n      case \"intermediate\": return \"bg-amber-100 text-amber-600\";\n      case \"advanced\": return \"bg-emerald-100 text-emerald-600\";\n      default: return \"bg-slate-100 text-slate-600\";\n    }\n  };\n\n  const filteredStories = selectedLevel === \"all\" \n    ? mockStories \n    : mockStories.filter(story => story.level === selectedLevel);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">Cultural Stories & Immersion</h1>\n            <p className=\"text-lg text-slate-600\">Learn language through authentic cultural experiences and stories</p>\n          </div>\n\n          {/* Level Filter */}\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"bg-white rounded-lg p-1 shadow-sm\">\n              {[\"all\", \"beginner\", \"intermediate\", \"advanced\"].map((level) => (\n                <Button\n                  key={level}\n                  variant={selectedLevel === level ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedLevel(level)}\n                  className=\"mx-1\"\n                >\n                  {level.charAt(0).toUpperCase() + level.slice(1)}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n            {/* Featured Story */}\n            <Card className=\"bg-gradient-to-br from-emerald-50 to-blue-50 p-8 col-span-1 lg:col-span-2\">\n              <CardContent className=\"p-0\">\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <Badge className=\"bg-emerald-500\">Featured Story</Badge>\n                    <span className=\"text-sm text-slate-600\">Intermediate Level</span>\n                  </div>\n                  <h2 className=\"text-2xl font-bold text-slate-800 mb-2\">Una Cena Familiar</h2>\n                  <p className=\"text-slate-600\">Experience a traditional Spanish family dinner and learn cultural dining etiquette</p>\n                </div>\n                \n                <div className=\"rounded-xl overflow-hidden mb-6\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1555939594-58d7cb561ad1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                    alt=\"Spanish family dinner\"\n                    className=\"w-full h-48 object-cover\"\n                  />\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-slate-600\" />\n                        <span className=\"text-sm text-slate-600\">15 min read</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Book className=\"w-4 h-4 text-slate-600\" />\n                        <span className=\"text-sm text-slate-600\">Interactive dialogue</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button className=\"w-full bg-emerald-500 hover:bg-emerald-600\">\n                    Start Reading\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Story Collection */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            {filteredStories.slice(1).map((story) => (\n              <Card key={story.id} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-0\">\n                  <div className=\"aspect-video overflow-hidden rounded-t-lg\">\n                    <img \n                      src={story.imageUrl} \n                      alt={story.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Badge className={getLevelColor(story.level)}>\n                        {story.level}\n                      </Badge>\n                      <span className=\"text-xs text-slate-500 capitalize\">{story.category}</span>\n                    </div>\n                    <h3 className=\"font-semibold text-slate-800 mb-2\">{story.title}</h3>\n                    <p className=\"text-sm text-slate-600 mb-4\">{story.description}</p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-4 h-4 text-slate-600\" />\n                        <span className=\"text-sm text-slate-600\">{story.readingTimeMinutes} min</span>\n                      </div>\n                      <ChevronRight className=\"w-4 h-4 text-slate-400\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Cultural Tips Section */}\n          <Card className=\"bg-gradient-to-r from-amber-50 to-orange-50 p-8\">\n            <CardContent className=\"p-0\">\n              <h3 className=\"text-xl font-bold text-slate-800 mb-6\">Cultural Insights</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-amber-100 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n                    <Utensils className=\"w-8 h-8 text-amber-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-slate-800 mb-2\">Dining Etiquette</h4>\n                  <p className=\"text-sm text-slate-600\">Learn proper table manners and conversation topics for Spanish meals</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-amber-100 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n                    <Handshake className=\"w-8 h-8 text-amber-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-slate-800 mb-2\">Greetings & Gestures</h4>\n                  <p className=\"text-sm text-slate-600\">Master formal and informal greetings used across Spanish-speaking countries</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-amber-100 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n                    <Calendar className=\"w-8 h-8 text-amber-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-slate-800 mb-2\">Holidays & Traditions</h4>\n                  <p className=\"text-sm text-slate-600\">Discover important cultural celebrations and their significance</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9697},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };","size_bytes":1413},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };","size_bytes":1132},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  );\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};","size_bytes":7326},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/logo.tsx":{"content":"import logoImage from \"@assets/learn logo_1754083915790.png\";\n\ninterface LogoProps {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  className?: string;\n}\n\nexport function Logo({ size = \"md\", className = \"\" }: LogoProps) {\n  const sizeClasses = {\n    sm: \"h-10\",\n    md: \"h-16\", \n    lg: \"h-20\",\n    xl: \"h-28\"\n  };\n\n  return (\n    <img \n      src={logoImage} \n      alt=\"Learn a Language\" \n      className={`${sizeClasses[size]} w-auto ${className}`}\n    />\n  );\n}\n\nexport function LogoWithText({ size = \"md\", className = \"\" }: LogoProps) {\n  return (\n    <div className={`flex items-center space-x-3 ${className}`}>\n      <Logo size={size} />\n    </div>\n  );\n}","size_bytes":652},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\";\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\";\nimport { cn } from \"@/lib/utils\";\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n));\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\nexport { Progress };","size_bytes":781},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };","size_bytes":1892},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };","size_bytes":776},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/ai-content-generator.ts":{"content":"import { generateContent } from \"./gemini\";\n\nexport interface LearningContentRequest {\n  category: string;\n  subcategory?: string;\n  contentType: string;\n  cefrLevel: string;\n  userProfile: {\n    firstName: string;\n    fieldOfLearning?: string;\n    interests?: string[];\n    preferredLearningStyle?: string;\n  };\n  targetLanguage: string;\n}\n\nexport interface GeneratedContent {\n  title: string;\n  description: string;\n  content: any;\n  difficulty: string;\n  estimatedTime: number; // minutes\n}\n\nexport async function generateLearningContent(request: LearningContentRequest): Promise<GeneratedContent> {\n  const prompt = buildContentPrompt(request);\n  \n  try {\n    const response = await generateContent(prompt);\n    const content = parseAIResponse(response, request.contentType);\n    \n    return {\n      title: content.title || `${request.contentType} for ${request.category}`,\n      description: content.description || `Learn ${request.contentType} in ${request.category}`,\n      content: content.data,\n      difficulty: mapCEFRToDifficulty(request.cefrLevel),\n      estimatedTime: calculateEstimatedTime(request.contentType, request.cefrLevel)\n    };\n  } catch (error) {\n    console.error(\"AI content generation failed:\", error);\n    return generateFallbackContent(request);\n  }\n}\n\nfunction buildContentPrompt(request: LearningContentRequest): string {\n  const { category, subcategory, contentType, cefrLevel, userProfile, targetLanguage } = request;\n  \n  let prompt = `Generate ${contentType} learning content for ${targetLanguage} language learning.\n  \nContext:\n- Category: ${category}${subcategory ? ` > ${subcategory}` : ''}\n- Content Type: ${contentType}\n- CEFR Level: ${cefrLevel}\n- User's Field: ${userProfile.fieldOfLearning || 'General'}\n- User's Interests: ${userProfile.interests?.join(', ') || 'General topics'}\n- Learning Style: ${userProfile.preferredLearningStyle || 'Mixed'}\n\nRequirements:\n- Content must be appropriate for ${cefrLevel} level\n- Focus on ${category} domain${subcategory ? ` specifically ${subcategory}` : ''}\n- Include practical, real-world applications\n- Provide clear explanations and examples\n- Consider the user's learning style: ${userProfile.preferredLearningStyle}\n\n`;\n\n  switch (contentType) {\n    case 'terms':\n      prompt += `Generate 15-20 technical terms related to ${category}${subcategory ? ` > ${subcategory}` : ''}.\n      Format as JSON: {\n        \"title\": \"Technical Terms: [Topic]\",\n        \"description\": \"Essential terminology for [field]\",\n        \"data\": [\n          {\n            \"term\": \"word\",\n            \"translation\": \"translated word\",\n            \"definition\": \"clear definition\",\n            \"example\": \"example sentence\",\n            \"pronunciation\": \"phonetic guide\",\n            \"difficulty\": \"beginner|intermediate|advanced\"\n          }\n        ]\n      }`;\n      break;\n      \n    case 'vocabulary':\n      prompt += `Generate 20-25 vocabulary words commonly used in ${category}${subcategory ? ` > ${subcategory}` : ''}.\n      Format as JSON: {\n        \"title\": \"Vocabulary: [Topic]\",\n        \"description\": \"Essential words for [field]\",\n        \"data\": [\n          {\n            \"word\": \"word\",\n            \"translation\": \"translated word\",\n            \"partOfSpeech\": \"noun|verb|adjective|etc\",\n            \"definition\": \"clear definition\",\n            \"example\": \"example sentence\",\n            \"synonyms\": [\"synonym1\", \"synonym2\"],\n            \"difficulty\": \"beginner|intermediate|advanced\"\n          }\n        ]\n      }`;\n      break;\n      \n    case 'sentences':\n      prompt += `Generate 15-20 example sentences commonly used in ${category}${subcategory ? ` > ${subcategory}` : ''}.\n      Format as JSON: {\n        \"title\": \"Sample Sentences: [Topic]\",\n        \"description\": \"Common phrases and expressions\",\n        \"data\": [\n          {\n            \"sentence\": \"example sentence\",\n            \"translation\": \"translated sentence\",\n            \"context\": \"when to use this\",\n            \"breakdown\": \"grammatical explanation\",\n            \"difficulty\": \"beginner|intermediate|advanced\"\n          }\n        ]\n      }`;\n      break;\n      \n    case 'conversation':\n      prompt += `Generate 3-5 realistic conversations that might occur in ${category}${subcategory ? ` > ${subcategory}` : ''} settings.\n      Format as JSON: {\n        \"title\": \"Conversations: [Topic]\",\n        \"description\": \"Real-world dialogues\",\n        \"data\": [\n          {\n            \"title\": \"conversation title\",\n            \"scenario\": \"description of situation\",\n            \"dialogue\": [\n              {\"speaker\": \"Person A\", \"text\": \"what they say\", \"translation\": \"translation\"},\n              {\"speaker\": \"Person B\", \"text\": \"response\", \"translation\": \"translation\"}\n            ],\n            \"keyPhrases\": [\"phrase1\", \"phrase2\"],\n            \"difficulty\": \"beginner|intermediate|advanced\"\n          }\n        ]\n      }`;\n      break;\n  }\n\n  prompt += `\\n\\nRespond only with valid JSON. Ensure all content is appropriate for ${cefrLevel} level learners.`;\n  \n  return prompt;\n}\n\nfunction parseAIResponse(response: string, contentType: string): any {\n  try {\n    // Clean the response to extract JSON\n    const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[0]);\n    }\n    throw new Error(\"No valid JSON found in response\");\n  } catch (error) {\n    console.error(\"Failed to parse AI response:\", error);\n    throw error;\n  }\n}\n\nfunction mapCEFRToDifficulty(cefrLevel: string): string {\n  switch (cefrLevel) {\n    case 'A1':\n    case 'A2':\n      return 'beginner';\n    case 'B1':\n    case 'B2':\n      return 'intermediate';\n    case 'C1':\n    case 'C2':\n      return 'advanced';\n    default:\n      return 'beginner';\n  }\n}\n\nfunction calculateEstimatedTime(contentType: string, cefrLevel: string): number {\n  const baseTime = {\n    'terms': 20,\n    'vocabulary': 25,\n    'sentences': 15,\n    'conversation': 30\n  };\n  \n  const multiplier = {\n    'A1': 1.0,\n    'A2': 1.2,\n    'B1': 1.5,\n    'B2': 1.8,\n    'C1': 2.0,\n    'C2': 2.5\n  };\n  \n  return Math.round((baseTime[contentType] || 20) * (multiplier[cefrLevel] || 1.0));\n}\n\nfunction generateFallbackContent(request: LearningContentRequest): GeneratedContent {\n  // Fallback content when AI generation fails\n  const fallbackData = {\n    terms: [\n      {\n        term: \"Example Term\",\n        translation: \"Translated Term\",\n        definition: \"A sample definition for learning purposes\",\n        example: \"This is an example sentence using the term.\",\n        pronunciation: \"/ɪɡˈzæmpəl/\",\n        difficulty: mapCEFRToDifficulty(request.cefrLevel)\n      }\n    ],\n    vocabulary: [\n      {\n        word: \"Learn\",\n        translation: \"Aprender\",\n        partOfSpeech: \"verb\",\n        definition: \"To acquire knowledge or skill\",\n        example: \"I want to learn a new language.\",\n        synonyms: [\"study\", \"acquire\"],\n        difficulty: mapCEFRToDifficulty(request.cefrLevel)\n      }\n    ],\n    sentences: [\n      {\n        sentence: \"I am learning this topic.\",\n        translation: \"Estoy aprendiendo este tema.\",\n        context: \"When studying new material\",\n        breakdown: \"Subject + auxiliary verb + main verb + object\",\n        difficulty: mapCEFRToDifficulty(request.cefrLevel)\n      }\n    ],\n    conversation: [\n      {\n        title: \"Basic Introduction\",\n        scenario: \"Meeting someone new in a professional setting\",\n        dialogue: [\n          { speaker: \"Person A\", text: \"Hello, nice to meet you.\", translation: \"Hola, mucho gusto.\" },\n          { speaker: \"Person B\", text: \"Nice to meet you too!\", translation: \"¡Mucho gusto también!\" }\n        ],\n        keyPhrases: [\"nice to meet you\", \"hello\"],\n        difficulty: mapCEFRToDifficulty(request.cefrLevel)\n      }\n    ]\n  };\n\n  return {\n    title: `${request.contentType} for ${request.category}`,\n    description: `Basic ${request.contentType} content for ${request.category}`,\n    content: fallbackData[request.contentType] || fallbackData.vocabulary,\n    difficulty: mapCEFRToDifficulty(request.cefrLevel),\n    estimatedTime: calculateEstimatedTime(request.contentType, request.cefrLevel)\n  };\n}\n\nexport async function generateFlashcardsFromContent(content: any, contentType: string): Promise<Array<{front: string, back: string, cardType: string}>> {\n  const flashcards: Array<{front: string, back: string, cardType: string}> = [];\n  \n  if (contentType === 'terms' && Array.isArray(content)) {\n    content.forEach(term => {\n      flashcards.push({\n        front: term.term,\n        back: `${term.translation}\\n\\n${term.definition}`,\n        cardType: 'vocabulary'\n      });\n    });\n  } else if (contentType === 'vocabulary' && Array.isArray(content)) {\n    content.forEach(word => {\n      flashcards.push({\n        front: word.word,\n        back: `${word.translation}\\n\\n${word.definition}`,\n        cardType: 'vocabulary'\n      });\n    });\n  } else if (contentType === 'sentences' && Array.isArray(content)) {\n    content.forEach(sentence => {\n      flashcards.push({\n        front: sentence.sentence,\n        back: sentence.translation,\n        cardType: 'sentence'\n      });\n    });\n  }\n  \n  return flashcards;\n}","size_bytes":9168},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface LearningStage {\n  title: string;\n  description: string;\n  difficulty: string;\n  vocabularyWords: any[];\n  grammarTopics: any[];\n  culturalNotes: string[];\n  completionCriteria: any;\n}\n\nexport interface VocabularyWord {\n  word: string;\n  translation: string;\n  pronunciation: string;\n  difficulty: string;\n  context: string;\n  example: string;\n}\n\nexport async function generateLearningPathway(\n  targetLanguage: string,\n  nativeLanguage: string,\n  cefrLevel: string,\n  interests: string[],\n  fieldOfLearning?: string | null\n): Promise<LearningStage[]> {\n  try {\n    const systemPrompt = `\nYou are an expert language curriculum designer. Create a progressive learning pathway for ${targetLanguage} tailored to:\n- Current level: ${cefrLevel}\n- Interests: ${interests.join(\", \")}\n- Field of study: ${fieldOfLearning || \"General\"}\n- Native language: ${nativeLanguage}\n\nGenerate 6-8 learning stages that build progressively. Each stage should include:\n1. Title (engaging and descriptive)\n2. Description (what the learner will achieve)\n3. Difficulty level (beginner, intermediate, advanced)\n4. 10-15 vocabulary words with translations, pronunciation, and example sentences\n5. 3-5 grammar topics with explanations\n6. Cultural notes (3-5 interesting facts)\n7. Completion criteria (specific skills to master)\n\nMake the content culturally rich and engaging. Focus on practical, real-world usage.\nRespond with valid JSON only.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              description: { type: \"string\" },\n              difficulty: { type: \"string\" },\n              vocabularyWords: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    word: { type: \"string\" },\n                    translation: { type: \"string\" },\n                    pronunciation: { type: \"string\" },\n                    difficulty: { type: \"string\" },\n                    context: { type: \"string\" },\n                    example: { type: \"string\" }\n                  },\n                  required: [\"word\", \"translation\", \"pronunciation\", \"difficulty\", \"context\", \"example\"]\n                }\n              },\n              grammarTopics: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    topic: { type: \"string\" },\n                    explanation: { type: \"string\" },\n                    examples: {\n                      type: \"array\",\n                      items: { type: \"string\" }\n                    }\n                  },\n                  required: [\"topic\", \"explanation\", \"examples\"]\n                }\n              },\n              culturalNotes: {\n                type: \"array\",\n                items: { type: \"string\" }\n              },\n              completionCriteria: {\n                type: \"object\",\n                properties: {\n                  vocabularyMastery: { type: \"number\" },\n                  grammarUnderstanding: { type: \"number\" },\n                  practiceExercises: { type: \"number\" }\n                },\n                required: [\"vocabularyMastery\", \"grammarUnderstanding\", \"practiceExercises\"]\n              }\n            },\n            required: [\"title\", \"description\", \"difficulty\", \"vocabularyWords\", \"grammarTopics\", \"culturalNotes\", \"completionCriteria\"]\n          }\n        }\n      },\n      contents: `Create a learning pathway for ${targetLanguage} based on the user profile.`\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      throw new Error(\"Empty response from AI model\");\n    }\n\n    const stages: LearningStage[] = JSON.parse(rawJson);\n    return stages;\n  } catch (error) {\n    console.error(\"Error generating learning pathway:\", error);\n    throw new Error(`Failed to generate learning pathway: ${error}`);\n  }\n}\n\nexport async function generateVocabularySet(\n  language: string,\n  topic: string,\n  difficulty: string,\n  count: number = 10\n): Promise<VocabularyWord[]> {\n  try {\n    const systemPrompt = `\nYou are a vocabulary expert. Generate ${count} ${difficulty} level vocabulary words in ${language} related to ${topic}.\nEach word should include:\n- The word in the target language\n- English translation\n- Pronunciation guide (IPA or simplified)\n- Difficulty level\n- Context where it's commonly used\n- Example sentence in the target language with English translation\n\nMake the vocabulary practical and relevant to daily conversation.\nRespond with valid JSON only.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              word: { type: \"string\" },\n              translation: { type: \"string\" },\n              pronunciation: { type: \"string\" },\n              difficulty: { type: \"string\" },\n              context: { type: \"string\" },\n              example: { type: \"string\" }\n            },\n            required: [\"word\", \"translation\", \"pronunciation\", \"difficulty\", \"context\", \"example\"]\n          }\n        }\n      },\n      contents: `Generate vocabulary for ${topic} in ${language}.`\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      throw new Error(\"Empty response from AI model\");\n    }\n\n    const vocabulary: VocabularyWord[] = JSON.parse(rawJson);\n    return vocabulary;\n  } catch (error) {\n    console.error(\"Error generating vocabulary:\", error);\n    throw new Error(`Failed to generate vocabulary: ${error}`);\n  }\n}\n\nexport async function generateContent(prompt: string): Promise<string> {\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt\n    });\n\n    return response.text || \"\";\n  } catch (error) {\n    console.error(\"Error generating content:\", error);\n    throw new Error(`Failed to generate content: ${error}`);\n  }\n}\n\nexport async function generateGrammarExercise(\n  language: string,\n  grammarTopic: string,\n  difficulty: string\n): Promise<any> {\n  try {\n    const systemPrompt = `\nCreate a grammar exercise for ${language} focusing on ${grammarTopic} at ${difficulty} level.\nInclude:\n- Clear explanation of the grammar rule\n- 5-7 example sentences\n- 5 practice questions with multiple choice answers\n- Correct answers with explanations\n\nMake it educational and engaging.\nRespond with valid JSON only.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            topic: { type: \"string\" },\n            explanation: { type: \"string\" },\n            examples: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            questions: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  question: { type: \"string\" },\n                  options: {\n                    type: \"array\",\n                    items: { type: \"string\" }\n                  },\n                  correct: { type: \"number\" },\n                  explanation: { type: \"string\" }\n                },\n                required: [\"question\", \"options\", \"correct\", \"explanation\"]\n              }\n            }\n          },\n          required: [\"topic\", \"explanation\", \"examples\", \"questions\"]\n        }\n      },\n      contents: `Create a grammar exercise for ${grammarTopic} in ${language}.`\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      throw new Error(\"Empty response from AI model\");\n    }\n\n    return JSON.parse(rawJson);\n  } catch (error) {\n    console.error(\"Error generating grammar exercise:\", error);\n    throw new Error(`Failed to generate grammar exercise: ${error}`);\n  }\n}","size_bytes":8465},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { languages } from \"@shared/schema\";\n\nexport async function seedDatabase() {\n  try {\n    // Check if languages already exist\n    const existingLanguages = await db.select().from(languages);\n    \n    if (existingLanguages.length === 0) {\n      console.log(\"Seeding languages...\");\n      \n      const languagesToSeed = [\n        {\n          code: \"en\",\n          name: \"English\",\n          nativeName: \"English\",\n          flagEmoji: \"🇺🇸\",\n          isActive: true\n        },\n        {\n          code: \"es\",\n          name: \"Spanish\", \n          nativeName: \"Español\",\n          flagEmoji: \"🇪🇸\",\n          isActive: true\n        },\n        {\n          code: \"fr\",\n          name: \"French\",\n          nativeName: \"Français\", \n          flagEmoji: \"🇫🇷\",\n          isActive: true\n        },\n        {\n          code: \"de\",\n          name: \"German\",\n          nativeName: \"Deutsch\",\n          flagEmoji: \"🇩🇪\", \n          isActive: true\n        },\n        {\n          code: \"zh\",\n          name: \"Chinese\",\n          nativeName: \"中文\",\n          flagEmoji: \"🇨🇳\",\n          isActive: true\n        },\n        {\n          code: \"ru\",\n          name: \"Russian\", \n          nativeName: \"Русский\",\n          flagEmoji: \"🇷🇺\",\n          isActive: true\n        }\n      ];\n\n      await db.insert(languages).values(languagesToSeed);\n      console.log(\"Languages seeded successfully!\");\n    }\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}","size_bytes":1534},"shared/countries.ts":{"content":"export const countries = [\n  { code: \"AF\", name: \"Afghanistan\" },\n  { code: \"AL\", name: \"Albania\" },\n  { code: \"DZ\", name: \"Algeria\" },\n  { code: \"AS\", name: \"American Samoa\" },\n  { code: \"AD\", name: \"Andorra\" },\n  { code: \"AO\", name: \"Angola\" },\n  { code: \"AI\", name: \"Anguilla\" },\n  { code: \"AQ\", name: \"Antarctica\" },\n  { code: \"AG\", name: \"Antigua and Barbuda\" },\n  { code: \"AR\", name: \"Argentina\" },\n  { code: \"AM\", name: \"Armenia\" },\n  { code: \"AW\", name: \"Aruba\" },\n  { code: \"AU\", name: \"Australia\" },\n  { code: \"AT\", name: \"Austria\" },\n  { code: \"AZ\", name: \"Azerbaijan\" },\n  { code: \"BS\", name: \"Bahamas\" },\n  { code: \"BH\", name: \"Bahrain\" },\n  { code: \"BD\", name: \"Bangladesh\" },\n  { code: \"BB\", name: \"Barbados\" },\n  { code: \"BY\", name: \"Belarus\" },\n  { code: \"BE\", name: \"Belgium\" },\n  { code: \"BZ\", name: \"Belize\" },\n  { code: \"BJ\", name: \"Benin\" },\n  { code: \"BM\", name: \"Bermuda\" },\n  { code: \"BT\", name: \"Bhutan\" },\n  { code: \"BO\", name: \"Bolivia\" },\n  { code: \"BA\", name: \"Bosnia and Herzegovina\" },\n  { code: \"BW\", name: \"Botswana\" },\n  { code: \"BV\", name: \"Bouvet Island\" },\n  { code: \"BR\", name: \"Brazil\" },\n  { code: \"BQ\", name: \"British Antarctic Territory\" },\n  { code: \"IO\", name: \"British Indian Ocean Territory\" },\n  { code: \"VG\", name: \"British Virgin Islands\" },\n  { code: \"BN\", name: \"Brunei\" },\n  { code: \"BG\", name: \"Bulgaria\" },\n  { code: \"BF\", name: \"Burkina Faso\" },\n  { code: \"BI\", name: \"Burundi\" },\n  { code: \"KH\", name: \"Cambodia\" },\n  { code: \"CM\", name: \"Cameroon\" },\n  { code: \"CA\", name: \"Canada\" },\n  { code: \"CV\", name: \"Cape Verde\" },\n  { code: \"KY\", name: \"Cayman Islands\" },\n  { code: \"CF\", name: \"Central African Republic\" },\n  { code: \"TD\", name: \"Chad\" },\n  { code: \"CL\", name: \"Chile\" },\n  { code: \"CN\", name: \"China\" },\n  { code: \"CX\", name: \"Christmas Island\" },\n  { code: \"CC\", name: \"Cocos (Keeling) Islands\" },\n  { code: \"CO\", name: \"Colombia\" },\n  { code: \"KM\", name: \"Comoros\" },\n  { code: \"CG\", name: \"Congo\" },\n  { code: \"CD\", name: \"Congo (Democratic Republic)\" },\n  { code: \"CK\", name: \"Cook Islands\" },\n  { code: \"CR\", name: \"Costa Rica\" },\n  { code: \"HR\", name: \"Croatia\" },\n  { code: \"CU\", name: \"Cuba\" },\n  { code: \"CW\", name: \"Curaçao\" },\n  { code: \"CY\", name: \"Cyprus\" },\n  { code: \"CZ\", name: \"Czech Republic\" },\n  { code: \"DK\", name: \"Denmark\" },\n  { code: \"DJ\", name: \"Djibouti\" },\n  { code: \"DM\", name: \"Dominica\" },\n  { code: \"DO\", name: \"Dominican Republic\" },\n  { code: \"EC\", name: \"Ecuador\" },\n  { code: \"EG\", name: \"Egypt\" },\n  { code: \"SV\", name: \"El Salvador\" },\n  { code: \"GQ\", name: \"Equatorial Guinea\" },\n  { code: \"ER\", name: \"Eritrea\" },\n  { code: \"EE\", name: \"Estonia\" },\n  { code: \"ET\", name: \"Ethiopia\" },\n  { code: \"FK\", name: \"Falkland Islands\" },\n  { code: \"FO\", name: \"Faroe Islands\" },\n  { code: \"FJ\", name: \"Fiji\" },\n  { code: \"FI\", name: \"Finland\" },\n  { code: \"FR\", name: \"France\" },\n  { code: \"GF\", name: \"French Guiana\" },\n  { code: \"PF\", name: \"French Polynesia\" },\n  { code: \"TF\", name: \"French Southern Territories\" },\n  { code: \"GA\", name: \"Gabon\" },\n  { code: \"GM\", name: \"Gambia\" },\n  { code: \"GE\", name: \"Georgia\" },\n  { code: \"DE\", name: \"Germany\" },\n  { code: \"GH\", name: \"Ghana\" },\n  { code: \"GI\", name: \"Gibraltar\" },\n  { code: \"GR\", name: \"Greece\" },\n  { code: \"GL\", name: \"Greenland\" },\n  { code: \"GD\", name: \"Grenada\" },\n  { code: \"GP\", name: \"Guadeloupe\" },\n  { code: \"GU\", name: \"Guam\" },\n  { code: \"GT\", name: \"Guatemala\" },\n  { code: \"GG\", name: \"Guernsey\" },\n  { code: \"GN\", name: \"Guinea\" },\n  { code: \"GW\", name: \"Guinea-Bissau\" },\n  { code: \"GY\", name: \"Guyana\" },\n  { code: \"HT\", name: \"Haiti\" },\n  { code: \"HM\", name: \"Heard Island and McDonald Islands\" },\n  { code: \"HN\", name: \"Honduras\" },\n  { code: \"HK\", name: \"Hong Kong\" },\n  { code: \"HU\", name: \"Hungary\" },\n  { code: \"IS\", name: \"Iceland\" },\n  { code: \"IN\", name: \"India\" },\n  { code: \"ID\", name: \"Indonesia\" },\n  { code: \"IR\", name: \"Iran\" },\n  { code: \"IQ\", name: \"Iraq\" },\n  { code: \"IE\", name: \"Ireland\" },\n  { code: \"IM\", name: \"Isle of Man\" },\n  { code: \"IL\", name: \"Israel\" },\n  { code: \"IT\", name: \"Italy\" },\n  { code: \"CI\", name: \"Ivory Coast\" },\n  { code: \"JM\", name: \"Jamaica\" },\n  { code: \"JP\", name: \"Japan\" },\n  { code: \"JE\", name: \"Jersey\" },\n  { code: \"JO\", name: \"Jordan\" },\n  { code: \"KZ\", name: \"Kazakhstan\" },\n  { code: \"KE\", name: \"Kenya\" },\n  { code: \"KI\", name: \"Kiribati\" },\n  { code: \"KW\", name: \"Kuwait\" },\n  { code: \"KG\", name: \"Kyrgyzstan\" },\n  { code: \"LA\", name: \"Laos\" },\n  { code: \"LV\", name: \"Latvia\" },\n  { code: \"LB\", name: \"Lebanon\" },\n  { code: \"LS\", name: \"Lesotho\" },\n  { code: \"LR\", name: \"Liberia\" },\n  { code: \"LY\", name: \"Libya\" },\n  { code: \"LI\", name: \"Liechtenstein\" },\n  { code: \"LT\", name: \"Lithuania\" },\n  { code: \"LU\", name: \"Luxembourg\" },\n  { code: \"MO\", name: \"Macao\" },\n  { code: \"MK\", name: \"Macedonia\" },\n  { code: \"MG\", name: \"Madagascar\" },\n  { code: \"MW\", name: \"Malawi\" },\n  { code: \"MY\", name: \"Malaysia\" },\n  { code: \"MV\", name: \"Maldives\" },\n  { code: \"ML\", name: \"Mali\" },\n  { code: \"MT\", name: \"Malta\" },\n  { code: \"MH\", name: \"Marshall Islands\" },\n  { code: \"MQ\", name: \"Martinique\" },\n  { code: \"MR\", name: \"Mauritania\" },\n  { code: \"MU\", name: \"Mauritius\" },\n  { code: \"YT\", name: \"Mayotte\" },\n  { code: \"MX\", name: \"Mexico\" },\n  { code: \"FM\", name: \"Micronesia\" },\n  { code: \"MD\", name: \"Moldova\" },\n  { code: \"MC\", name: \"Monaco\" },\n  { code: \"MN\", name: \"Mongolia\" },\n  { code: \"ME\", name: \"Montenegro\" },\n  { code: \"MS\", name: \"Montserrat\" },\n  { code: \"MA\", name: \"Morocco\" },\n  { code: \"MZ\", name: \"Mozambique\" },\n  { code: \"MM\", name: \"Myanmar\" },\n  { code: \"NA\", name: \"Namibia\" },\n  { code: \"NR\", name: \"Nauru\" },\n  { code: \"NP\", name: \"Nepal\" },\n  { code: \"NL\", name: \"Netherlands\" },\n  { code: \"AN\", name: \"Netherlands Antilles\" },\n  { code: \"NC\", name: \"New Caledonia\" },\n  { code: \"NZ\", name: \"New Zealand\" },\n  { code: \"NI\", name: \"Nicaragua\" },\n  { code: \"NE\", name: \"Niger\" },\n  { code: \"NG\", name: \"Nigeria\" },\n  { code: \"NU\", name: \"Niue\" },\n  { code: \"NF\", name: \"Norfolk Island\" },\n  { code: \"KP\", name: \"North Korea\" },\n  { code: \"MP\", name: \"Northern Mariana Islands\" },\n  { code: \"NO\", name: \"Norway\" },\n  { code: \"OM\", name: \"Oman\" },\n  { code: \"PK\", name: \"Pakistan\" },\n  { code: \"PW\", name: \"Palau\" },\n  { code: \"PS\", name: \"Palestine\" },\n  { code: \"PA\", name: \"Panama\" },\n  { code: \"PG\", name: \"Papua New Guinea\" },\n  { code: \"PY\", name: \"Paraguay\" },\n  { code: \"PE\", name: \"Peru\" },\n  { code: \"PH\", name: \"Philippines\" },\n  { code: \"PN\", name: \"Pitcairn\" },\n  { code: \"PL\", name: \"Poland\" },\n  { code: \"PT\", name: \"Portugal\" },\n  { code: \"PR\", name: \"Puerto Rico\" },\n  { code: \"QA\", name: \"Qatar\" },\n  { code: \"RE\", name: \"Reunion\" },\n  { code: \"RO\", name: \"Romania\" },\n  { code: \"RU\", name: \"Russia\" },\n  { code: \"RW\", name: \"Rwanda\" },\n  { code: \"BL\", name: \"Saint Barthélemy\" },\n  { code: \"SH\", name: \"Saint Helena\" },\n  { code: \"KN\", name: \"Saint Kitts and Nevis\" },\n  { code: \"LC\", name: \"Saint Lucia\" },\n  { code: \"MF\", name: \"Saint Martin (French part)\" },\n  { code: \"PM\", name: \"Saint Pierre and Miquelon\" },\n  { code: \"VC\", name: \"Saint Vincent and the Grenadines\" },\n  { code: \"WS\", name: \"Samoa\" },\n  { code: \"SM\", name: \"San Marino\" },\n  { code: \"ST\", name: \"São Tomé and Príncipe\" },\n  { code: \"SA\", name: \"Saudi Arabia\" },\n  { code: \"SN\", name: \"Senegal\" },\n  { code: \"RS\", name: \"Serbia\" },\n  { code: \"SC\", name: \"Seychelles\" },\n  { code: \"SL\", name: \"Sierra Leone\" },\n  { code: \"SG\", name: \"Singapore\" },\n  { code: \"SX\", name: \"Sint Maarten (Dutch part)\" },\n  { code: \"SK\", name: \"Slovakia\" },\n  { code: \"SI\", name: \"Slovenia\" },\n  { code: \"SB\", name: \"Solomon Islands\" },\n  { code: \"SO\", name: \"Somalia\" },\n  { code: \"ZA\", name: \"South Africa\" },\n  { code: \"GS\", name: \"South Georgia and the South Sandwich Islands\" },\n  { code: \"KR\", name: \"South Korea\" },\n  { code: \"SS\", name: \"South Sudan\" },\n  { code: \"ES\", name: \"Spain\" },\n  { code: \"LK\", name: \"Sri Lanka\" },\n  { code: \"SD\", name: \"Sudan\" },\n  { code: \"SR\", name: \"Suriname\" },\n  { code: \"SJ\", name: \"Svalbard and Jan Mayen\" },\n  { code: \"SZ\", name: \"Swaziland\" },\n  { code: \"SE\", name: \"Sweden\" },\n  { code: \"CH\", name: \"Switzerland\" },\n  { code: \"SY\", name: \"Syria\" },\n  { code: \"TW\", name: \"Taiwan\" },\n  { code: \"TJ\", name: \"Tajikistan\" },\n  { code: \"TZ\", name: \"Tanzania\" },\n  { code: \"TH\", name: \"Thailand\" },\n  { code: \"TL\", name: \"Timor-Leste\" },\n  { code: \"TG\", name: \"Togo\" },\n  { code: \"TK\", name: \"Tokelau\" },\n  { code: \"TO\", name: \"Tonga\" },\n  { code: \"TT\", name: \"Trinidad and Tobago\" },\n  { code: \"TN\", name: \"Tunisia\" },\n  { code: \"TR\", name: \"Turkey\" },\n  { code: \"TM\", name: \"Turkmenistan\" },\n  { code: \"TC\", name: \"Turks and Caicos Islands\" },\n  { code: \"TV\", name: \"Tuvalu\" },\n  { code: \"UG\", name: \"Uganda\" },\n  { code: \"UA\", name: \"Ukraine\" },\n  { code: \"AE\", name: \"United Arab Emirates\" },\n  { code: \"GB\", name: \"United Kingdom\" },\n  { code: \"US\", name: \"United States\" },\n  { code: \"UM\", name: \"United States Minor Outlying Islands\" },\n  { code: \"VI\", name: \"United States Virgin Islands\" },\n  { code: \"UY\", name: \"Uruguay\" },\n  { code: \"UZ\", name: \"Uzbekistan\" },\n  { code: \"VU\", name: \"Vanuatu\" },\n  { code: \"VA\", name: \"Vatican City\" },\n  { code: \"VE\", name: \"Venezuela\" },\n  { code: \"VN\", name: \"Vietnam\" },\n  { code: \"WF\", name: \"Wallis and Futuna\" },\n  { code: \"EH\", name: \"Western Sahara\" },\n  { code: \"YE\", name: \"Yemen\" },\n  { code: \"ZM\", name: \"Zambia\" },\n  { code: \"ZW\", name: \"Zimbabwe\" }\n];\n\nexport const learningCategories = [\n  {\n    id: \"tech\",\n    name: \"Technology\",\n    subcategories: [\n      \"Software Development\",\n      \"Data Science\",\n      \"Artificial Intelligence\",\n      \"Cybersecurity\",\n      \"Robotics\",\n      \"Web Development\",\n      \"Mobile Development\",\n      \"Cloud Computing\",\n      \"DevOps\",\n      \"Machine Learning\"\n    ]\n  },\n  {\n    id: \"business\",\n    name: \"Business\",\n    subcategories: [\n      \"Marketing\",\n      \"Finance\",\n      \"Entrepreneurship\",\n      \"Management\",\n      \"Sales\",\n      \"Human Resources\",\n      \"Project Management\",\n      \"Business Analytics\",\n      \"Strategy\",\n      \"Operations\"\n    ]\n  },\n  {\n    id: \"education\",\n    name: \"Education\",\n    subcategories: [\n      \"K-12 Teaching\",\n      \"Higher Education\",\n      \"Online Learning\",\n      \"Curriculum Development\",\n      \"Educational Technology\",\n      \"Special Education\",\n      \"Language Teaching\",\n      \"STEM Education\",\n      \"Adult Education\",\n      \"Training & Development\"\n    ]\n  },\n  {\n    id: \"healthcare\",\n    name: \"Healthcare\",\n    subcategories: [\n      \"Medicine\",\n      \"Nursing\",\n      \"Mental Health\",\n      \"Public Health\",\n      \"Medical Research\",\n      \"Healthcare Administration\",\n      \"Pharmacy\",\n      \"Physical Therapy\",\n      \"Dentistry\",\n      \"Medical Technology\"\n    ]\n  },\n  {\n    id: \"science\",\n    name: \"Science\",\n    subcategories: [\n      \"Biology\",\n      \"Chemistry\",\n      \"Physics\",\n      \"Environmental Science\",\n      \"Research Methods\",\n      \"Laboratory Techniques\",\n      \"Scientific Writing\",\n      \"Data Analysis\",\n      \"Biotechnology\",\n      \"Astronomy\"\n    ]\n  },\n  {\n    id: \"arts\",\n    name: \"Arts & Design\",\n    subcategories: [\n      \"Graphic Design\",\n      \"Digital Art\",\n      \"Photography\",\n      \"Video Production\",\n      \"Music\",\n      \"Creative Writing\",\n      \"UI/UX Design\",\n      \"Architecture\",\n      \"Fashion Design\",\n      \"Fine Arts\"\n    ]\n  }\n];\n\nexport const contentTypes = [\n  { id: \"terms\", name: \"Technical Terms\", description: \"Industry-specific terminology and definitions\" },\n  { id: \"vocabulary\", name: \"Vocabulary\", description: \"Common words and phrases used in the field\" },\n  { id: \"sentences\", name: \"Sample Sentences\", description: \"Example sentences and phrases\" },\n  { id: \"conversation\", name: \"Conversations\", description: \"Realistic dialogues and discussions\" }\n];","size_bytes":11847},"client/src/pages/LearningPathway.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BookOpen, \n  Brain, \n  CheckCircle, \n  Lock, \n  Play, \n  Target, \n  Trophy,\n  Sparkles,\n  Globe,\n  Volume2,\n  Star,\n  ArrowLeft,\n  ArrowRight,\n  ChevronRight,\n  Award,\n  Lightbulb,\n  Clock,\n  Users\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LearningStage {\n  id: string;\n  stageNumber: number;\n  title: string;\n  description: string;\n  difficulty: string;\n  isUnlocked: boolean;\n  isCompleted: boolean;\n  vocabularyData?: VocabularyWord[];\n  grammarTopics?: GrammarTopic[];\n  culturalNotes?: string[];\n  completionCriteria?: CompletionCriteria;\n}\n\ninterface VocabularyWord {\n  word: string;\n  translation: string;\n  pronunciation: string;\n  difficulty: string;\n  context: string;\n  example: string;\n}\n\ninterface GrammarTopic {\n  topic: string;\n  explanation: string;\n  examples: string[];\n}\n\ninterface CompletionCriteria {\n  vocabularyMastery: number;\n  grammarUnderstanding: number;\n  practiceExercises: number;\n}\n\ninterface LearningPath {\n  id: string;\n  languageId: string;\n  currentLevel: string;\n  targetLevel: string;\n  completedStages: number;\n  totalStages: number;\n  progressPercentage: number;\n}\n\ninterface Language {\n  id: string;\n  code: string;\n  name: string;\n  nativeName: string;\n  flagEmoji: string;\n}\n\nexport default function LearningPathway() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedLanguage, setSelectedLanguage] = useState<Language | null>(null);\n  const [selectedStage, setSelectedStage] = useState<LearningStage | null>(null);\n  const [activeTab, setActiveTab] = useState(\"vocabulary\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [masteredWords, setMasteredWords] = useState<Set<string>>(new Set());\n\n  // Fetch user data\n  const { data: userResponse } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    staleTime: 5 * 60 * 1000,\n  });\n\n  // Fetch languages\n  const { data: languages } = useQuery({\n    queryKey: [\"/api/languages\"],\n    staleTime: 10 * 60 * 1000,\n  });\n\n  // Fetch learning path for selected language\n  const { data: learningPath, isLoading: pathLoading } = useQuery({\n    queryKey: [\"/api/learning-paths\", selectedLanguage?.id],\n    enabled: !!selectedLanguage?.id,\n  });\n\n  // Fetch learning stages\n  const { data: stages, isLoading: stagesLoading } = useQuery({\n    queryKey: [\"/api/learning-paths\", learningPath?.id, \"stages\"],\n    enabled: !!learningPath?.id,\n  });\n\n  const user = userResponse?.user;\n\n  // Complete stage mutation\n  const completeStage = useMutation({\n    mutationFn: (stageId: string) => \n      apiRequest(`/api/learning-stages/${stageId}/complete`, {\n        method: \"PUT\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/learning-paths\"] });\n      toast({\n        title: \"Stage Completed!\",\n        description: \"Congratulations! You've completed this learning stage.\",\n      });\n    },\n  });\n\n  // Create study session mutation\n  const createStudySession = useMutation({\n    mutationFn: (sessionData: any) => \n      apiRequest(\"/api/study-sessions\", {\n        method: \"POST\",\n        body: JSON.stringify(sessionData),\n      }),\n  });\n\n  // Set default language\n  useEffect(() => {\n    if (languages && languages.length > 0 && !selectedLanguage) {\n      setSelectedLanguage(languages[0]);\n    }\n  }, [languages, selectedLanguage]);\n\n  // Set first unlocked stage as selected\n  useEffect(() => {\n    if (stages && stages.length > 0 && !selectedStage) {\n      const firstUnlocked = stages.find((stage: LearningStage) => stage.isUnlocked && !stage.isCompleted);\n      const firstStage = stages[0];\n      setSelectedStage(firstUnlocked || firstStage);\n    }\n  }, [stages, selectedStage]);\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case \"beginner\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"intermediate\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"advanced\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\";\n    }\n  };\n\n  const handleWordMastery = (word: string) => {\n    const newMastered = new Set(masteredWords);\n    if (newMastered.has(word)) {\n      newMastered.delete(word);\n    } else {\n      newMastered.add(word);\n    }\n    setMasteredWords(newMastered);\n  };\n\n  const speakWord = (text: string) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = selectedLanguage?.code || 'en';\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const handleCompleteStage = () => {\n    if (!selectedStage) return;\n    \n    // Create study session\n    createStudySession.mutate({\n      languageId: selectedLanguage?.id,\n      activityType: \"learning_stage\",\n      durationMinutes: 15, // Estimated time\n      pointsEarned: 50,\n      skillPracticed: selectedStage.title\n    });\n\n    completeStage.mutate(selectedStage.id);\n  };\n\n  const calculateStageProgress = () => {\n    if (!selectedStage?.vocabularyData) return 0;\n    const totalWords = selectedStage.vocabularyData.length;\n    const masteredCount = masteredWords.size;\n    return totalWords > 0 ? (masteredCount / totalWords) * 100 : 0;\n  };\n\n  if (!selectedLanguage) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n        <Navigation />\n        <div className=\"max-w-4xl mx-auto p-6\">\n          <div className=\"text-center\">\n            <Brain className=\"w-16 h-16 mx-auto text-blue-500 mb-4\" />\n            <h1 className=\"text-2xl font-bold mb-2\">Loading Learning Pathway...</h1>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation />\n      <div className=\"max-w-7xl mx-auto p-6\">\n        \n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button \n            variant=\"outline\" \n            onClick={() => window.location.href = \"/dashboard\"}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Dashboard\n          </Button>\n          \n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-3xl\">{selectedLanguage.flagEmoji}</span>\n            <div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                Your {selectedLanguage.name} Learning Journey\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                AI-powered personalized language learning pathway\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          \n          {/* Learning Stages Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5\" />\n                  {selectedLanguage.name} Learning Stages\n                </CardTitle>\n                {learningPath && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span>{Math.round(learningPath.progressPercentage || 0)}%</span>\n                    </div>\n                    <Progress value={learningPath.progressPercentage || 0} className=\"h-2\" />\n                    <p className=\"text-xs text-gray-500\">\n                      {learningPath.completedStages}/{learningPath.totalStages} stages completed\n                    </p>\n                  </div>\n                )}\n              </CardHeader>\n              <CardContent className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {stagesLoading ? (\n                  <div className=\"text-center py-4\">Loading stages...</div>\n                ) : !stages || stages.length === 0 ? (\n                  <div className=\"text-center py-4 text-gray-500\">\n                    <Lightbulb className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\n                    <p className=\"text-sm\">No learning stages available yet.</p>\n                    <p className=\"text-xs\">Return to dashboard to generate content.</p>\n                  </div>\n                ) : (\n                  stages.map((stage: LearningStage) => (\n                    <Card \n                      key={stage.id}\n                      className={`cursor-pointer transition-all hover:shadow-md ${\n                        selectedStage?.id === stage.id ? \"border-blue-500 bg-blue-50 dark:bg-blue-900/20\" : \"\"\n                      } ${\n                        stage.isCompleted ? \"border-green-200 bg-green-50 dark:bg-green-900/20\" : \n                        stage.isUnlocked ? \"border-blue-200\" : \n                        \"border-gray-200 opacity-60\"\n                      }`}\n                      onClick={() => stage.isUnlocked && setSelectedStage(stage)}\n                    >\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                            stage.isCompleted ? \"bg-green-500 text-white\" :\n                            stage.isUnlocked ? \"bg-blue-500 text-white\" :\n                            \"bg-gray-400 text-white\"\n                          }`}>\n                            {stage.isCompleted ? <CheckCircle className=\"w-4 h-4\" /> : \n                             stage.isUnlocked ? stage.stageNumber : \n                             <Lock className=\"w-3 h-3\" />}\n                          </div>\n                          <Badge className={getDifficultyColor(stage.difficulty)} variant=\"secondary\">\n                            {stage.difficulty}\n                          </Badge>\n                        </div>\n                        <h4 className=\"font-semibold text-sm mb-1\">{stage.title}</h4>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-300 line-clamp-2\">\n                          {stage.description}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Learning Content */}\n          <div className=\"lg:col-span-3\">\n            {selectedStage ? (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`p-2 rounded-full ${\n                        selectedStage.isCompleted ? \"bg-green-500\" : \n                        selectedStage.isUnlocked ? \"bg-blue-500\" : \"bg-gray-400\"\n                      }`}>\n                        <BookOpen className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          Stage {selectedStage.stageNumber}: {selectedStage.title}\n                          <Badge className={getDifficultyColor(selectedStage.difficulty)}>\n                            {selectedStage.difficulty}\n                          </Badge>\n                        </CardTitle>\n                        <CardDescription>{selectedStage.description}</CardDescription>\n                      </div>\n                    </div>\n                    \n                    {selectedStage.isUnlocked && !selectedStage.isCompleted && (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"text-right text-sm\">\n                          <p className=\"text-gray-500\">Progress</p>\n                          <p className=\"font-semibold\">{Math.round(calculateStageProgress())}%</p>\n                        </div>\n                        <Button \n                          onClick={handleCompleteStage}\n                          disabled={calculateStageProgress() < 80 || completeStage.isPending}\n                          className=\"bg-green-500 hover:bg-green-600\"\n                        >\n                          {completeStage.isPending ? (\n                            <>\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                              Completing...\n                            </>\n                          ) : (\n                            <>\n                              <Trophy className=\"w-4 h-4 mr-2\" />\n                              Complete Stage\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {selectedStage.isUnlocked && !selectedStage.isCompleted && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Stage Progress</span>\n                        <span>{masteredWords.size}/{selectedStage.vocabularyData?.length || 0} words mastered</span>\n                      </div>\n                      <Progress value={calculateStageProgress()} className=\"h-2\" />\n                    </div>\n                  )}\n                </CardHeader>\n                \n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                      <TabsTrigger value=\"vocabulary\" className=\"flex items-center gap-2\">\n                        <BookOpen className=\"w-4 h-4\" />\n                        Vocabulary\n                      </TabsTrigger>\n                      <TabsTrigger value=\"grammar\" className=\"flex items-center gap-2\">\n                        <Brain className=\"w-4 h-4\" />\n                        Grammar\n                      </TabsTrigger>\n                      <TabsTrigger value=\"culture\" className=\"flex items-center gap-2\">\n                        <Globe className=\"w-4 h-4\" />\n                        Culture\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"vocabulary\" className=\"space-y-4\">\n                      {selectedStage.vocabularyData && selectedStage.vocabularyData.length > 0 ? (\n                        <>\n                          <div className=\"flex items-center justify-between\">\n                            <h3 className=\"text-lg font-semibold\">Vocabulary Words</h3>\n                            <Badge variant=\"outline\">\n                              {currentWordIndex + 1} / {selectedStage.vocabularyData.length}\n                            </Badge>\n                          </div>\n                          \n                          {selectedStage.vocabularyData[currentWordIndex] && (\n                            <Card className=\"border-2 border-blue-200\">\n                              <CardContent className=\"p-6\">\n                                <div className=\"text-center space-y-4\">\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex items-center justify-center gap-4\">\n                                      <h2 className=\"text-3xl font-bold text-blue-600\">\n                                        {selectedStage.vocabularyData[currentWordIndex].word}\n                                      </h2>\n                                      <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={() => speakWord(selectedStage.vocabularyData[currentWordIndex].word)}\n                                      >\n                                        <Volume2 className=\"w-4 h-4\" />\n                                      </Button>\n                                    </div>\n                                    <p className=\"text-gray-500\">\n                                      /{selectedStage.vocabularyData[currentWordIndex].pronunciation}/\n                                    </p>\n                                    <p className=\"text-xl font-semibold\">\n                                      {selectedStage.vocabularyData[currentWordIndex].translation}\n                                    </p>\n                                  </div>\n                                  \n                                  <Separator />\n                                  \n                                  <div className=\"space-y-3\">\n                                    <div>\n                                      <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">Context</h4>\n                                      <p className=\"text-sm\">{selectedStage.vocabularyData[currentWordIndex].context}</p>\n                                    </div>\n                                    <div>\n                                      <h4 className=\"font-medium text-gray-700 dark:text-gray-300\">Example</h4>\n                                      <p className=\"text-sm italic\">\n                                        \"{selectedStage.vocabularyData[currentWordIndex].example}\"\n                                      </p>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"flex items-center justify-between\">\n                                    <Button\n                                      variant=\"outline\"\n                                      disabled={currentWordIndex === 0}\n                                      onClick={() => setCurrentWordIndex(currentWordIndex - 1)}\n                                    >\n                                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                                      Previous\n                                    </Button>\n                                    \n                                    <Button\n                                      variant={masteredWords.has(selectedStage.vocabularyData[currentWordIndex].word) ? \"default\" : \"outline\"}\n                                      onClick={() => handleWordMastery(selectedStage.vocabularyData[currentWordIndex].word)}\n                                    >\n                                      <Star className=\"w-4 h-4 mr-2\" />\n                                      {masteredWords.has(selectedStage.vocabularyData[currentWordIndex].word) ? \"Mastered\" : \"Mark as Mastered\"}\n                                    </Button>\n                                    \n                                    <Button\n                                      variant=\"outline\"\n                                      disabled={currentWordIndex === selectedStage.vocabularyData.length - 1}\n                                      onClick={() => setCurrentWordIndex(currentWordIndex + 1)}\n                                    >\n                                      Next\n                                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          )}\n                        </>\n                      ) : (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <BookOpen className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No vocabulary words available for this stage.</p>\n                        </div>\n                      )}\n                    </TabsContent>\n\n                    <TabsContent value=\"grammar\" className=\"space-y-4\">\n                      {selectedStage.grammarTopics && selectedStage.grammarTopics.length > 0 ? (\n                        <div className=\"space-y-6\">\n                          <h3 className=\"text-lg font-semibold\">Grammar Topics</h3>\n                          {selectedStage.grammarTopics.map((topic: GrammarTopic, index: number) => (\n                            <Card key={index}>\n                              <CardHeader>\n                                <CardTitle className=\"text-base\">{topic.topic}</CardTitle>\n                              </CardHeader>\n                              <CardContent className=\"space-y-4\">\n                                <div>\n                                  <h4 className=\"font-medium mb-2\">Explanation</h4>\n                                  <p className=\"text-sm\">{topic.explanation}</p>\n                                </div>\n                                {topic.examples && topic.examples.length > 0 && (\n                                  <div>\n                                    <h4 className=\"font-medium mb-2\">Examples</h4>\n                                    <ul className=\"space-y-2\">\n                                      {topic.examples.map((example: string, exIndex: number) => (\n                                        <li key={exIndex} className=\"text-sm bg-gray-50 dark:bg-gray-800 p-2 rounded\">\n                                          {example}\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </div>\n                                )}\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <Brain className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No grammar topics available for this stage.</p>\n                        </div>\n                      )}\n                    </TabsContent>\n\n                    <TabsContent value=\"culture\" className=\"space-y-4\">\n                      {selectedStage.culturalNotes && selectedStage.culturalNotes.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold\">Cultural Notes</h3>\n                          <div className=\"grid gap-4\">\n                            {selectedStage.culturalNotes.map((note: string, index: number) => (\n                              <Card key={index}>\n                                <CardContent className=\"p-4\">\n                                  <div className=\"flex items-start gap-3\">\n                                    <Globe className=\"w-5 h-5 text-purple-500 mt-1 flex-shrink-0\" />\n                                    <p className=\"text-sm\">{note}</p>\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            ))}\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <Globe className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No cultural notes available for this stage.</p>\n                        </div>\n                      )}\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Target className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">Select a Learning Stage</h3>\n                  <p className=\"text-gray-500\">Choose a stage from the sidebar to start learning</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24951},"client/src/pages/OnlineFriends.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Video, \n  MessageCircle, \n  UserPlus, \n  Phone,\n  PhoneCall,\n  UserCheck,\n  UserX,\n  Globe,\n  Clock,\n  Wifi,\n  WifiOff\n} from \"lucide-react\";\n\ninterface UserConnection {\n  id: string;\n  userId: string;\n  friendId: string;\n  status: string;\n  isOnline: boolean;\n  lastSeen: string;\n  friend: {\n    id: string;\n    username: string;\n    firstName?: string;\n    lastName?: string;\n    profileImage?: string;\n    location?: string;\n    nativeLanguage?: string;\n    targetLanguages?: string[];\n  };\n}\n\ninterface VideoCallSession {\n  id: string;\n  initiatorId: string;\n  receiverId: string;\n  sessionId: string;\n  status: string;\n  createdAt: string;\n}\n\nexport default function OnlineFriends() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"friends\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [currentCall, setCurrentCall] = useState<VideoCallSession | null>(null);\n\n  // Fetch friends\n  const { data: friends, isLoading: friendsLoading } = useQuery({\n    queryKey: [\"/api/friends\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Fetch online friends\n  const { data: onlineFriends, isLoading: onlineLoading } = useQuery({\n    queryKey: [\"/api/friends/online\"],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  // Fetch active calls\n  const { data: activeCalls } = useQuery({\n    queryKey: [\"/api/video-calls/active\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  // Start video call mutation\n  const startVideoCall = useMutation({\n    mutationFn: (receiverId: string) => \n      apiRequest(\"/api/video-calls\", {\n        method: \"POST\",\n        body: JSON.stringify({ receiverId }),\n      }),\n    onSuccess: (data) => {\n      setCurrentCall(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/video-calls/active\"] });\n      toast({\n        title: \"Video Call Started\",\n        description: \"Connecting to your friend...\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Call Failed\",\n        description: error.message || \"Failed to start video call\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update call status mutation\n  const updateCallStatus = useMutation({\n    mutationFn: ({ callId, status }: { callId: string; status: string }) => \n      apiRequest(`/api/video-calls/${callId}/status`, {\n        method: \"PUT\",\n        body: JSON.stringify({ status }),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/video-calls/active\"] });\n      if (currentCall) {\n        setCurrentCall(null);\n      }\n    },\n  });\n\n  // Add friend mutation\n  const addFriend = useMutation({\n    mutationFn: (friendId: string) => \n      apiRequest(\"/api/friends/connect\", {\n        method: \"POST\",\n        body: JSON.stringify({ friendId }),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      toast({\n        title: \"Friend Request Sent\",\n        description: \"Your friend request has been sent successfully!\",\n      });\n    },\n  });\n\n  // Update online status on mount/unmount\n  useEffect(() => {\n    const updateOnlineStatus = (isOnline: boolean) => {\n      apiRequest(\"/api/users/online-status\", {\n        method: \"PUT\",\n        body: JSON.stringify({ isOnline }),\n      }).catch(console.error);\n    };\n\n    updateOnlineStatus(true);\n\n    const handleBeforeUnload = () => updateOnlineStatus(false);\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n\n    return () => {\n      updateOnlineStatus(false);\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n  }, []);\n\n  const formatLastSeen = (lastSeen: string) => {\n    const date = new Date(lastSeen);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMins < 1) return \"Just now\";\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${diffDays}d ago`;\n  };\n\n  const renderFriendCard = (connection: UserConnection, isOnline = false) => {\n    const friend = connection.friend;\n    \n    return (\n      <Card \n        key={connection.id} \n        className={`transition-all duration-200 hover:shadow-md ${\n          isOnline ? \"border-green-200 bg-green-50\" : \"\"\n        }`}\n        data-testid={`friend-card-${friend.username}`}\n      >\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={friend.profileImage} />\n                <AvatarFallback>\n                  {friend.firstName?.[0]}{friend.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              {connection.isOnline && (\n                <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white\"></div>\n              )}\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2\">\n                <h3 className=\"font-semibold truncate\">\n                  {friend.firstName} {friend.lastName} (@{friend.username})\n                </h3>\n                {connection.isOnline ? (\n                  <Badge variant=\"default\" className=\"bg-green-500\">\n                    <Wifi className=\"w-3 h-3 mr-1\" />\n                    Online\n                  </Badge>\n                ) : (\n                  <Badge variant=\"secondary\">\n                    <WifiOff className=\"w-3 h-3 mr-1\" />\n                    {formatLastSeen(connection.lastSeen)}\n                  </Badge>\n                )}\n              </div>\n              \n              {friend.location && (\n                <p className=\"text-sm text-gray-600 flex items-center gap-1 mt-1\">\n                  <Globe className=\"w-3 h-3\" />\n                  {friend.location}\n                </p>\n              )}\n              \n              {friend.targetLanguages && friend.targetLanguages.length > 0 && (\n                <div className=\"flex gap-1 mt-2\">\n                  {friend.targetLanguages.map((lang, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {lang}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid={`message-${friend.username}`}\n              >\n                <MessageCircle className=\"w-4 h-4\" />\n              </Button>\n              \n              {connection.isOnline && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => startVideoCall.mutate(friend.id)}\n                  disabled={startVideoCall.isPending}\n                  data-testid={`call-${friend.username}`}\n                >\n                  <Video className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderActiveCall = (call: VideoCallSession) => (\n    <Card className=\"border-blue-200 bg-blue-50\" data-testid=\"active-call\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <PhoneCall className=\"w-5 h-5 text-blue-500\" />\n          Active Video Call\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">Call in progress...</p>\n            <p className=\"text-sm text-gray-600\">Status: {call.status}</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => updateCallStatus.mutate({ callId: call.id, status: \"ended\" })}\n              data-testid=\"end-call-button\"\n            >\n              <Phone className=\"w-4 h-4 mr-1\" />\n              End Call\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card className=\"bg-white/80 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold flex items-center gap-2\">\n              <Users className=\"w-8 h-8 text-blue-500\" />\n              Online Friends\n            </CardTitle>\n            <CardDescription className=\"text-lg\">\n              Connect with language learning partners around the world\n            </CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* Active Calls */}\n        {activeCalls && activeCalls.length > 0 && (\n          <div className=\"space-y-4\">\n            <h2 className=\"text-xl font-semibold\">Active Calls</h2>\n            {activeCalls.map((call: VideoCallSession) => renderActiveCall(call))}\n          </div>\n        )}\n\n        {/* Search Bar */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex gap-4\">\n              <Input\n                placeholder=\"Search friends by username...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"flex-1\"\n                data-testid=\"friend-search-input\"\n              />\n              <Button variant=\"outline\" data-testid=\"add-friend-button\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Add Friend\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Friends Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"friends\" data-testid=\"all-friends-tab\">\n              All Friends ({friends?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"online\" data-testid=\"online-friends-tab\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                Online ({onlineFriends?.length || 0})\n              </div>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"friends\" className=\"mt-6\">\n            <div className=\"space-y-4\">\n              {friendsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n                  <p>Loading friends...</p>\n                </div>\n              ) : friends && friends.length > 0 ? (\n                <ScrollArea className=\"h-96\">\n                  <div className=\"space-y-3\" data-testid=\"friends-list\">\n                    {friends\n                      .filter((friend: UserConnection) => \n                        !searchQuery || \n                        friend.friend.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                        friend.friend.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                        friend.friend.lastName?.toLowerCase().includes(searchQuery.toLowerCase())\n                      )\n                      .map((friend: UserConnection) => renderFriendCard(friend))\n                    }\n                  </div>\n                </ScrollArea>\n              ) : (\n                <Card>\n                  <CardContent className=\"pt-6 text-center\">\n                    <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 mb-4\">No friends yet. Start connecting with other learners!</p>\n                    <Button>\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Find Friends\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"online\" className=\"mt-6\">\n            <div className=\"space-y-4\">\n              {onlineLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-500 mx-auto mb-4\"></div>\n                  <p>Loading online friends...</p>\n                </div>\n              ) : onlineFriends && onlineFriends.length > 0 ? (\n                <div className=\"space-y-3\" data-testid=\"online-friends-list\">\n                  {onlineFriends.map((friend: UserConnection) => renderFriendCard(friend, true))}\n                </div>\n              ) : (\n                <Card>\n                  <CardContent className=\"pt-6 text-center\">\n                    <WifiOff className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">No friends are currently online.</p>\n                    <p className=\"text-sm text-gray-500 mt-2\">\n                      Check back later or invite more friends to join!\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":14253}}}